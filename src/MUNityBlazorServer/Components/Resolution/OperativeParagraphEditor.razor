@inject Services.SqlResolutionService resolutionService;
@using MUNity.Extensions; 
@using MUNity.Extensions.ResolutionExtensions;


@if (!Paragraph.IsVirtual)
{
<div class="panel panel-inverse m-t-0">
    <div class="panel-heading">
        <h4 class="panel-title" @onclick="() => expanded = !expanded" style="cursor: pointer;">
            @Index <span class="text-secondary">Operativer Absatz:</span>
            <i class="fa fa-pen"></i>
            @previewText
        </h4>
        <div class="panel-heading-btn">

            <div class="btn-group m-l-5">
                <button type="button" class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown" aria-expanded="false"> Funktionen<b class="caret"></b></button>
                <div class="dropdown-menu dropdown-menu-right" role="menu" style="">
                    <a href="javascript:;" class="dropdown-item" @onclick="() => expanded = !expanded">
                        @((expanded) ? "Einklappen" : "Ausklappen")
                    </a>
                    <a @onclick="MoveUp" style="cursor: pointer;" class="dropdown-item"><i class="fa fa-arrow-up"></i>Nach oben schieben</a>
                    <a @onclick="MoveDown" style="cursor: pointer;" class="dropdown-item"><i class="fa fa-arrow-down"></i>Nach unten schieben</a>
                    <div class="dropdown-divider"></div>
                    <a href="javascript:;" class="dropdown-item text-danger-darker" @onclick="() => ParagraphRemoved.InvokeAsync(this.Paragraph)">Löschen</a>
                </div>
            </div>
        </div>
    </div>
    @if (expanded)
    {
        <div class="panel-body">
            <div class="row">
                <div class="col-12">
                    <textarea class="form-control" @bind="Paragraph.Text" rows="4" @onblur="() => SaveParagraphText(Paragraph)" />
                </div>
            </div>
        </div>
    }

</div>
}
else
{
    <div class="panel bg-cyan-transparent-5 m-t-0">
        <div class="panel-heading">
            <h4 class="panel-title" style="cursor: pointer;">
               <span class="text-black">Virtueller Absatz</span>
                @if (addAmendment != null)
                {
                    <span>Änderungsantrag auf Hinzufügen erstellt hier einen neuen Absatz.</span>
                }
                else if (moveAmendment != null)
                {
                    <span>Hier wird paragraph @ViewModel?.Resolution?.OperativeSection.GetIndexNameOfOperativeParagraph(@sourceParagraphOfMove?.OperativeParagraphId) hin verschoben</span>
                }
            </h4>
        </div>
    </div>
}


@code {
    [Parameter]
    public MUNity.Models.Resolution.OperativeParagraph Paragraph { get; set; }

    [Parameter]
    public ViewModel.ResolutionViewModel ViewModel { get; set; }


    [Parameter]
    public EventCallback<MUNity.Models.Resolution.OperativeParagraph> ParagraphRemoved { get; set; }

    [Parameter]
    public EventCallback ParagraphMoved { get; set; }

    private MUNity.Models.Resolution.AddAmendment addAmendment
    {
        get
        {
            return ViewModel?.Resolution?.OperativeSection?.AddAmendments.FirstOrDefault(n => n.TargetSectionId == this.Paragraph.OperativeParagraphId);
        }
    }

    private MUNity.Models.Resolution.MoveAmendment moveAmendment
    {
        get
        {
            return ViewModel?.Resolution?.OperativeSection?.MoveAmendments.FirstOrDefault(n => n.NewTargetSectionId == this.Paragraph.OperativeParagraphId);
        }
    }

    private MUNity.Models.Resolution.OperativeParagraph sourceParagraphOfMove
    {
        get
        {
            return ViewModel?.Resolution?.OperativeSection?.FindOperativeParagraph(moveAmendment.TargetSectionId);
        }
    }


    public string Index
    {
        get
        {
            if (this.Paragraph.IsVirtual)
                return "virtual";


            return this.ViewModel?.Resolution?.OperativeSection?.GetIndexNameOfOperativeParagraph(this.Paragraph.OperativeParagraphId);
        }
    }

    private IEnumerable<MUNity.Models.Resolution.ChangeAmendment> changeAmendments
    {
        get
        {
            return this.ViewModel?.Resolution?.OperativeSection?.ChangeAmendments.Where(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
        }
    }

    private IEnumerable<MUNity.Models.Resolution.DeleteAmendment> deleteAmendments
    {
        get
        {
            return this.ViewModel?.Resolution?.OperativeSection?.DeleteAmendments.Where(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
        }
    }

    private bool expanded = true;

    private string previewText
    {
        get
        {
            if (Paragraph == null) return "";
            return (Paragraph.Text.Length > 30) ? Paragraph.Text.Substring(0, 30) + "..." : Paragraph.Text;
        }
    }

    private async Task SaveParagraphText(MUNity.Models.Resolution.OperativeParagraph paragraph)
    {
        await this.ViewModel.SetOperativeParagraphText(paragraph.OperativeParagraphId, paragraph.Text);
    }

    private void MoveUp()
    {
        var index = ViewModel?.Resolution?.OperativeSection?.GetIndexOfParagraph(this.Paragraph) ?? -1;
        if (index > 0)
        {
            ViewModel?.Resolution?.OperativeSection?.Paragraphs.Swap(index - 1, index);
            this.resolutionService.ReorderOperative(ViewModel.Resolution.ResolutionId, ViewModel?.Resolution?.OperativeSection?.Paragraphs.Select(n => n.OperativeParagraphId).ToList());
            ParagraphMoved.InvokeAsync();
        }
    }

    private void MoveDown()
    {
        var index = ViewModel?.Resolution?.OperativeSection?.GetIndexOfParagraph(this.Paragraph) ?? -1;
        if (index < ViewModel?.Resolution?.OperativeSection?.Paragraphs.Count && index != -1)
        {
            ViewModel.Resolution.OperativeSection.Paragraphs.Swap(index + 1, index);
            this.resolutionService.ReorderOperative(ViewModel.Resolution.ResolutionId, ViewModel?.Resolution?.OperativeSection?.Paragraphs.Select(n => n.OperativeParagraphId).ToList());
            ParagraphMoved.InvokeAsync();
        }
    }
}
