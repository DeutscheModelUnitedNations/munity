@inject Services.SimulationService simulationService;
@inject NavigationManager navManager;

<TableRow>
    <TableRowCell>@User.SimulationUserId</TableRowCell>
    <TableRowCell>@User.DisplayName</TableRowCell>
    <TableRowCell>
        <Select @bind-SelectedValue="@roleId">
            <option value="-2">Keine Rolle</option>
            @foreach (var role in Roles)
            {
                <option value="@role.SimulationRoleId">@role.Name</option>
            }
        </Select>
    </TableRowCell>
    <TableRowCell>@User.PublicUserId</TableRowCell>
    <TableRowCell>@User.Password</TableRowCell>
    <TableRowCell>@inviteLink</TableRowCell>
    <TableRowCell TextAlignment="TextAlignment.Center">
        <button class="btn btn-circle btn-danger" @onclick="() => RemoveUser()">
            <i class="fa fa-trash"></i>
            </button>
    </TableRowCell>
</TableRow>

@code {
    [Parameter]
    public MUNityCore.Models.Simulation.SimulationUser User { get; set; }

    [Parameter]
    public List<MUNityCore.Models.Simulation.SimulationRole> Roles { get; set; }

    [Parameter]
    public EventCallback<MUNityCore.Models.Simulation.SimulationUser> UserRemoved { get; set; }

    private string inviteLink;

    private int _roleId;
    private int roleId
    {
        get => _roleId;
        set
        {
            simulationService.SetUserRole(User.SimulationUserId, value);

            _roleId = value;
        }
    }

    protected override void OnInitialized()
    {
        this._roleId = User.Role?.SimulationRoleId ?? -2;
        this.inviteLink = navManager.BaseUri + "invite/" + this.simulationService.GetInviteLink(this.User.SimulationUserId);
        base.OnInitialized();
    }

    private void RemoveUser()
    {
        this.simulationService.RemoveUser(this.User.SimulationUserId);
        this.UserRemoved.InvokeAsync(this.User);
    }
}
