@using MUNity.Models.Resolution;
@using System.Collections.ObjectModel;

@if (Paragraph != null)
{
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                <h4> Absatz @Pathname</h4> 
                @if (!DeleteAmendments.Where(n => n.Activated).Any() &&
                !ChangeAmendments.Where(n => n.Activated).Any() &&
                !MoveAmendments.Where(n => n.Activated).Any())
                {
                    <div class="row mx-0 mt-0 ">
                        <MUNityClient.Shared.General.MarkdownView Content="@Paragraph.Text">
                        </MUNityClient.Shared.General.MarkdownView>
                    </div>
                } else {
                    @if (DeleteAmendments.Any(n => n.Activated))
                    {
                        <div class="card border-danger my-2">
                            <div class="card-body text-danger">
                            <h5><i class="fas fa-trash mr-2"></i>Absatz streichen</h5>
                            <br>
                            <del>@Paragraph.Text</del>
                            <br>
                            <br>
                            <i class="fas fa-user-edit mr-2"></i>
                            @{Boolean setComma = false;}
                            @foreach (var activeDeleteAmendments in DeleteAmendments.Where(n => n.Activated))
                            {
                                @if (setComma)
                                {
                                <span>, </span>
                                }
                                @activeDeleteAmendments.SubmitterName
                                setComma = true;
                            }
                            </div>
                        </div>
                    }
                    @foreach (var activChangeAmendments in ChangeAmendments.Where(n => n.Activated))
                    {
                    <div class="card border-primary my-2">
                        <div class="card-body text-primary">
                            <h5><i class="fas fa-pen mr-2"></i>Absatz ändern</h5>
                            <br>
                            <del class="text-danger">@Paragraph.Text</del>
                            <br>
                            @activChangeAmendments.NewText
                            <br>
                            <br>
                            <i class="fas fa-user-edit mr-2"></i>@activChangeAmendments.SubmitterName
                        </div>
                    </div>
                    }
                    @foreach (var activeMoveAmendments in MoveAmendments.Where(n => n.Activated))
                    {
                        <div class="card border-dark my-2">
                            <div class="card-body">
                                <h5><i class="fas fa-arrow-left mr-2"></i>Absatz verschieben</h5>
                                <br>
                                @Paragraph.Text
                                <br>
                                <br>
                                <i class="fas fa-user-edit mr-2"></i>
                                @activeMoveAmendments.SubmitterName
                            </div>
                        </div>
                    }
                }


                <div class="row mx-0 mb-0 mt-4">
                    @if (@DeleteAmendments.Any())
                    {
                        <a class="badge badge-danger" @onclick="() => amendmentModal.Open()">@DeleteAmendments.Count() @(DeleteAmendments.Count() > 1 ? "Anträge" :
                                    "Antrag") auf Streichung</a>
                    }
                    @if (@ChangeAmendments.Any())
                    {
                        <a class="badge badge-info" @onclick="() => amendmentModal.Open()">@ChangeAmendments.Count() @(ChangeAmendments.Count() > 1 ? "Anträge" :
                                    "Antrag") auf Änderung</a>
                    }
                    @if (@MoveAmendments.Any())
                    {
                        <a class="badge badge-dark" @onclick="() => amendmentModal.Open()">@MoveAmendments.Count() @(MoveAmendments.Count() > 1 ? "Anträge" :
                                    "Antrag") auf Verschiebung</a>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="col-12">
        <div class="card">
            <div class="row m-0 card-body text-danger d-flex align-items-center">
                <i class="fas fa-exclamation-circle mr-2"></i>
                Paragraph nicht gefunden!
            </div>
        </div>
    </div>
}

<MUNityClient.Shared.Bootstrap.Modal Title="Antragsliste" @ref="amendmentModal" ShowSubmitButton="false">
    <div class="row">
        @if (DeleteAmendments.Any())
        {
            <div class="col-12">
                <h3>Anträge auf Streichung</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Eingereicht durch</th>
                            <th>Um</th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach(var amendment in DeleteAmendments)
                        {
                            <tr>
                                <td>@amendment.SubmitterName</td>
                                <td>@amendment.SubmitTime.ToString("dd.MM.yyyy HH:mm:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        }
        
        @if (ChangeAmendments.Any())
        {
            <div class="col-12" style="overflow-y: scroll; max-height: 400px;">
                <h3>Anträge auf Textänderung</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Eingereicht durch</th>
                            <th>Neuer Text</th>
                            <th>Um</th>
                        </tr>

                    </thead>
                    <tbody >
                        @foreach(var amendment in ChangeAmendments)
                        {
                            <tr>
                                <td>@amendment.SubmitterName</td>
                                <td>@amendment.NewText</td>
                                <td>@amendment.SubmitTime.ToString("dd.MM.yyyy HH:mm:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        }

        @if (MoveAmendments.Any())
        {
            <div class="col-12">
                <h3>Anträge auf Verschieben</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Eingereicht durch</th>
                            <th>Neuee Position</th>
                            <th>Um</th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach(var amendment in MoveAmendments)
                        {
                            <tr>
                                <td>@amendment.SubmitterName</td>
                                <td>Pfad kann derzeit nicht aufgelöst werden</td>
                                <td>@amendment.SubmitTime.ToString("dd.MM.yyyy HH:mm:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        }
    </div>
</MUNityClient.Shared.Bootstrap.Modal>


@code {
    [Parameter]
    public OperativeParagraph Paragraph { get; set; }

    [Parameter]
    public ViewModels.ResolutionViewModel ViewModel { get; set; }

    [Parameter]
    public string Pathname { get; set; }

    [Parameter]
    public System.Collections.Generic.IEnumerable<DeleteAmendment> DeleteAmendments { get; set; }

    [Parameter]
    public System.Collections.Generic.IEnumerable<ChangeAmendment> ChangeAmendments { get; set; }

    [Parameter]
    public System.Collections.Generic.IEnumerable<MoveAmendment> MoveAmendments { get; set; }

        private MUNityClient.Shared.Bootstrap.Modal amendmentModal;

    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.Handler.ChangedFromExtern += delegate { this.StateHasChanged(); };
        }
        base.OnInitialized();
    }

}
