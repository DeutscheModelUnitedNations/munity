<div class="col-12 col-md-6 m-0 p-3">
    <div class="row m-0 p-0 d-flex justify-content-between list-head border-bottom">
        <div class="col p-0 m-0 mr-2">
            <h5 class="col-12 p-0">
                <i class="fas fa-user-alt mr-2"></i>
                @if (ViewModel.SourceList.CurrentQuestion != null)
                {
                    @ViewModel.SourceList.CurrentQuestion.Name
                }
                else
                {
                    <span>-</span>
                }
                <span type="button" class="text-danger hover-enabled" title="Kopf leeren"
                      @onclick="() => this.ViewModel.Handler.ClearCurrentQuestion()">
                    <i class="fas fa-trash ml-3"></i>
                </span>
            </h5>
        </div>
        <div class="col-7 row m-0 p-0 d-flex justify-content-end">
            <span type="button" class="py-1 px-3 text-danger hover-enabled"
                  @onclick="() => this.ViewModel.Handler.AddQuestionSeconds(-10)">-10</span>
            <h3 class="m-0 text-center @(ViewModel.LowOnQuestionTime ? "text-danger" : "")">
                @(ViewModel.OutOfQuestionTime ? "-" : "")
                @ViewModel.SourceList.RemainingQuestionTime.ToString(@"mm\:ss")
            </h3>
            <span type="button" class="py-1 px-3 text-success hover-enabled"
                  @onclick="() => this.ViewModel.Handler.AddQuestionSeconds(10)">+10</span>
        </div>
    </div>
    @* Controls *@
    <div class="col-12 p-0 my-3">
        @if (ViewModel.SourceList.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            <i title="Rede pausieren" type="button" class="fas mx-2 fa-lg fa-pause"
               @onclick="() => ViewModel.Handler.Pause()"></i>
        }
        else
        {
            <i title="Rede fortsetzen" type="button" class="fas mx-2 fa-lg fa-play"
               @onclick="() => ViewModel.Handler.ResumeQuestion()"></i>
        }
        <i title="Nächste Rede" type="button" class="fas mx-2 fa-lg fa-step-forward"
           @onclick="() => ViewModel.Handler.NextQuestion()"></i>
        <i title="Redezeit zurücksetzen" type="button" class="fas fa-lg fa-undo ml-3"
           @onclick="() => ViewModel.Handler.ResumeQuestion()"></i>

    </div>
    <div class="col-12 mx-0 px-0">
        <h5>Fragen und Kurzbemerkungen</h5>
        @foreach (var question in ViewModel.SourceList.Questions)
        {
            <div class="card border p-2">@question.Name <i class="fas fa-times mr-2 text-danger" @onclick="() => RemoveSpeaker(question)"></i></div>
        }
        @if (ViewModel.SourceList.QuestionsClosed)
        {
            <button @onclick="() => ViewModel.Handler.OpenQuestions()"
                    class="btn btn-outline-success">
                FuK
                öffnen
            </button>
        }
        else
        {
            <div type="button" @onclick="() => ViewModel.Handler.CloseQuestions()"
                 class="border mx-0 mt-2 p-2">
                <i class="fas fa-ban mr-2 text-danger"></i>FuK
                schließen
            </div>
        }
    </div>
    <div class="col-12 row mx-0 px-0 my-3">
        <EditForm Model="NewCommentator" OnValidSubmit="AddToQuestions()">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="col-11 py-0 pl-0">

                <div class="form-group">
                    <InputText @bind-Value="NewCommentator.Name" class="form-control" placeholder="Land hinzufügen..." />
                </div>

            </div>
            <div class="col-1 p-0">
                <button type="submit" class="btn btn-success m-0 py-2 px-0 w-100"><i class="fas fa-plus fa-lg"></i></button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public ViewModels.ListOfSpeakerViewModel ViewModel { get; set; }

    System.Timers.Timer timer;

    private Models.ListOfSpeaker.SpeakerToAdd NewCommentator = new Models.ListOfSpeaker.SpeakerToAdd();

    private EventCallback AddToQuestions()
    {
        if (NewCommentator.Name != null && NewCommentator.Name.Length > 2)
        {
            this.ViewModel.Handler.AddQuestion(NewCommentator);
            NewCommentator.Name = "";
        }

        return EventCallback.Empty;
    }

    protected override void OnInitialized()
    {
        this.timer = new System.Timers.Timer(1000);
        timer.Elapsed += TimerElapsed;
        if (this.ViewModel?.Handler != null)
        {
            this.ViewModel.Handler.SpeakerAdded += delegate { this.StateHasChanged(); };
            this.ViewModel.Handler.SpeakerRemoved += delegate { this.StateHasChanged(); };
            this.ViewModel.Handler.NextQuestionPushed += delegate { this.StateHasChanged(); };
            this.ViewModel.Handler.QuestionTimerStarted += SpeakerTimerChanged;
            this.ViewModel.Handler.ClearQuestion += delegate { this.StateHasChanged(); };
            this.ViewModel.Handler.Paused += Paused;
            this.ViewModel.Handler.QuestionsStateChanged += delegate { this.StateHasChanged(); };

            if (this.ViewModel.SourceList.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
            {
                this.timer.Start();
            }
        }
        base.OnInitialized();
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs args)
    {
        this.StateHasChanged();
    }

    private void Paused(object sender, EventArgs args)
    {
        this.StateHasChanged();
        timer.Stop();
    }

    private void SpeakerTimerChanged(object sender, DateTime time)
    {
        this.StateHasChanged();
        timer.Start();
    }

    private void RemoveSpeaker(MUNity.Models.ListOfSpeakers.Speaker speaker)
    {
        this.ViewModel.Handler.Remove(speaker);
    }
}
