@inject Services.SimulationService simulationService;


<div class="widget-list-item w-100 border @((User.SimulationUserId == ViewModel.Me.SimulationUserId) ? "bg-light" : "")" style="border-width: 2px !important;" >
    <div class="widget-list-media ">
        @if (Role != null && !string.IsNullOrEmpty(Role.Iso))
        {
            <img src="/img/flags/small/un.png" alt="" class="rounded ">
        }
        else
        {
            <img src="/img/flags/small/un.png" />
        }

    </div>
    <div class="widget-list-content">
        <div class="row m-0 p-0 col-7">
            @if (!User.IsOnline)
            {
               <span class="badge badge-danger d-flex align-items-center">Offline</span>
            }
            <div class="col m-0 p-0">
                @if (Role != null)
                {
                    <h4 class="widget-list-title col-12">@Role.Name</h4>
                }
                <p class="widget-list-desc col-12">@User?.DisplayName</p>
            </div>

        </div>
    </div>
    <div class="widget-list-action">
        @if (_lastVoteArgs != null)
        {
            if (_lastVoteArgs.Choice == 0)
            {
                <span class="badge badge-success">Dafür</span>
            }
            else if (_lastVoteArgs.Choice == 1)
            {
                <span class="badge badge-danger">Dagegen</span>
            }
            else if (_lastVoteArgs.Choice == 2)
            {
                <span class="badge badge-primary">Enthaltung</span>
            }
        }

        @if (Petitions.Any())
        {
            if (Petitions.Count() == 1)
            {
                <span class="badge badge-warning">Stellt Antrag: @ViewModel.PetitionTypes.FirstOrDefault(n => n.PetitionTypeId == Petitions.First().PetitionTypeId)?.Name</span>
            }
            else
            {
                <span class="badge badge-warning">Stellt @Petitions.Count() Anträge!</span>
            }
        }
    </div>
</div>

<style>

    .widget-list.widget-list-rounded .widget-list-item:first-child, .widget-list.widget-list-rounded.widget-list-item:first-child {
        -webkit-border-top-right-radius: 6px;
        border-top-right-radius: 6px;
        -webkit-border-top-left-radius: 6px;
        border-top-left-radius: 6px;
    }

    .widget-list .widget-list-item {
        display: table;
        width: 100%;
        background: #fff;
        text-decoration: none;
        color: #212121;
    }

    .widget-list .widget-list-item .widget-list-media {
        width: 70px;
        height: 60px;
        padding: 10px;
        display: table-cell;
        vertical-align: middle;
    }

    .widget-list .widget-list-item .widget-list-media img {
        max-width: 100%;
        max-height: 100%;
    }

    .rounded {
        border-radius: 3px !important;
    }

    img {
        vertical-align: middle;
        border-style: none;
    }

    .widget-list .widget-list-item .widget-list-media + div {
        padding-left: 0;
    }

    .widget-list .widget-list-item .widget-list-content {
        padding: 10px;
        display: table-cell;
        vertical-align: middle;
    }

    .widget-list .widget-list-item .widget-list-title {
        font-size: 12px;
        line-height: 16px;
        margin: 0;
    }

    .widget-list .widget-list-item .widget-list-desc {
        font-size: 11px;
        margin: 0;
        color: #6e6e6e;
    }

    .widget-list .widget-list-item .widget-list-content + div {
        padding-left: 0;
    }

    .widget-list .widget-list-item > div:last-child {
        padding-right: 15px;
    }

    .widget-list .widget-list-item .widget-list-action {
        padding: 10px;
        display: table-cell;
        vertical-align: middle;
        width: 10%;
        padding-left: 15px;
        text-align: center;
    }
</style>

@code {
    [Parameter]
    public MUNity.Schema.Simulation.IUserItem User { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.SimulationRoleDto Role { get; set; }

    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel ViewModel { get; set; }

    private MUNity.Schema.Simulation.VotedEventArgs _lastVoteArgs { get; set; } = null;

    private IEnumerable<MUNity.Schema.Simulation.PetitionDto> Petitions
    {
        get
        {
            var agendaItem = ViewModel.AgendaItems.FirstOrDefault(n => n.Status == MUNity.Models.Simulation.EAgendaItemStatuses.Active);
            if (agendaItem == null)
                agendaItem = ViewModel.AgendaItems.FirstOrDefault();
            if (agendaItem == null)
                return new List<MUNity.Schema.Simulation.PetitionDto>();

            return agendaItem.Petitions.Where(n => n.PetitionUserId == this.User.SimulationUserId);
        }
    }

    private bool _currentPetitionIsActive = false;

    protected override void OnInitialized()
    {
        if (ViewModel != null)
        {
            ViewModel.UserVoted += UserVoted;
            ViewModel.VoteCreated += VoteCreated;
        }
        base.OnInitialized();
    }

    private void UserVoted(object sender, MUNity.Schema.Simulation.VotedEventArgs args)
    {
        if (args.UserId == this.User.SimulationUserId)
        {
            this._lastVoteArgs = args;
            this.StateHasChanged();
        }
    }

    private void VoteCreated(object sender, MUNity.Schema.Simulation.CreatedVoteModel args)
    {
        this._lastVoteArgs = null;
    }
}
