@inject Services.SimulationService simulationService;
@inject Services.ListOfSpeakerService listOfSpeakerService;

@if (SimulationViewModel != null && !loadingErrored)
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    @SimulationViewModel.Simulation.Name
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-4">
                            @if (SimulationViewModel.CurrentStatus != null)
                            {
                                <h3>Status: @SimulationViewModel.CurrentStatus.StatusText</h3>
                                <small>Zuletzt geändert: @SimulationViewModel.CurrentStatus.StatusTime.ToLongTimeString()</small>
                            }
                        </div>

                        <div class="col-4">
                            @if (ListOfSpeakerViewModel != null && speakerlistErrored == false)
                            {
                                <SpeakerlistBox ViewModel="@ListOfSpeakerViewModel" />
                            }
                            else if (speakerlistErrored == true)
                            {
                                <p>Es gab einen Fehler beim Laden der Redeliste</p>
                            }
                        </div>

                        <div class="col-4">
                            <div class="row">
                                <div class="col-12">
                                    <button class="btn btn-block btn-primary" @onclick="() => SimulationViewModel.UpdateResolutions()">Resolutionen aktualisieren</button>
                                </div>
                                @if (SimulationViewModel.Resolutions != null)
                                {
                                    @if (SimulationViewModel.Resolutions.Any())
                                    {
                                        @foreach (var resolution in SimulationViewModel.Resolutions)
                                        {
                                            <div class="col-12">
                                                <h5>@resolution.Name</h5>
                                                <a href="/resa/edit/@resolution.ResolutionId">Bearbeiten</a>
                                                <a href="/resa/read/@resolution.ResolutionId">Lesen</a>
                                            </div>
                                        }
                                    }
                                    else 
                                    {
                                        <p>Keine Resolutionen vorhanden.</p>
                                    }
                                    
                                }
                                else
                                {
                                    <p>Keine Resolutionen!</p>
                                }

                            </div>
                        </div>
                    </div>
                    

                    <div class="row">
                        @if (SimulationViewModel.Slots != null)
                        {
                            @if (SimulationViewModel.Slots.Any())
                            {
                                foreach(var slot in SimulationViewModel.Slots)
                                {
                                    <div class="badge m-1 @((slot.IsOnline) ? "badge-success" : "badge-danger")">@slot.RoleName</div>
                                }
                            }
                        }
                        else 
                        {
                            <p>Slots wurde nicht geladen</p>
                        }
                    </div>

                    <div class="row">
                        @if (SimulationViewModel.AgendaItems != null)
                        {
                            if (SimulationViewModel.AgendaItems.Any())
                            {
                                foreach(var agendaItem in SimulationViewModel.AgendaItems)
                        {
                            <div class="badge m-1 badge-info">@agendaItem.Name</div>
                        }
                            }
                        }
                        else
                        {
                            <p>Es wurden keine TOPs geladen</p>
                        }
                    </div>
                
                </div>
            </div>
        </div>
    </div>
}
else if (loadingErrored)
{
    <div class="row">
        <div class="col-12">
            <p>Es kam zu einem Fehler beim Laden dieser Simulation</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public string MasterToken { get; set; }

    public ViewModels.SimulationViewModel SimulationViewModel { get; set; }

    public ViewModels.ListOfSpeakerViewModel ListOfSpeakerViewModel { get; set; }

    private bool speakerlistErrored = false;

    private bool loadingErrored = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SimulationViewModel = await simulationService.Subscribe(SimulationId, MasterToken);
            if (SimulationViewModel != null)
            {
                SimulationViewModel.AgendaItemAdded += delegate { this.StateHasChanged(); };
                SimulationViewModel.LobbyModeChanged += delegate { this.StateHasChanged(); };
                SimulationViewModel.StatusChanged += delegate { this.StateHasChanged(); };


            }
            await LoadListOfSpeakers();
            this.StateHasChanged();
            await base.OnInitializedAsync();
        }
        catch
        {
            loadingErrored = true;
        }
        
    }

    public async Task LoadListOfSpeakers()
    {
        try
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.Add("simsimtoken", MasterToken);
            var response = await client.GetAsync(Program.API_URL + $"/api/Simulation/GetListOfSpeakersId?simulationId={SimulationId}");
            if (response.IsSuccessStatusCode)
            {
                string listOfSpeakerId = await response.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(listOfSpeakerId))
                {
                    this.ListOfSpeakerViewModel = await MUNityClient.ViewModels.ListOfSpeakerViewModel.GetFromOnline(listOfSpeakerService, listOfSpeakerId);
                }
            }
        }
        catch
        {
            speakerlistErrored = true;
        }
        

    }
}
