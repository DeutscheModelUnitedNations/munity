@using MUNityClient.Shared.VirtualCommittee.ActiveRoom
@inject MUNityClient.Services.IResolutionService resolutionService

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="btn-group w-100">
                    <button type="button" class="btn btn-primary" @onclick="() => this.SimulationViewModelInstance.CurrentResolutionId = null">Zurück zur Übersicht</button>

                    @if (this.ResolutionInfo != null)
                    {
                        @if (this.LayoutWrapper.ResolutionMode == ActiveRoomLayoutWrapper.ResolutionModes.Read
                      && (SimulationViewModelInstance.MySlot.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman
                      || ResolutionInfo.AllowPublicEdit))
                        {
                            <button type="button" class="btn btn-primary" @onclick="() => this.LayoutWrapper.ResolutionMode = ActiveRoomLayoutWrapper.ResolutionModes.Write">Bearbeiten</button>
                        }
                        else if (this.LayoutWrapper.ResolutionMode == ActiveRoomLayoutWrapper.ResolutionModes.Write)
                        {
                            <button type="button" class="btn btn-primary" @onclick="() => this.LayoutWrapper.ResolutionMode = ActiveRoomLayoutWrapper.ResolutionModes.Read">Lesen</button>
                        }
                        @if (this.ResolutionInfo.AllowAmendments)
                        {
                            <button type="button" class="btn btn-primary" @onclick="() => { RefreshResolutionInfo(); NewAmendmentModal?.Open(); }">Änderungsantrag</button>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@if (this.LayoutWrapper.ResolutionMode == ActiveRoomLayoutWrapper.ResolutionModes.Read)
{
    <MUNityClient.Pages.Resa.ResolutionPresentation Id="@this.SimulationViewModelInstance.CurrentResolutionId" @ref="CurrentResolutionPresentation" />
}
else if (this.LayoutWrapper.ResolutionMode == ActiveRoomLayoutWrapper.ResolutionModes.Write)
{
    <MUNityClient.Pages.Resa.ResolutionEditor Id="@this.SimulationViewModelInstance.CurrentResolutionId" />
}

<MUNityClient.Shared.Bootstrap.Modal Title="Neuer Änderungsantrag" @ref="NewAmendmentModal" OnSubmitCallback="NewAmendmentSubmitted">
    @if (this.CurrentResolutionPresentation?.ResolutionViewModel != null)
    {
        <MUNityClient.Shared.Resa.NewAmendmentForm ViewModel="this.CurrentResolutionPresentation.ResolutionViewModel"
                                                   Resolution="this.CurrentResolutionPresentation.ResolutionViewModel.Resolution"
                                                   @ref="NewAmendmentForm"/>
    }
    else
    {
        <p>Es ist ein Fehler beim Tracking der Resolution aufgetreten.</p>
    }

</MUNityClient.Shared.Bootstrap.Modal>

@code {
    [Parameter]
    public ViewModels.SimulationViewModel SimulationViewModelInstance { get; set; }

    [Parameter]
    public MUNityClient.Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper LayoutWrapper { get; set; }

    public MUNitySchema.Schema.Simulation.Resolution.ResolutionSmallInfo ResolutionInfo { get; set; }

    private MUNityClient.Shared.Bootstrap.Modal NewAmendmentModal { get; set; }

    private MUNityClient.Pages.Resa.ResolutionPresentation CurrentResolutionPresentation { get; set; }

    private MUNityClient.Shared.Resa.NewAmendmentForm NewAmendmentForm { get; set; }

    private void NewAmendmentSubmitted()
    {
        var success = this.NewAmendmentForm.CreateAmendment();
        if (!success)
        {
            // TODO: Meldung zeigen Resolution konnte nicht erstellt werden!
        }
        this.NewAmendmentModal.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.SimulationViewModelInstance?.CurrentResolutionId != null)
        {
            await RefreshResolutionInfo();
        }

        await base.OnInitializedAsync();
    }

    private async Task RefreshResolutionInfo()
    {
        this.ResolutionInfo = await resolutionService.GetInfo(this.SimulationViewModelInstance.CurrentResolutionId);
        if (!this.ResolutionInfo.AllowPublicEdit && SimulationViewModelInstance.MySlot.RoleType != MUNity.Schema.Simulation.RoleTypes.Chairman)
        {
            this.LayoutWrapper.ResolutionMode = ActiveRoomLayoutWrapper.ResolutionModes.Read;
        }
    }
}
