@using MUNityClient.Shared.VirtualCommittee.ActiveRoom
@inject Services.SimulationService simulationService;
<!-- As a link -->
@if (ViewModel == null)
{
    <nav class="navbar navbar-light bg-light">
        <div class="spinner-border" role="status">

        </div>
    </nav>
}
else
{

       <nav class="row p-0 m-0 d-flex justify-content-start justify-content-sm-between bg-primary mb-3">
           <a class="navbar-brand d-sm-none ml-2" @onclick="() => _showSmallSideMenu = !_showSmallSideMenu"><i class="fa fa-bars"></i></a>
           <div class="col col-sm-3 p-0 ml-2 d-flex align-items-center">
               <div class="navbar-brand mr-2">@ViewModel.Simulation.Name</div>
                <ConnectionStateBadge ViewModel="@ViewModel" />
           </div>
           <div class="row p-0 col-4 col-md ml-4 d-none d-sm-flex">
               <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Home ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Home">
                   <i class="fa fa-home"></i>
               </a>
               <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Agenda ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Agenda">
                   <i class="fa fa-calendar-check"></i>
               </a>
               <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Voting ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Voting">
                   <i class="fa fa-vote-yea"></i>
               </a>
               <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Resolution ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Resolution">
                   <i class="fa fa-file-alt"></i>
               </a>
               <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Presents ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Presents">
                   <i class="fa fa-users"></i>
               </a>
                   @if (this.ViewModel.IsChair)
                   {
                   <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor">
                       <i class="fa fa-comments"></i>
                   </a>
                   <a class="nav-link col d-flex justify-content-center nav-element m-0 py-4 px-2 @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Options ? "selected" : "")" @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Options">
                       <i class="fa fa-cogs"></i>
                   </a>
                   }
           </div>

            <!-- Left links -->
            @if (this.ViewModel.IsChair)
            {
            <input class="currentState col col-sm-3 pl-0 ml-3" placeholder="Aktueller Status..." type="text"/>
            } else {
            <span class="col col-sm-3 pl-0 ml-3">Aktueller Status</span>
            }
        </nav>
}

@* Menü für Smartphones. *@
@if (_showSmallSideMenu)
{
<div class="mobile-side-menu hidden-lg">

    <div class="list-group">
        <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Home"
           class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Home ? "active" : "")">
            <i class="fa fa-home"></i> Home
        </a>
        <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Agenda"
           class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Agenda ? "active" : "")">
            <i class="fa fa-calendar-check"></i> Tagesordnung
        </a>
        <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Voting"
           class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Voting ? "active" : "")">
            <i class="fa fa-vote-yea"></i> Abstimmungen
        </a>
        <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Resolution"
           class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Resolution ? "active" : "")">
            <i class="fa fa-file-alt"></i> Resolutionen
        </a>
        <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Presents"
           class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Presents ? "active" : "")">
            <i class="fa fa-users"></i> Anwesenheit
        </a>
        @if (ViewModel.IsChair)
        {
            <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor"
               class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor ? "active" : "")">
                <i class="fa fa-comments"></i> Redeliste bearbeiten
            </a>

            <a @onclick="() => LayoutWrapper.MainContent = ActiveRoomLayoutWrapper.MainContents.Options"
               class="list-group-item list-group-item-action @(LayoutWrapper.MainContent == ActiveRoomLayoutWrapper.MainContents.Options ? "active" : "")">
                <i class="fa fa-cogs"></i> Einstellungen
            </a>
        }
    </div>
</div>

    
}


<style>

    @@media (max-width: 768px) {
        .mobile-side-menu {
            position: fixed;
            left: 0;
            top: 45px;
            z-index: 20;
        }

        .hidden-md {
            visibility: collapse;
        }
    }


    @@media (min-width: 769px) {
        .mobile-side-menu {
            visibility: hidden;
        }

        .hidden-lg {
            display: none;
        }
    }

    nav {
        color: white;
    }

    .text-white {
        color: white;
    }

    .currentState {
        background: none;
        border: none;
        color: white;
        transition: .3s;
        border-bottom: 0px solid;
        outline:none;
    }

    .currentState:focus {
        opacity: .7;
    }

    .currentState::placeholder {
        color: #f2f2f2;
        opacity: 1;
    }

    .currentState::-ms-input-placeholder { /* Microsoft Edge */
        color: #f2f2f2;
    }

    .nav-element:hover {
        background-color: #5b95f3;
    }

    .selected {
        border-color: white;
        border-bottom: 5px solid;
    }

    
</style>

@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel ViewModel { get; set; } = null;

    [Parameter]
    public MUNityClient.Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper LayoutWrapper { get; set; } = null;

    private bool _showSmallSideMenu = false;

    protected override void OnInitialized()
    {
        if (LayoutWrapper != null)
        {
            LayoutWrapper.PropertyChanged += StoreCurrentTabInLocalStorage;
        }
        base.OnInitialized();
    }

    private async void StoreCurrentTabInLocalStorage(object sender, System.ComponentModel.PropertyChangedEventArgs args)
    {
        if (this.ViewModel == null) return;
        if (this.ViewModel.Simulation == null) return;
        if (this.LayoutWrapper == null) return;
        if (args.PropertyName == nameof(MUNityClient.Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContent))
        {
            await this.simulationService.StoreOpenedTab(this.ViewModel.Simulation.SimulationId, (int)LayoutWrapper.MainContent);
        }
    }
}
