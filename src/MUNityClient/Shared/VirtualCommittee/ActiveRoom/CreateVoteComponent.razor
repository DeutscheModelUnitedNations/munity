@inject MUNityClient.Services.SimulationService _simulationService;


@if (LastState != VoteSubmitStates.NonCreated)
{
    <div class="col-12 mx-0 my-4 p-0">
        @if (LastState == VoteSubmitStates.Success)
        {
            <div class="alert alert-success">Abstimmung erstellt <i class="fas fa-check ml-2"></i></div>
        }
        else
        {
            <div class="alert alert-danger">Fehler beim Erstellen der Abstimmung <i class="fas fa-times ml-2"></i></div>
        }
    </div>
}

<div class="row m-2">
    <div class="col-12 m-0 p-0">
        <div class="card">
            <div class="card-header">Neue Abstimmung</div>
            <div class="card-body">
                <EditForm Model="@Request" OnValidSubmit="SubmitVote">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Anzeigetext</label>
                        <InputText @bind-Value="@Request.Text" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Modus</label>
                        <InputSelect @bind-Value="@Request.Mode" class="form-control">
                            @*<option value="@MUNity.Schema.Simulation.EVotingMode.Everyone">Jeder (inklusive Vorsitz)</option>
                            <option value="@MUNity.Schema.Simulation.EVotingMode.AllParticipants">Alle Teilnehmenden</option>*@
                            <option value="@MUNity.Schema.Simulation.EVotingMode.JustDelegates">Nur Delegierte</option>
                            @*<option value="@MUNity.Schema.Simulation.EVotingMode.JustNgos">Nur Nichtstaatliche Akteure</option>
                            <option value="@MUNity.Schema.Simulation.EVotingMode.JustGuests">Nur Gäste</option>*@
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label>Enthaltung erlauben</label>
                        <InputCheckbox @bind-Value="@Request.AllowAbstention" />
                    </div>
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Erstellen" />
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</div>


@code {
    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public ViewModels.SimulationViewModel ViewModel { get; set; }

    private enum VoteSubmitStates
    {
        NonCreated,
        Success,
        Error
    }

    private VoteSubmitStates LastState { get; set; } = VoteSubmitStates.NonCreated;

    private MUNity.Schema.Simulation.CreateSimulationVoting Request { get; set; }

    protected override void OnInitialized()
    {
        Request = new MUNity.Schema.Simulation.CreateSimulationVoting();
        Request.SimulationId = SimulationId;
        Request.Token = "test";
        base.OnInitialized();
    }

    private async Task SubmitVote()
    {
        await this.ViewModel.CreateVoting(Request);
    }
}
