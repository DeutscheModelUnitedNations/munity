@if (ViewModel.CurrentVoting != null)
{
<div class="">
    <h3>@ViewModel.CurrentVoting.Text</h3>
    <br />
    <b>Abgegebene Stimmen: </b>
    <div class="progress mb-3">
        <div class="progress-bar"
             role="progressbar"
             style="width: @(ViewModel.CurrentVoting.TotalVotes * 100 / ViewModel.CurrentVoting.AllowedUsers.Count)%"
             aria-valuenow="@(ViewModel.CurrentVoting.TotalVotes * 100 / ViewModel.CurrentVoting.AllowedUsers.Count)"
             aria-valuemin="0"
             aria-valuemax="100">
            @ViewModel.CurrentVoting.TotalVotes/@ViewModel.CurrentVoting.AllowedUsers.Count (@(ViewModel.CurrentVoting.TotalVotes * 100 / ViewModel.CurrentVoting.AllowedUsers.Count)%)
        </div>
    </div>
    <span>@ViewModel.CurrentVoting.TotalVotes / @ViewModel.CurrentVoting.AllowedUsers.Count</span>
    <b>Stimmverhältis:</b>
    <div class="progress d-flex">
        @if (ViewModel.CurrentVoting.ProVotes + ViewModel.CurrentVoting.ContraVotes > 0)
        {
            <div class="progress-bar bg-success" role="progressbar" 
                 style="width: @ViewModel.CurrentVoting.PercentagePro%" 
                 aria-valuenow="@ViewModel.CurrentVoting.PercentagePro" 
                 aria-valuemin="0" aria-valuemax="100">
        <span class="textInBar">@ViewModel.CurrentVoting.ProVotes/@ViewModel.CurrentVoting.Choices.Count (@ViewModel.CurrentVoting.PercentagePro %)</span></div>
        }

        @if (ViewModel.CurrentVoting.AllowAbstention && ViewModel.CurrentVoting.TotalVotes > 0)
        {
            <div class="progress-bar bg-primary" role="progressbar" style="width: @ViewModel.CurrentVoting.PercentageAbstention%" 
                 aria-valuenow="@ViewModel.CurrentVoting.PercentageAbstention" aria-valuemin="0" aria-valuemax="100">
                <span class="textInBar">@ViewModel.CurrentVoting.AbstentionVotes/@ViewModel.CurrentVoting.TotalVotes 
                (@ViewModel.CurrentVoting.PercentageAbstention%)</span></div>
        }

        @if (ViewModel.CurrentVoting.AllowedUsers.Count - ViewModel.CurrentVoting.TotalVotes > 0)
        {
            <div class="progress-bar bg-dark" role="progressbar" style="width: @ViewModel.CurrentVoting.PercentageMissing%" 
                 aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
        <span class="textInBar">@(ViewModel.CurrentVoting.AllowedUsers.Count - ViewModel.CurrentVoting.TotalVotes)</span></div>
        }

        @if (ViewModel.CurrentVoting.ValidVotes > 0)
        {
            <div class="progress-bar bg-danger" role="progressbar" 
                 style="width: @ViewModel.CurrentVoting.PercentageContra%" 
                 aria-valuenow="@ViewModel.CurrentVoting.PercentageContra" 
                 aria-valuemin="0" aria-valuemax="100">
        <span class="textInBar">@ViewModel.CurrentVoting.ContraVotes/@ViewModel.CurrentVoting.TotalVotes (@ViewModel.CurrentVoting.PercentageContra %)</span></div>
        }

    </div>
    <div class="row p-0 m-0 mb-3">
        <span class="text-success col-6 p-0 d-flex justify-content-start">Dafür @ViewModel.CurrentVoting.PercentagePro %</span>
        <span class="text-danger col-6 p-0 d-flex justify-content-end">Dagegen @ViewModel.CurrentVoting.PercentageContra %</span>
    </div>
</div>
}


@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ViewModel != null)
        {
            ViewModel.VoteCreated += delegate { this.StateHasChanged(); };
            ViewModel.UserVoted += delegate { this.StateHasChanged(); };
        }
    }
}
