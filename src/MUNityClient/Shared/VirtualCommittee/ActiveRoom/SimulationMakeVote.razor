@inject Services.SimulationService simulationService;
@if (ViewModel != null)
{
    <div class="row p-0 m-0 col-12">
        @if (ViewModel.CurrentVoting != null)
        {
            if (ViewModel.CurrentVoting.AllowedUsers.Any(n => n == ViewModel.Me.SimulationUserId))
            {
                if (ViewModel.CurrentVoting.Choices.ContainsKey(ViewModel.Me.SimulationUserId))
                {
                    <p>Sie haben bereits abgestimmt</p>
                }
                else
                {
                    <div class="btn-group col-12 m-0 p-0">
                        <button class="btn btn-outline-success" @onclick="() => VotePro()">Dafür</button>
                        <button class="btn btn-outline-danger" @onclick="() => VoteCon()">Dagegen</button>
                        @if (ViewModel.CurrentVoting.AllowAbstention)
                        {
                            <button class="btn btn-outline-primary" @onclick="() => VoteAbstention()">Enthaltung</button>
                        }
                    </div>
                }
            }
            else
            {
                <p>Sie sind nicht zur Abstimmung berechtigt.</p>
            }
        }
        else
        {
        <p>Es liegt keine Abstimmung vor.</p>
        }
    </div>
}
else
{
    <p>View Model Fehler!</p>
}

@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel ViewModel
    {
        get;
        set;
    }

    private async Task VotePro()
    {
        if (ViewModel.CurrentVoting != null)
        {
            await this.simulationService.Vote(ViewModel.Simulation.SimulationId, ViewModel.CurrentVoting.CreatedVoteModelId, 0);
        }
    }

    private async Task VoteCon()
    {
        if (ViewModel.CurrentVoting != null)
        {
            await this.simulationService.Vote(ViewModel.Simulation.SimulationId, ViewModel.CurrentVoting.CreatedVoteModelId, 1);
        }
    }

    private async Task VoteAbstention()
    {
        if (ViewModel.CurrentVoting != null)
        {
            await this.simulationService.Vote(ViewModel.Simulation.SimulationId, ViewModel.CurrentVoting.CreatedVoteModelId, 2);
        }
    }
}
