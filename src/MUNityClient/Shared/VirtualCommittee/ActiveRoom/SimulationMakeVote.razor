@inject Services.SimulationService simulationService;
@if (ViewModel != null)
{
    <div class="row p-0 m-0 col-12">
        @if (MySlot != null)
        {
            if (MySlot.Choice != MUNity.Schema.Simulation.EVoteStates.NotVoted)
            {
                <p>Sie haben bereits abgestimmt</p>
            }
            else
            {
                <div class="btn-group col-12 m-0 p-0">
                    <button class="btn btn-outline-success" @onclick="() => VotePro()">Dafür</button>
                    <button class="btn btn-outline-danger" @onclick="() => VoteCon()">Dagegen</button>
                    @if (ViewModel.ActiveVoting.AllowAbstention)
                    {
                        <button class="btn btn-outline-primary" @onclick="() => VoteAbstention()">Enthaltung</button>
                    }
                </div>
            }
        }
        else
        {
        <p>Es liegt keine Abstimmung vor oder Sie sind nicht für die aktuelle Abstimmung freigegeben.</p>
        }
    </div>
}
else
{
    <p>View Model Fehler!</p>
}

@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel ViewModel
    {
        get;
        set;
    }

    private MUNity.Schema.Simulation.Voting.SimulationVoteSlotDto MySlot
    {
        get => ViewModel?.ActiveVoting?.Slots?.FirstOrDefault(n => n.SimulationUserId == ViewModel.MySlot.SimulationUserId);
    }

    private async Task VotePro()
    {
        await this.ViewModel.VoteInActiveVoting(MUNity.Schema.Simulation.EVoteStates.Pro);
    }

    private async Task VoteCon()
    {
        await this.ViewModel.VoteInActiveVoting(MUNity.Schema.Simulation.EVoteStates.Con);
    }

    private async Task VoteAbstention()
    {
        await this.ViewModel.VoteInActiveVoting(MUNity.Schema.Simulation.EVoteStates.Abstention);
    }
}
