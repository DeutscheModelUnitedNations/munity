@inject MUNityClient.Services.SimulationService simulationService;

@if (SimulationViewModel.Resolutions == null)
{
    <MUNityClient.Shared.Bootstrap.Spinner DisplayText="Resolutionen werden geladen" />
}
else
{
<div class="row">
    <div class="col-12">
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Ansehen</th>
                </tr>
            </thead>
            <tbody>
                @if (!SimulationViewModel.Resolutions.Any())
                {
                    <tr>
                        <td rowspan="3">Keine Resolutionen gefunden</td>
                    </tr>
                }
                else
                {
                    @foreach (var resolution in SimulationViewModel.Resolutions)
                    {
                        <tr>
                            <td>@resolution.Name</td>
                            <td><a @onclick="() => this.SimulationViewModel.CurrentResolutionId = resolution.ResolutionId">Ansehen</a></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @if (this.SimulationViewModel.IsChair)
    {
        <div class="col-12">
            @* TODO! *@
            <button class="btn btn-block btn-success" @onclick="() => CreateNew()" disabled="@creatingNew">Neue Resolution</button>
        </div>
    }

</div>
}

@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel SimulationViewModel { get; set; }

    private bool creatingNew = false;

    protected override async Task OnInitializedAsync()
    {
        if (SimulationViewModel != null)
        {
            await this.SimulationViewModel.UpdateResolutions();
            this.StateHasChanged();
            SimulationViewModel.Resolutions.CollectionChanged += delegate { this.StateHasChanged(); };
        }
        await base.OnInitializedAsync();
    }

    private async Task CreateNew()
    {
        creatingNew = true;
        this.StateHasChanged();
        await this.SimulationViewModel.CreateResolution();
        this.creatingNew = false;
        this.StateHasChanged();
    }
}
