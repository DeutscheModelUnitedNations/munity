@inject MUNityClient.Services.SimulationService simulationService;

@if (SimulationViewModel.Resolutions == null)
{
    <MUNityClient.Shared.Bootstrap.Spinner DisplayText="Resolutionen werden geladen" />
}
else
{
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                Resolutionen <button class="btn btn-primary" @onclick="() => this.SimulationViewModel.UpdateResolutions()">Aktualisieren</button>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Bearbeiten</th>
                            <th>Lesen</th>
                            @if (this.SimulationViewModel.MySlot.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman)
                            {
                                <th>Änderungsanträge erlauben</th>
                                <th>Alle dürfen schreiben</th>
                                <th>Löschen</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (!SimulationViewModel.Resolutions.Any())
                        {
                            <tr>
                                <td rowspan="3">Keine Resolutionen gefunden</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var resolution in SimulationViewModel.Resolutions)
                            {
                                <tr>
                                    <td>@resolution.Name</td>
                                    <td>
                                        @if (SimulationViewModel.MySlot.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman || resolution.AllowPublicEdit)
                                        {
                                            <a @onclick="() => this.SimulationViewModel.CurrentResolutionId = resolution.ResolutionId"><h4><i class="fa fa-pen"></i></h4></a>
                                        }
                                    </td>
                                    <td><a @onclick="() => this.SimulationViewModel.CurrentResolutionId = resolution.ResolutionId"><h4><i class="fa fa-glasses"></i></h4></a></td>
                                    @if (this.SimulationViewModel.MySlot.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman)
                                    {
                                        <td>
                                            <button class="btn btn-block @((resolution.AllowAmendments) ? "btn-success" : "btn-outline-danger")"
                                                    @onclick="() => AllowAmendmentsChanged(resolution)">
                                            <i class="fa @((resolution.AllowAmendments) ? "fa-check" : "fa-times")"></i>
                                            </button>
                                        </td>
                                        <td>
                                            <button class="btn btn-block @((resolution.AllowPublicEdit) ? "btn-success" : "btn-outline-danger")"
                                                    @onclick="() => AllowPublicEditChanged(resolution)">
                                                <i class="fa @((resolution.AllowPublicEdit) ? "fa-check" : "fa-times")"></i>
                                            </button>
                                        </td>
                                        <th class="text-center">
                                            <a class="text-danger" @onclick="() => this.SimulationViewModel.UnlinkResolution(resolution)"><i class="fa fa-lg fa-trash"></i></a>
                                        </th>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
    </div>
    @if (allowedToCreate || this.SimulationViewModel.MySlot.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman)
    {
        <div class="col-12" style="margin-top: 10px">
            <div class="card">
                <div class="card-header">
                    Neue Resolution erstellen
                </div>
                <div class="card-body">
                    <EditForm Model="CreateNewForm" OnValidSubmit="CreateNew">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Titel</label>
                            <InputText @bind-Value="@CreateNewForm.Titel" class="form-control" />
                        </div>
                        <div class="form-group">
                                <input type="submit" class="btn btn-block btn-success" disabled="@creatingNew" value="Erstellen" />
                        </div>
                    </EditForm>
                    
                </div>
            </div>
        </div>
    }

</div>
}

@code {
    [Parameter]
    public MUNityClient.ViewModels.SimulationViewModel SimulationViewModel { get; set; }

    private bool creatingNew = false;

    private async void AllowAmendmentsChanged(MUNitySchema.Schema.Simulation.Resolution.ResolutionSmallInfo info)
    {
        var httpClient = new HttpClient();

        var mdl = new MUNity.Schema.Simulation.Resolution.SimulationResolutionRequest()
        {
            ResolutionId = info.ResolutionId,
            SimulationId = SimulationViewModel.Simulation.SimulationId,
            Token = SimulationViewModel.Token
        };
        if (info.AllowAmendments)
            await httpClient.PutAsJsonAsync(Program.API_URL + "/api/Resa/DisableOnlineAmendments", mdl);
        else
            await httpClient.PutAsJsonAsync(Program.API_URL + "/api/Resa/EnableOnlineAmendments", mdl);

        info.AllowAmendments = !info.AllowAmendments;
        this.StateHasChanged();
    }

    private async void AllowPublicEditChanged(MUNitySchema.Schema.Simulation.Resolution.ResolutionSmallInfo info)
    {
        var httpClient = new HttpClient();

        var mdl = new MUNity.Schema.Simulation.Resolution.SimulationResolutionRequest()
        {
            ResolutionId = info.ResolutionId,
            SimulationId = SimulationViewModel.Simulation.SimulationId,
            Token = SimulationViewModel.Token
        };
        if (info.AllowPublicEdit)
            await httpClient.PutAsJsonAsync(Program.API_URL + "/api/Resa/DisablePublicEdit", mdl);
        else
            await httpClient.PutAsJsonAsync(Program.API_URL + "/api/Resa/EnablePublicEdit", mdl);

        info.AllowPublicEdit = !info.AllowPublicEdit;
        this.StateHasChanged();
    }

    private bool allowedToCreate = true;

    private MUNity.Schema.Simulation.CreateSimulationResolutionRequest CreateNewForm { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (SimulationViewModel != null)
        {
            CreateNewForm = new MUNity.Schema.Simulation.CreateSimulationResolutionRequest()
            {
                SimulationId = SimulationViewModel.Simulation.SimulationId,
                Titel = "",
                Token = SimulationViewModel.Token
            };
            await this.SimulationViewModel.UpdateResolutions();
            this.StateHasChanged();
            SimulationViewModel.Resolutions.CollectionChanged += delegate { this.StateHasChanged(); };
        }
        await base.OnInitializedAsync();
    }

    private async Task CreateNew()
    {
        creatingNew = true;
        this.StateHasChanged();
        await this.SimulationViewModel.CreateResolution(CreateNewForm);
        CreateNewForm.Titel = "";
        this.creatingNew = false;
        this.StateHasChanged();
    }
}
