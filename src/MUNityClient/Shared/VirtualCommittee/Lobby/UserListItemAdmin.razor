@inject Services.SimulationService simulationService;
@inject NavigationManager navManager;
@inject IJSRuntime JS;

<tr class="table-row align-items-center">
    @if (!string.IsNullOrEmpty(User.DisplayName))
    {
        <td>@User.DisplayName</td>
    }
    else
    {
        @if (!showEditField)
        {
            <td><a @onclick="() => showEditField = true"><i class="far fa-edit"></i></a></td>
        }
        else
        {
            <td>
                <div class="row">
                    <div class="col-10">
                        <input class="form-control" />
                    </div>
                    <div class="col-2">
                        <a @onclick="() => showEditField = false"><i class="fas fa-check"></i></a>
                    </div>
                </div>
            </td>
        }
    }

    <td><i class="fa fa-circle ml-2 @(User.IsOnline ? "text-success" : "text-danger")" aria-hidden="true"></i></td>
    @if (this.ViewModel?.Simulation?.Roles != null)
    {
        <td>
            <select class="form-control" @bind="@this.RoleId">
                <option value="-2">Keine Rolle</option>
                <optgroup label="Vorsitz">
                    @foreach (var role in this.ViewModel.Simulation.Roles.Where(n => n.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman))
                    {
                        <option value="@role.SimulationRoleId">@role.Name</option>
                    }
                </optgroup>
                <optgroup label="Delegationen">
                    @foreach (var role in this.ViewModel.Simulation.Roles.Where(n => n.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate).OrderBy(n => n.Name))
                    {
                        <option value="@role.SimulationRoleId">@role.Name</option>
                    }
                </optgroup>
                <optgroup label="Nichtstaatliche Akteure">
                    @foreach (var role in this.ViewModel.Simulation.Roles.Where(n => n.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo).OrderBy(n => n.Name))
                    {
                        <option value="@role.SimulationRoleId">@role.Name</option>
                    }
                </optgroup>
                <optgroup label="Weitere">
                    @foreach (var role in this.ViewModel.Simulation.Roles.Where(n => n.RoleType == MUNity.Schema.Simulation.RoleTypes.Spectator).OrderBy(n => n.Name))
                    {
                        <option value="@role.SimulationRoleId">@role.Name</option>
                    }
                </optgroup>
            </select>
        </td>
    }
    else
    {
        <td>Rollen werden geladen/Keine Rollen gefunden</td>
    }

    <td>
        @if (this.ViewModel.MySlot.SimulationUserId != User.SimulationUserId)
        {
            <a @onclick="() => UserRemoveClicked.InvokeAsync(User.SimulationUserId)"><i class="fas fa-trash"></i></a>
        }
    </td>
    <td>
        <a @onclick="CopyJoinLinkToClipboard">Link kopieren</a>
    </td>
</tr>


<style>
    .pointer {
        cursor: pointer;
    }
</style>