@inject Services.SimulationService simulationService;
@inject NavigationManager navManager;

@page "/Sim/DirectJoin/{SimulationId:int}/{Token}" 

@if (string.IsNullOrEmpty(Token) || SimulationId == 0)
{
    <div class="row">
        <div class="col-12">
            <p>Der Link ist ungültig!</p>
        </div>
    </div>
}
else
{
    @if (State == States.Loading)
    {
        <p>Verbindung wird hergestellt</p>
    }
    else if (State == States.Errored)
    {
        <p>Fehler!</p>
    }
    else if (State == States.Success)
    {
        <p>Fertig, Weiterleitung erfolgt!</p>
    }
}

@code {
    [Parameter]
    public int SimulationId { get; set; }

    [Parameter]
    public string Token { get; set; }

    private enum States
    {
        Loading,
        Success,
        Errored,
        TypeDisplayName
    }

    private States State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var simulationInfoResponse = await simulationService.GetSimulationInfo(SimulationId);
        if (!simulationInfoResponse.IsSuccessStatusCode)
        {
            this.State = States.Errored;
        }
        else
        {
            var simulation = await simulationInfoResponse.Content.ReadFromJsonAsync<MUNity.Schema.Simulation.SimulationListItemDto>();
            if (simulation == null)
            {
                this.State = States.Errored;
            }
            else
            {
                MUNity.Schema.Simulation.SimulationTokenResponse token = new MUNity.Schema.Simulation.SimulationTokenResponse()
                {
                    SimulationId = SimulationId,
                    Name = simulation.Name,
                    Token = this.Token
                };
                await simulationService.StoreToken(token);

                if (simulation.Phase == MUNity.Schema.Simulation.GamePhases.Lobby)
                {
                    navManager.NavigateTo($"/sim/lobby/{simulation.SimulationId}");
                }
                else
                {
                    navManager.NavigateTo($"/sim/run/{simulation.SimulationId}");
                }
                this.State = States.Success;
            }

        }

        this.StateHasChanged();

        await base.OnInitializedAsync();
    }
}
