@* Die Steuerungskomponente für eine Redeliste. Die Redeliste wird über den Verweis Id geladen.
    Es wird eine Prüfung auf IsOnline vorgenommen, bevor die Redeliste aus dem Speicher des Browsers geladen wird.
    Ist die Redeliste Online verfügbar, wird keine Speicherung innerhalb des Browser Speichers veranlasst, sondern die Liste wird
    über den WebSocket (ListOfSpeakersSocketHandler) abgearbeitet.
    
    IsOnline ist ein Parameter und kann auch an die Komponente übergeben werden. 
    
    Derzeit wird ein EventListener an das PropertyChanged Event der Redeliste angehangen. Sollte die Redeliste online sein,
    wird dann ein sync an den Server durchgeführt, wobei die gesamte Redeliste als Json an den Server übertragen wird und dieser
    sendet dann die neue Version der Redeliste an alle Clients.
    Ebenso hört die Komponente auf diesen Socket, falls durch andere Stelle eine Änderung vorgenommen wurde. *@

@using MUNity.Models.ListOfSpeakers;
@using MUNity.Extensions.LoSExtensions;
@using System.Timers;

@page "/los/edit/{id}"

@inject MUNityClient.Services.ListOfSpeakerService listOfSpeakerService;
@inject IJSRuntime jsRuntime

@if (ViewModel != null)
{
        <div class="row m-0 px-2 col-12 d-flex justify-content-center">
            @* Settings/Alert Row *@
            <div class="row col-12 m-0 p-0 d-flex align-items-center">
                <div class="col row">
                    @if (invalidFormatSpeakerTime)
                {
                            <div class="col alert alert-danger my-0 ml-0 mr-3" role="alert">
                                Formatfehler in der Sprecher Zeitangabe!
                            </div>
                }
                    @if (invalidFormatQuestionTime)
                {
                            <div class="col alert alert-danger my-0 mr-0 ml-3" role="alert">
                                Formatfehler in der Frage Zeitangabe!
                            </div>
                }
                </div>
                <div class="col-5 col-md-2 d-flex justify-content-end">
                    <i type="button" title="Lese Ansicht öffnen" class="fas fa-external-link-alt fa-lg p-2"
                        @onclick="() => OpenReaderSpectatorView()"></i>
                    <i type="button" title="Redezeiten einstellen" class="fas fa-cog fa-lg p-2"
                        @onclick="() => SpeakingTimeConfigModal.Open()"></i>
                </div>
            </div>
            @* Speaker List Card *@
            <div class="col-12 mx-0 mt-3 p-0">
                <div class="row col-12 m-0 p-0">
                    @* Speakers *@
                    <div class="col-12 col-md-6 m-0 p-3">
                        <div class="row m-0 p-0 d-flex justify-content-between list-head border-bottom">
                            <div class="col p-0 m-0 mr-2">
                                <h5 class="col-12 p-0">
                                    <i class="fas fa-user-alt mr-2"></i>
                                    @if (ViewModel.SourceList.CurrentSpeaker != null)
                                    {
                                        @ViewModel.SourceList.CurrentSpeaker.Name
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                    @if (ViewModel.SourceList.CurrentSpeaker != null)
                                    {
                                        <span type="button" class="text-danger hover-enabled" title="Kopf leeren"
                                              @onclick="() => this.ViewModel.Handler.ClearCurrentSpeaker()">
                                            <i class="fas fa-trash ml-3"></i>
                                        </span>
                                    }

                                </h5>
                            </div>
                            <div class="col-5 row m-0 p-0 d-flex justify-content-end">
                                <span type="button" class="py-1 px-3 text-danger hover-enabled"
                                      @onclick="() => this.ViewModel.Handler.AddSpeakerSeconds(-10)">-10</span>
                                @if (this.ViewModel.SourceList.CurrentSpeaker != null)
                                {
                                    <h3 class="m-0 text-center @(LowOnSpeakerTime ? "text-danger" : "")">
                                        @(OutOfSpeakerTime ? "-" : "")
                                        @ViewModel.SourceList.RemainingSpeakerTime.ToString(@"mm\:ss")
                                    </h3>
                                }
                                else
                                {
                                    <h3>@ViewModel.SourceList.SpeakerTime.ToString(@"mm\:ss")</h3>
                                }

                                <span type="button" class="py-1 px-3 text-success hover-enabled"
                                      @onclick="() => this.ViewModel.Handler.AddSpeakerSeconds(10)">+10</span>
                            </div>
                        </div>
                        @* Controls *@
                    <div class="col-12 p-0 my-3">
                        @if (ViewModel.SourceList.Status == ListOfSpeakers.EStatus.Speaking || ViewModel.SourceList.Status == ListOfSpeakers.EStatus.Answer)
                        {
                            <i title="Rede pausieren" type="button" class="fas mx-2 fa-lg fa-pause"
                               @onclick="() => ViewModel.Handler.Pause()"></i>
                        }
                        else
                        {
                            <i title="Rede fortsetzen" type="button" class="fas mx-2 fa-lg fa-play"
                               @onclick="() => ViewModel.Handler.ResumeSpeaker()"></i>
                        }
                        <i title="Nächste Rede" type="button" class="fas mx-2 fa-lg fa-step-forward"
                           @onclick="() => ViewModel.Handler.NextSpeaker()"></i>
                        <i title="Redezeit zurücksetzen" type="button" class="fas fa-lg fa-undo ml-3"
                           @onclick="() => ViewModel.Handler.ResetSpeakerTime()"></i>
                        <i title="Antwort starten" type="button" class="fas ml-4 fa-lg fa-redo"
                           @onclick="() => ViewModel.Handler.StartAnswer()"></i>
                    </div>

                        <div>
                        <h5>Warteliste</h5>
                        @foreach (var speaker in ViewModel.SourceList.Speakers)
                        {
                                <div class="card border p-2">@speaker.Name <i class="fas fa-times mr-2 text-danger" @onclick="() => RemoveSpeaker(speaker)"></i></div>
                        }


                        @if (ViewModel.SourceList.ListClosed)
                        {
                                <button @onclick="() => ViewModel.Handler.OpenSpeakers()" class="btn btn-outline-success">Redeliste
                                    öffnen</button>
                        }
                        else
                        {
                                <div type="button" @onclick="() => ViewModel.Handler.CloseSpeakers()" class="border mx-0 mt-2 p-2"><i
                                        class="fas fa-ban mr-2 text-danger"></i>Redeliste
                                    schließen</div>
                        }
                        </div>
                        <div class="col-12 row mx-0 px-0 my-3">
                            <EditForm Model="NewSpeaker" OnValidSubmit="AddToSpeakers()">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="col-11 py-0 pl-0">

                                    <div class="form-group">
                                        <InputText @bind-Value="NewSpeaker.Name" class="form-control" placeholder="Land hinzufügen..." disabled="@ViewModel.SourceList.ListClosed" />
                                    </div>

                                </div>
                                <div class="col-1 p-0">
                                    <button type="submit" class="btn btn-success m-0 py-2 px-0 w-100" disabled="@ViewModel.SourceList.ListClosed"><i class="fas fa-plus fa-lg"></i></button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    @* Comments *@
                    <div class="col-12 col-md-6 m-0 p-3">
                        <div class="row m-0 p-0 d-flex justify-content-between list-head border-bottom">
                            <div class="col p-0 m-0 mr-2">
                                <h5 class="col-12 p-0">
                                    <i class="fas fa-user-alt mr-2"></i>
                                    @if (ViewModel.SourceList.CurrentQuestion != null)
                                {
                                            @ViewModel.SourceList.CurrentQuestion.Name
                                }
                                else
                                {
                                            <span>-</span>
                                }
                                    <span type="button" class="text-danger hover-enabled" title="Kopf leeren"
                                        @onclick="() => this.ViewModel.Handler.ClearCurrentQuestion()"><i
                                            class="fas fa-trash ml-3"></i></span>
                                </h5>
                            </div>
                            <div class="col-5 row m-0 p-0 d-flex justify-content-end">
                                <span type="button" class="py-1 px-3 text-danger hover-enabled"
                                    @onclick="() => this.ViewModel.Handler.AddQuestionSeconds(-10)">-10</span>
                                <h3
                                    class="m-0 text-center @(LowOnQuestionTime ? "text-danger" : "")">
                                    @(OutOfQuestionTime ? "-" : "")
                                    @ViewModel.SourceList.RemainingQuestionTime.ToString(@"mm\:ss")</h3>
                                <span type="button" class="py-1 px-3 text-success hover-enabled"
                                    @onclick="() => this.ViewModel.Handler.AddQuestionSeconds(10)">+10</span>
                            </div>
                        </div>
                        @* Controls *@
                        <div class="col-12 p-0 my-3">
                        @if (ViewModel.SourceList.Status == ListOfSpeakers.EStatus.Question)
                        {
                            <i title="Rede pausieren" type="button" class="fas mx-2 fa-lg fa-pause"
                            @onclick="() => ViewModel.Handler.Pause()"></i>
                        }
                        else
                        {
                            <i title="Rede fortsetzen" type="button" class="fas mx-2 fa-lg fa-play"
                            @onclick="() => ViewModel.Handler.ResumeQuestion()"></i>
                        }
                            <i title="Nächste Rede" type="button" class="fas mx-2 fa-lg fa-step-forward"
                                @onclick="() => ViewModel.Handler.NextQuestion()"></i>
                            <i title="Redezeit zurücksetzen" type="button" class="fas fa-lg fa-undo ml-3"
                                @onclick="() => ViewModel.Handler.ResumeQuestion()"></i>
                            
                        </div>
                        <div class="col-12 mx-0 px-0">
                            <h5>Fragen und Kurzbemerkungen</h5>
                            @foreach (var question in ViewModel.SourceList.Questions)
                        {
                                    <div class="card border p-2">@question.Name <i class="fas fa-times mr-2 text-danger" @onclick="() => RemoveSpeaker(question)"></i></div>
                        }
                            @if (ViewModel.SourceList.QuestionsClosed)
                        {
                                    <button @onclick="() => ViewModel.Handler.OpenQuestions()"
                                        class="btn btn-outline-success">FuK
                                        öffnen</button>
                        }
                        else
                        {
                                    <div type="button" @onclick="() => ViewModel.Handler.CloseQuestions()"
                                        class="border mx-0 mt-2 p-2"><i class="fas fa-ban mr-2 text-danger"></i>FuK
                                        schließen</div>
                        }
                        </div>
                        <div class="col-12 row mx-0 px-0 my-3">
                            <EditForm Model="NewCommentator" OnValidSubmit="AddToQuestions()">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="col-11 py-0 pl-0">

                                    <div class="form-group">
                                        <InputText @bind-Value="NewCommentator.Name" class="form-control" placeholder="Land hinzufügen..." />
                                    </div>

                                </div>
                                <div class="col-1 p-0">
                                    <button type="submit" class="btn btn-success m-0 py-2 px-0 w-100"><i class="fas fa-plus fa-lg"></i></button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 mx-0 mt-3 p-0">

            </div>
        </div>


        <MUNityClient.Shared.Bootstrap.Modal Title="Sprechzeiten konfigurieren" @ref="SpeakingTimeConfigModal"
            OnSubmitCallback="SaveSettings">
            <EditForm Model="@Settings">
                <div class="form-group">
                    <label>Redezeit</label>
                    <InputText @bind-Value="Settings.Speakertime" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Zeit für Fragen, Kurzbemerkungen und Antworten</label>
                    <InputText @bind-Value="Settings.Questiontime" class="form-control" />
                </div>
            </EditForm>
        </MUNityClient.Shared.Bootstrap.Modal>

}




<style>
    .list-head .hover-enabled {
        transition: .3s ease;
        opacity: 0;
    }

    .list-head:hover .hover-enabled {
        opacity: 1;
    }
</style>
