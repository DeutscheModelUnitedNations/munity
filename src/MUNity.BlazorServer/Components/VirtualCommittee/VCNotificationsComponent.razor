@using MUNity.Database.Models.Session
@inject BServices.ScopedSessionNotificationService notificationService
@inject BServices.VirtualCommiteeParticipationService vcParticipationService
@inject IServiceScopeFactory scopeFactory
@inject ILogger<VCNotificationsComponent> log

@if (show)
{
	<div class="toast-container">
		<div id="liveToast" class="toast fade show">
			<div class="toast-header">
				<div class="bg-blue rounded w-25px h-25px d-flex align-items-center justify-content-center text-white">
					<i class="fa fa-bell"></i>
				</div>
				<strong class="me-auto ms-2">@title</strong>
				<small>@timestamp</small>
				<button type="button" class="btn-close" aria-label="Close" @onclick="() => show = false"></button>
			</div>
			<div class="toast-body">
				@text
			</div>
		</div>
	</div>
}

@if (voteExchage != null && slot != null)
{
	<div class="toast-container">
		<div id="liveToast" class="toast fade show">
			<div class="toast-header">
				<div class="bg-blue rounded w-25px h-25px d-flex align-items-center justify-content-center text-white">
					<i class="fa fa-bell"></i>
				</div>
				<strong class="me-auto ms-2">@voteExchage.Title</strong>
				<small></small>
			</div>
			<div class="toast-body">
				@voteExchage.Text
				<br />
				<button class="btn btn-sm btn-success" @onclick=VotePro>Dafür</button>
				<button class="btn btn-sm btn-danger ms-1" @onclick=VoteCon>Dagegen</button>
				@if (allowAbstention)
				{
					<button class="btn btn-sm btn-primary ms-1" @onclick=VoteAbstent>Enthaltung</button>
				}
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public BServices.VirtualCommitteeExchange CommitteeExchange { get; set; }

	private BServices.VotingExchange voteExchage;

	private SessionVotingSlot slot;

	private bool show = false;

	private string title = "";

	private string text = "";

	private DateTimeOffset timestamp;

	private MunityContext dbContext;

	private bool allowAbstention;

	private void VotePro()
	{
		if (this.voteExchage != null && slot != null)
		{
			slot.Choice = EVoteStates.Pro;
			dbContext.SaveChanges();
			voteExchage.NotifyUserVoted(vcParticipationService.RoleId.Value, EVoteStates.Pro);
			this.voteExchage = null;
			this.slot = null;
		}
	}

	private void VoteCon()
	{
		if (this.voteExchage != null && slot != null)
		{
			slot.Choice = EVoteStates.Con;
			dbContext.SaveChanges();
			voteExchage.NotifyUserVoted(vcParticipationService.RoleId.Value, EVoteStates.Con);
			this.voteExchage = null;
			this.slot = null;
		}
	}

	private void VoteAbstent()
	{
		if (this.voteExchage != null && slot != null)
		{
			slot.Choice = EVoteStates.Con;
			dbContext.SaveChanges();
			voteExchage.NotifyUserVoted(vcParticipationService.RoleId.Value, EVoteStates.Abstention);
			this.voteExchage = null;
			this.slot = null;
		}
	}

	protected override void OnParametersSet()
	{
		var scope = scopeFactory.CreateScope();
		this.dbContext = scope.ServiceProvider.GetService<MunityContext>();
		base.OnParametersSet();
		if (CommitteeExchange != null)
		{
			this.CommitteeExchange.VoteNotified += OnVotingNotified;
		}
		else
		{
			log?.LogWarning("No Committee Exchange was given to the VCNotificationsService. This is needed for the voting notification to work.");
		}
	}

	private void OnVotingNotified(object sender, BServices.VotingExchange exchange)
	{
		try
		{
			if (vcParticipationService.RoleId != null)
			{
				this.slot = dbContext.VotingSlots.FirstOrDefault(n => n.User.RoleId == vcParticipationService.RoleId && 
				n.Voting.SessionVotingId == exchange.VotingId &&
				n.Choice == EVoteStates.NotVoted);
				this.allowAbstention = dbContext.SessionVotings.AsNoTracking().Where(n => n.SessionVotingId == exchange.VotingId).Select(n => n.AllowAbstention).FirstOrDefault();
				if (this.slot != null)
				{
					this.voteExchage = exchange;
					InvokeAsync(StateHasChanged);
				}
			}
			
		}
		catch (Exception ex)
		{
			log?.LogError(ex, "Unable to notify to vote. Notifications will not be shown.");
		}

	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		if (notificationService != null)
		{
			notificationService.NotificationCreated += OnNotificationCreated;
		}
	}

	private void OnNotificationCreated(object sender, BServices.Notification notification)
	{
		this.title = notification.Title;
		this.text = notification.Text;
		this.timestamp = notification.Timestamp;
		this.show = true;
		InvokeAsync(StateHasChanged);
	}
}
