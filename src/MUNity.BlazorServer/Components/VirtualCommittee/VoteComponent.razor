@using MUNity.Database.Models.Session

@inject BServices.VotingExchangeService voteExchangeService
@inject MunityContext dbContext
@inject BServices.VirtualCommiteeParticipationService vcPartService
@inject ILogger<VoteComponent> logger

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Abstimmung</h4>
    </div>
    <div class="panel-body">
        @if (voting != null)
        {
            <h3>@voting.Name</h3>
            <h5>@voting.Description</h5>

            @if (Results != null)
            {
                @if (voting.VoteSlots.Any(n => n.Choice == EVoteStates.NotVoted))
                {
                    <h2><span class="badge bg-danger">Es haben @voting.VoteSlots.Count(n => n.Choice == EVoteStates.NotVoted) noch nicht abgestimmt</span></h2>
                }
                <h3>
                @foreach(var result in Results)
                {
                    <span class="badge bg-dark ms-1">@result.Count @result.Name (@result.Percentage%)</span>
                }
                </h3>
                <RadzenChart>
                    <RadzenPieSeries Data="Results" Title="Ergebnis" CategoryProperty="Name" ValueProperty="Count" />
                </RadzenChart>
            }
            

            <table class="table">
                <thead>
                    <tr>
                        <th>Delegation</th>
                        <th>Stimme</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var slot in voting.VoteSlots)
                    {
                        <tr>
                            <td>@slot.User.RoleName</td>
                            <td>
                                @if (slot.User.RoleId == vcPartService.RoleId && slot.Choice == EVoteStates.NotVoted) 
                                {
                                    <button class="btn btn-success" @onclick="() => Vote(EVoteStates.Pro)">Dafür</button>
                                    <button class="btn btn-danger" @onclick="() => Vote(EVoteStates.Con)">Dagegen</button>
                                    @if (voting.AllowAbstention)
                                    {
                                        <button class="btn btn-primary ms-1" @onclick="() => Vote(EVoteStates.Abstention)">Enthaltung</button>
                                    }
                                }
                                else
                                {
                                    <p>@slot.Choice</p>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Abstimmung nicht gefunden.</p>
        }

    </div>
</div>

@code {
    [Parameter] public string VoteId { get; set; }

    private SessionVoting voting;

    private BServices.VotingExchange exchange;

    private int? myRoleId;

    private List<VoteResult> Results
    {
        get
        {
            if (voting == null)
                return new List<VoteResult>();

            var total = voting.VoteSlots.Count(n => n.Choice != EVoteStates.NotVoted);
            var proCount = voting.VoteSlots.Count(n => n.Choice == EVoteStates.Pro);
            var conCount = voting.VoteSlots.Count(n => n.Choice == EVoteStates.Con);
            var abstentCount = voting.VoteSlots.Count(n => n.Choice == EVoteStates.Abstention);
            var list = new List<VoteResult>();
            if (total > 0)
            {
                list.Add(new VoteResult("Dafür", proCount, proCount / total * 100));
                list.Add(new VoteResult("Dagegen", conCount, conCount / total * 100));
                list.Add(new VoteResult("Enthaltung", abstentCount, abstentCount / total * 100));
            }
            else
            {
                list.Add(new VoteResult("Dafür", 0,0));
                list.Add(new VoteResult("Dagegen", 0,0));
                list.Add(new VoteResult("Enthaltung", 0, 0));
            }

            return list;
        }
    }

    private class VoteResult
    {
        public string Name { get; set; }

        public int Count { get; set; }

        public double Percentage { get; set; }

        public VoteResult(string name, int count, double percentage)
        {
            this.Name = name;
            this.Count = count;
            this.Percentage = Math.Round(percentage, 2);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        vcPartService.Registered += delegate { InvokeAsync(StateHasChanged); };
        try
        {
            voting = dbContext.SessionVotings.Include(n => n.VoteSlots).ThenInclude(n => n.User)
                .FirstOrDefault(n => n.SessionVotingId == VoteId);
            exchange = voteExchangeService.GetExchange(VoteId, voting.Name, voting.Description);
            if (exchange != null)
            {
                exchange.UserVoted += OnUserVoted;
            }
        }
        catch (Exception ex)
        {
            
        }
        
    }

    private void OnUserVoted(object sender, BServices.UserVotedEventArgs args)
    {
        var slot = this.voting.VoteSlots.FirstOrDefault(n => n.User.RoleId == args.RoleId);
        if (slot != null)
        {
            slot.Choice = args.Choice;
            InvokeAsync(StateHasChanged);
        }
    }

    private void Vote(EVoteStates choice)
    {
        if (vcPartService?.RoleId != null)
        {
            var mySlot = voting.VoteSlots.FirstOrDefault(n => n.User.RoleId == vcPartService?.RoleId);
            if (mySlot != null)
            {
                mySlot.Choice = choice;
                dbContext.SaveChanges();
                exchange.NotifyUserVoted(vcPartService.RoleId.Value, mySlot.Choice);
            }
            else
            {
                logger?.LogError($"Tried to vote with the RoleId: {vcPartService.RoleId} but no slot was found that could be used in voting {VoteId}");
            }
        }
    }
}
