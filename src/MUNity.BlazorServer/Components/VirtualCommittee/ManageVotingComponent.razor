@using MUNity.Database.Models.Session
@inject MunityContext dbContext

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Abstimmung verwalten</h4>
    </div>
    <div class="panel-body">
        @if (voting != null)
        {
            @if (voting.IsActive)
            {
                <button class="btn btn-primary" @onclick="() => { voting.IsActive = false; dbContext.SaveChanges();}">Abstimmung bearbeiten</button>
            }
            else
            {
                <div class="form-group">
                    <label>Titel</label>
                    <input @bind=voting.Name class="form-control" />
                </div>

                <div class="form-group">
                    <label>Text</label>
                    <input @bind=voting.Description class="form-control" />
                </div>

                <h3>Stimmberechtigt</h3>

                @foreach(var cat in voting.VoteSlots.GroupBy(n => n.User.RoleName.Substring(0, 1)).OrderBy(n => n.Key))
                {
                    <h5>@cat.Key</h5>
                    <h3>
                    @foreach(var slot in cat)
                    {
                        
                            <span class="badge bg-dark me-1 cursor-pointer" @onclick="() => RemoveSlot(slot)">
                                <i class="fa fa-check me-1"></i>
                                @if (slot.User.DelegateCountry != null)
                                {
                                    <img class="me-1" src="@($"/img/flags/small/{slot.User.DelegateCountry.Iso}.png")" />
                                }
                                @slot.User.RoleName
                            </span>
                        
                        
                    }
                    </h3>
                }

                <button class="btn btn-primary" @onclick="ActivateVoting">Aktivieren</button>
            }
            
        }
        else
        {
            if (loaded == true)
            {
                <p>Fehler beim Laden der Abstimmung: @VotingId In den @dbContext.SessionVotings.Count() Abstimmungen nicht gefunden!</p>
            }
        }

    </div>
</div>

@code {
    [Parameter] public string VotingId { get; set; }

    private SessionVoting voting;

    private bool loaded = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.voting = dbContext.SessionVotings
        .Include(n => n.VoteSlots)
        .ThenInclude(n => n.User)
        .FirstOrDefault(n => n.SessionVotingId == VotingId);
        loaded = true;
    }

    private void RemoveSlot(SessionVotingSlot slot)
    {
        voting.VoteSlots.Remove(slot);
        dbContext.SaveChanges();
    }

    private void ActivateVoting()
    {
        if (voting != null)
        {
            voting.IsActive = true;
            dbContext.SaveChanges();
        }
    }
}
