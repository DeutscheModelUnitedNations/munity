@using MUNity.Database.Models.Conference.Roles
@inject MunityContext dbContext
@inject BServices.VirtualCommitteeExchangeService exchangeService

<div class="card border-0 text-truncate mb-3 bg-gray-800 text-white">
	<!-- BEGIN card-body -->
	<div class="card-body">
		<!-- BEGIN title -->
		<div class="mb-3 text-gray-500">
			<b class="mb-3">Delegationen</b> 
		</div>
		<!-- END title -->
		<!-- BEGIN conversion-rate -->
		<div class="d-flex align-items-center mb-1">
			<h2 class="text-white mb-0"><span>? online</span></h2>
		</div>
		<!-- END conversion-rate -->
		<!-- BEGIN percentage -->
		<div class="mb-4 text-gray-500 ">
			<span>@roles?.Count Insgesamt</span><br />
			@if (roles != null)
			{
				<span>@(Math.Ceiling(@roles.Count * 0.66)) Für 2/3 Mehrheit</span><br />
				<span>@(Math.Ceiling(@roles.Count * 0.5) + 1) Für einfache Mehrheit</span><br />
			}
		</div>
		@if (roles != null)
		{
			foreach(var role in roles)
			{
				<VCUserComponent IsOnline=@(exchange.connectedRoles.ContainsKey(role.RoleId)) Role="@role" Highlight="@(role.RoleId == MyRoleId)" />
			}

			<p>TTT: @string.Join(",", exchange.connectedRoles)</p>
		}
		
	</div>
	<!-- END card-body -->
</div>

@code {
	[Parameter] public string CommitteeId { get; set; }

	[Parameter] public int MyRoleId { get; set; }

	private List<ConferenceDelegateRole> roles;

	private Random rnd;

	private List<Database.General.Country> countries = new();

	private BServices.VirtualCommitteeExchange exchange;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		this.exchange = exchangeService.GetExchange(CommitteeId);
		if (this.exchange != null)
		{
			this.exchange.UserConnected += (s, a) => InvokeAsync(StateHasChanged);
			this.exchange.UserDisconnected += (s, a) => InvokeAsync(StateHasChanged);
		}
		roles = dbContext.Delegates.Include(n => n.DelegateCountry).Where(n => n.Committee.CommitteeId == CommitteeId).ToList();

	}


}
