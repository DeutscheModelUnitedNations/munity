@using MUNity.Database.Models.Conference.Roles
@inject MunityContext dbContext
@inject BServices.VirtualCommitteeExchangeService exchangeService
@inject ILogger<VCUsersComponent> logger

<div class="card border-0 text-truncate mb-3 bg-gray-800 text-white">
	<!-- BEGIN card-body -->
	<div class="card-body">
		<!-- BEGIN title -->
		<div class="mb-3 text-gray-500 d-flex justify-content-between">
			<b class="mb-3 d-flex align-self-center">Delegationen</b>
			<button class="btn btn-default btn-icon btn-sm" @onclick="() => expand = !expand"><i class="fa @((expand) ? "fa-minus" : "fa-expand")"></i></button>
		</div>
		<!-- END title -->
		<!-- BEGIN conversion-rate -->
		<div class="d-flex align-items-center mb-1">
			<h2 class="text-white mb-0"><span>@exchange?.connectedRoles.Count online</span></h2>
		</div>
		<!-- END conversion-rate -->
		<!-- BEGIN percentage -->
		<div class="mb-4 text-gray-500 ">
			<span>@roles?.Count Insgesamt</span><br />
			@if (roles != null)
			{
				<span>@(Math.Ceiling(@roles.Count * 0.66)) Für 2/3 Mehrheit</span><br />
				<span>@(Math.Ceiling(@roles.Count * 0.5) + 1) Für einfache Mehrheit</span><br />
			}
			else
			{
				<span>Rollen sind null. Fehler erkannt!</span>
			}
		</div>
		@if (roles != null && expand && exchange?.CurrentSessionExchange?.Petitions != null)
		{
			foreach(var role in roles)
			{
				<VCUserComponent IsOnline=@(exchange.connectedRoles.ContainsKey(role.RoleId)) 
				Role="@role" 
				Highlight="@(role.RoleId == MyRoleId)"
				RaisesHand="@exchange.CurrentSessionExchange.Petitions.Any(n => n.PetitionUserId == role.RoleId && n.PetitionCategoryName == "Persönlicher Antrag")"
				hasProposition="@exchange.CurrentSessionExchange.Petitions.Any(n => n.PetitionUserId == role.RoleId && n.PetitionCategoryName != "Persönlicher Antrag")" 
				IsPresent="@presentRoles.Any(n => n.RoleId == role.RoleId && n.IsPresent)" />
			}
		}
		else
		{
			<p>Unable to generate list of users.</p>
		}

	</div>
	<!-- END card-body -->
</div>

@code {
	[Parameter] public string CommitteeId { get; set; }

	[Parameter] public int? MyRoleId { get; set; }

	private List<ConferenceDelegateRole> roles;

	private Random rnd;

	private List<Database.General.Country> countries = new();

	private List<PresentRole> presentRoles = new();

	private BServices.VirtualCommitteeExchange exchange;

	private bool expand = true;

	private void Init()
	{

		this.exchange = exchangeService.GetExchange(CommitteeId);
		if (this.exchange != null)
		{
			this.exchange.UserConnected += (s, a) => InvokeAsync(StateHasChanged);
			this.exchange.UserDisconnected += (s, a) => InvokeAsync(StateHasChanged);
			this.exchange.CurrentSessionChanged += delegate { InvokeAsync(StateHasChanged); };
			if (exchange.CurrentSessionExchange != null)
			{
				if (exchange.CurrentSessionExchange.Petitions == null)
				{
					this.exchange.CurrentSessionExchange.Petitions.CollectionChanged += delegate { InvokeAsync(StateHasChanged); };
				}
				else
				{
					logger?.LogError("Petitions are null");
				}

				this.presentRoles = dbContext.PresentStates.Where(n => n.SessionPresents.Session.CommitteeSessionId == this.exchange.CurrentSessionExchange.SessionId)
				.Select(n => new PresentRole()
				{
					RoleId = n.Role.RoleId,
					IsPresent = n.State == Database.Models.Session.PresentsState.PresentsStates.Present || n.State == Database.Models.Session.PresentsState.PresentsStates.Late
				}).ToList();
			}
			else
			{
				logger?.LogError("CurrentSession in exchange in null.");
			}
		}
		else
		{
			logger?.LogError("No exchange for committee {0} found.", CommitteeId);
		}
		roles = dbContext.Delegates.Include(n => n.DelegateCountry).Where(n => n.Committee.CommitteeId == CommitteeId).ToList();


	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		Init();
	}

	private class PresentRole
	{
		public int RoleId { get; set; }

		public bool IsPresent { get; set; }
	}

}
