@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Conference
@using MUNity.Database.Models.Session
@inject MunityContext dbContext
@inject BServices.VirtualCommiteeParticipationService vcService
@inject BServices.VirtualCommitteeExchangeService vcExchangeService
@inject ILogger<PropsitionsComponent> logger



@if (currentSessionExchange != null)
{

	<div class="panel panel-inverse">
		<div class="panel-heading">
			<h4 class="panel-title">Anträge</h4>
		</div>
		<div class="panel-body">
			<button class="btn btn-sm btn-default" @onclick="ReloadSessionExchangesAndFindCurrent">Neu laden (behebt ggf. Fehler in der Reihenfolge)</button>
			<table class="table table-panel mb-0">
				<thead>
					<tr>
						<th>Zeitpunkt</th>
						<th class="hidden-sm text-center">Land</th>
						<th>Art</th>
						<th>Antrag</th>
						<th>Annehmen</th>
						<th>Zurückziehen/Verwerfen</th>
					</tr>
				</thead>
				<tbody>
					@if (currentSessionExchange?.Petitions != null && currentSessionExchange.Petitions.Count > 0)
					{
						foreach (var petition in currentSessionExchange.Petitions.OrderBy(n => n.Status))
						{
							<!-- Waiting Proposition -->
							<tr class="@((petition.Status == EPetitionStates.Active) ? "table-info" : null)">
								<td class="fw-bold text-muted ">@petition?.PetitionDate</td>
								<td class="hidden-sm">
									<img src="@($"/img/flags/small/{petition?.PetitionUserIso}.png")" alt="" width="32px">
									@petition?.PetitionUserName
								</td>
								<td class="text-nowrap">
									<h6>@petition?.PetitionCategoryName</h6>
								</td>
								<td class="text-nowrap">
									<h6>@petition?.PetitionTypeName</h6>
								</td>
								<AuthorizeView>
									<Authorized>
										@if (petition.Status != EPetitionStates.Active)
										{
											<td class="text-blue fw-bold"><button class="btn btn-sm btn-success" @onclick="() => ActivatePetition(petition.PetitionId)">Antrag hervorheben</button></td>
										}
										else
										{
											<td></td>
										}
										<td class="text-nowrap"><button class="btn btn-sm @((petition.Status == EPetitionStates.Queued) ? "btn-danger" : "btn-indigo")" @onclick="() => RemovePetition(petition.PetitionId)">@((petition.Status == EPetitionStates.Queued) ? "Antrag ablehnen" : "Antrag fertig")</button></td>
									</Authorized>
									<NotAuthorized>
										<td></td>
										<td>
											@if (petition.PetitionUserId == vcService.RoleId && petition.Status != EPetitionStates.Active)
											{
												<button class="btn btn-sm btn-danger" @onclick="() => RemovePetition(petition.PetitionId)">Antrag zurückziehen</button>
											}
										</td>
									</NotAuthorized>
								</AuthorizeView>

							</tr>
						}
					}

				</tbody>
			</table>

			<div class="mt-5">
				@if (committeeId != null && currentSessionExchange?.Petitions != null && vcService != null && vcService.RoleId != 0)
				{
					@foreach(var petitionCategory in dbContext.Committees.AsNoTracking().Where(n => n.CommitteeId == committeeId).SelectMany(n => n.AllowedPetitionTypes).OrderBy(n => n.SortOrder).Select(n => new { Category = n.Category, Id = n.PetitionTypeId, Name = n.Name}).ToList().GroupBy(n => n.Category))
					{
						<h3>@petitionCategory.Key</h3>
						@foreach(var petitionType in petitionCategory)
						{
							<button class="btn m-1 btn-primary @((currentSessionExchange.Petitions.Any(n => n.PetitionTypeId == petitionType.Id && n.PetitionUserId == vcService.RoleId)) ? "disabled" : null)" @onclick="() => AddPetition(petitionType.Id)">@petitionType.Name</button>
						}
					}
				}
			</div>
			
		</div>
	</div>
}
else
{
	<p>No Current exchange.</p>

	@if (this.committeeExchange != null)
	{
		<button class="btn btn-primary" @onclick="ReloadSessionExchangesAndFindCurrent">Neu laden</button>
	}
}


@code {
	[Parameter] public string SessionId { get; set; }

	private int selectedPanel = 0;

	private string committeeId;

	private CommitteeSessionExchange currentSessionExchange;

	private VirtualCommitteeExchange committeeExchange;

	private bool alreadyMakingThisRequest = false;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		this.committeeId = dbContext.CommitteeSessions.AsNoTracking().Where(n => n.CommitteeSessionId == SessionId)
		.Select(n => n.Committee.CommitteeId).FirstOrDefault();

		this.committeeExchange = vcExchangeService.GetExchange(committeeId);
		this.currentSessionExchange = committeeExchange.SessionExchanges.FirstOrDefault(n => n.SessionId == SessionId);

		if (currentSessionExchange != null)
		{
			currentSessionExchange.Petitions.CollectionChanged += delegate { InvokeAsync(StateHasChanged); };
		}
		else
		{
			logger?.LogWarning($"No exchange for the session found with id: {SessionId} inside sessions: {string.Join("", committeeExchange.SessionExchanges.Select(a => a.SessionId))}");
		}
		vcService.Registered += delegate { InvokeAsync(StateHasChanged); };
	}

	private void ReloadSessionExchangesAndFindCurrent()
	{
		vcExchangeService.ReloadSessionExchangesForExchange(this.committeeExchange);
		this.currentSessionExchange = committeeExchange.SessionExchanges.FirstOrDefault(n => n.SessionId == SessionId);

		if (currentSessionExchange != null)
		{
			currentSessionExchange.Petitions.CollectionChanged += delegate { InvokeAsync(StateHasChanged); };
			currentSessionExchange.PetitionStatusChanged += delegate { InvokeAsync(StateHasChanged); };
		}
		else
		{
			logger?.LogWarning($"No exchange for the session found with id: {SessionId} inside sessions: {string.Join("", committeeExchange.SessionExchanges.Select(a => a.SessionId))}");
		}
		InvokeAsync(StateHasChanged);
	}

	private void AddPetition(int type)
	{
		if (vcService.IsActiveForCommittee(committeeId) && currentSessionExchange != null)
		{
			vcService.MakePetition(currentSessionExchange.CurrentAgendaItemId, type);
		}
	}

	private void ActivatePetition(string petitionId)
	{
		vcService.ActivatePetition(petitionId);
	}

	private void RemovePetition(string petitionId)
	{
		vcService.RemovePetition(petitionId);
	}


}
