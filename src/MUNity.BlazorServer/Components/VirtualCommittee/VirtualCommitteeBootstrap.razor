@using MUNity.BlazorServer.BServices

@inject MunityContext dbContext
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject BServices.VirtualCommiteeParticipationService virtualCommitteeParticipation
@inject BServices.VirtualCommitteeExchangeService vcExchangeService
@inject Services.UserConferenceAuthService conferenceAuthService
@inject Services.ListOfSpeakersService listOfSpeakersService
@inject ILogger<VirtualCommitteeBootstrap> logger

 

@if (exchange != null)
{
    <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteTopMenu 
        CommitteeExchange=@exchange />
}


<div class="d-flex justify-content-center bg-dark-800" style="min-height: 90px">
    <div class="mt-5px">
        @if(listOfSpeakersId != null)
        {
            <MUNity.BlazorServer.Components.ListOfSpeakers.ListOfSpeakersHeaderComponent 
            ListOfSpeakersId=@listOfSpeakersId 
            MyRoleName=@virtualCommitteeParticipation.RoleName
            MyIso=@virtualCommitteeParticipation.RoleIso />
        }
        else
        {
        if (canCreateListOfSpeakers)
        {
            <span class="text-white">Es wurde noch keine Redeliste erstellt</span>
            <button class="btn btn-sm btn-default" @onclick="CreateListOfSpeakers">Jetzt erstellen</button>
        }
            
        }
    </div>
    @*<div class="d-flex align-items-center hidden-md">
        @if (exchange != null)
        {
            if (exchange.CurrentSessionExchange != null)
            {
                <h3 class="me-3 text-default">@exchange.CurrentSessionExchange.SessionName</h3>
            }
            else
            {
                <h3 class="me-3 text-default">Kein Sitzungsblock</h3>
            }
        }
        else
        {
            <small class="text-danger">Exchange error!</small>
        }
    </div>*@
</div>

@if (exchange != null)
{
    <div class="row mt-5 ms-2 me-2">
        <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteeBannerComponent CommitteeExchange=@exchange />
    </div>
}


<div class="row mt-1 me-1">
    <div class="col-lg-3 col-sm-12 animate__animated animate__bounceInLeft">
        <MUNity.BlazorServer.Components.VirtualCommittee.VCUsersComponent MyRoleId=@virtualCommitteeParticipation.RoleId CommitteeId=@CommitteeId />
    </div>

    <div class="col-lg-9 col-sm-12">
        @if (exchange != null)
        {
            <CascadingValue Value=@exchange>
                @ChildContent
            </CascadingValue>
        }
    </div>
</div>

@if (exchange != null)
{
    <MUNity.BlazorServer.Components.VirtualCommittee.VCNotificationsComponent CommitteeExchange=@exchange />
}


@code {
    [Parameter] public string CommitteeId { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private string listOfSpeakersId;

    private string committeeName;

    private bool accessDenied = false;

    private bool isTeam = false;

    private bool errorOnInit = false;

    private string initError = "";

    private VirtualCommitteeExchange exchange;

    private bool canCreateListOfSpeakers = false;

    private void CreateListOfSpeakers()
    {
        var viewModel = listOfSpeakersService.CreateList($"los_{CommitteeId}_{Guid.NewGuid().ToString().Substring(0,5)}");
        var committee = dbContext.Committees.FirstOrDefault(n => n.CommitteeId == CommitteeId);
        if (committee != null)
        {
            var listInstance = dbContext.ListOfSpeakers.FirstOrDefault(n => n.ListOfSpeakersId == viewModel.ListOfSpeakersId);
            if (listInstance == null)
            {
                logger?.LogError($"Unable to find a list of speakers with the id '{viewModel.ListOfSpeakersId}' the list can't be loaded correctly!");
            }
            else
            {
                committee.ListOfSpeakers = listInstance;
                this.listOfSpeakersId = viewModel.ListOfSpeakersId;
                dbContext.SaveChanges();
            }

        }
    }

    private async Task Init()
    {
        var accessKey = await localStorageService.GetItemAsStringAsync($"munity-access-{CommitteeId}");

        if (accessKey != null)
        {
            var signInSucces = virtualCommitteeParticipation.SignIn(CommitteeId, accessKey);
            if (!signInSucces)
            {
                accessDenied = true;
                await localStorageService.RemoveItemAsync($"munity-access-{CommitteeId}");
            }
        }
        else
        {
            var claim = (await AuthStateTask)?.User;
            this.isTeam = await conferenceAuthService.IsUserTeamMemberForCommitteeOrHigher(CommitteeId, claim);
            if (!isTeam)
            {
                accessDenied = true;
            }
        }

        if (!accessDenied)
        {
            var committeeInfo = dbContext.Committees.AsNoTracking().Where(n => n.CommitteeId == CommitteeId)
            .Select(n => new
            {
                Name = n.Name,
                ListOfSpeakersId = n.ListOfSpeakers.ListOfSpeakersId
            }).FirstOrDefault();
            committeeName = committeeInfo.Name;
            listOfSpeakersId = committeeInfo.ListOfSpeakersId;
            canCreateListOfSpeakers = listOfSpeakersId == null && (await AuthStateTask).User.Identity.IsAuthenticated;
        }
        this.exchange = vcExchangeService.GetExchange(CommitteeId);
        if (exchange != null)
        {
            this.exchange.CurrentSessionChanged += (n,a) => InvokeAsync(StateHasChanged);
        }
        await InvokeAsync(StateHasChanged);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                await Init();
            }
            catch (Exception ex)
            {
                errorOnInit = true;
                initError = ex.Message;
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
