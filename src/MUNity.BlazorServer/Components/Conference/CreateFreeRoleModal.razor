<!-- Create Project Modal -->
@inject Services.ConferenceService conferenceService;

@if (isVisible)
{
    <div class="modal fade show" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Neue freie Rolle</h4>
                    <button type="button" class="btn-close" @onclick="() => Hide()"></button>
                </div>
                @if (response == null)
                {
                    <EditForm Model="request" OnValidSubmit="CreateRoleGroup">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="modal-body">
                            <h3>Über freie Rollen</h3>
                            <p>Freie Rollen sind für Teilnehmende gedacht, welche nicht fester Bestandteil eines Gremiums sind. Zum Beispiel Presse, Nicht-Regierungs-Organisationen welche an kein Gremium gebunden sein sollen etc. Auch Lehrkräfte können dieser Art von Rolle angehören.</p>
                            <p class="text-warning">Teammitglieder gehören nicht zu dieser Art von Rolle. Das Team hat einen eigenen Typ.</p>
                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Rollenname</label>
                                <div class="col-md-9">
                                    <InputText type="text" class="form-control mb-5px" placeholder="Rollenname" @bind-Value="@request.RoleName" />
                                    <small class="fs-12px text-gray-500-darker">RedakteurIn, Kameramann/frau, Lehrkraft Musterschule etc.</small>
                                </div>
                            </div>

                            @if (Countries != null)
                            {
                                <div class="row mb-15px">
                                    <label class="form-label col-form-label col-md-3">Repräsentiertes Land</label>
                                    <div class="col-md-9">
                                        <InputSelect @bind-Value="@request.CountryId" class="form-select">
                                            <option value="-1">Keinem Land zugehörig</option>
                                            @foreach (var country in Countries)
                                                        {
                                                <option value="@country.CountryId">@country.Name</option>
                                                        }
                                        </InputSelect>
                                        <small class="fs-12px text-gray-500-darker"></small>
                                    </div>
                                </div>
                            }

                            @if (Delegations != null)
                            {
                                <div class="row mb-15px">
                                    <label class="form-label col-form-label col-md-3">Delegations</label>
                                    <div class="col-md-9">
                                        <InputSelect @bind-Value="@request.DelegationId" class="form-select">
                                            <option value="">Keine Delegations</option>
                                            @foreach (var delegation in Delegations)
                                                        {
                                                <option value="@delegation.DelegationId">@delegation.DelegationName</option>
                                                        }
                                        </InputSelect>
                                        <small class="fs-12px text-gray-500-darker"></small>
                                    </div>
                                </div>
                            }

                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Subkategorie</label>
                                <div class="col-md-9">
                                    <InputText type="text" class="form-control mb-5px" placeholder="Presse" @bind-Value="@request.Subtype" />
                                    <small class="fs-12px text-gray-500-darker">Hier kann eine Art erweiterte Gruppe angegeben werden: PRESSE, NGO, LEHRKRAFT...</small>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-white" @onclick="() => Hide()">Abbrechen</button>
                            <button class="btn btn-success" type="submit">Sitz erstellen</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="modal-body">
                        <div class="col-12">
                            @if (!response.HasError)
                            {
                                <div class="alert alert-success">Rolle erfolgreich erstellt <button class="btn btn-sm btn-secondary" @onclick="() => Reset()">weiteren Sitz erstellen</button></div>
                            }
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-white" @onclick="() => Hide()">Schließen</button>
                    </div>
                }

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private bool isVisible = false;

    [CascadingParameter] public Task<AuthenticationState> authStateTask { get; set; }

    [Parameter] public string ConferenceId { get; set; }

    [Parameter] public EventCallback SeatCreated { get; set; }

    [Parameter] public List<MUNity.Schema.Conference.CountryInfo> Countries { get; set; }

    [Parameter] public List<MUNity.Schema.Conference.DelegationInfo> Delegations { get; set; }

    private int groupId { get; set; }

    private Schema.Conference.CreateFreeSeatRequest request;

    private Schema.Conference.CreateSeatResponse response;


    protected override void OnInitialized()
    {
        this.request = new Schema.Conference.CreateFreeSeatRequest();
        this.request.ConferenceId = ConferenceId;
    }

    public void Show()
    {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        isVisible = false;
    }

    public async Task CreateRoleGroup()
    {
        var claim = (await authStateTask)?.User;
        if (claim != null)
        {
            this.response = await conferenceService.CreateFreeSeat(request, claim);
            if (!response.HasError)
                await SeatCreated.InvokeAsync();
        }

    }

    private void Reset()
    {
        request.CountryId = -1;
        request.DelegationId = null;
        request.RoleName = null;
        request.Subtype = null;
        response = null;
    }
}
