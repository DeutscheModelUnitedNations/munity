<!-- Create Project Modal -->
@inject Services.ConferenceService conferenceService;

@if (isVisible)
{
    <div class="modal fade show" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Neue Teamrollengruppe</h4>
                    <button type="button" class="btn-close" @onclick="() => Hide()"></button>
                </div>
                @if (response == null)
                {
                    <EditForm Model="request" OnValidSubmit="CreateRoleGroup">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="modal-body">
                            <h3>Über Gruppen</h3>
                            <p>Die Rollen für das Team eine Konferenz werden in Gruppen zusammengefasst. Diese Gruppen können zum Beispiel: Projektleitung, Erweiterte Projektleitung, Vorsitzende/Chairs und Medienteam sein.</p>
                            <p>Diesen Gruppen sind dann einzelne Rollen zugeordnet, wie die Projektleitung, GeneralserektärIn etc.</p>

                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Gruppenname</label>
                                <div class="col-md-9">
                                    <InputText type="text" class="form-control mb-5px" placeholder="Projektleitung" @bind-Value="@request.GroupName" />
                                    <small class="fs-12px text-gray-500-darker">Der Name der Gruppe. Zum Beispiel (erweiterte) Projektleitung</small>
                                </div>
                            </div>

                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Vollständiger Gruppenname</label>
                                <div class="col-md-9">
                                    <InputText type="text" class="form-control mb-5px" placeholder="Projektleitung MUN..." @bind-Value="@request.GroupFullName" />
                                    <small class="fs-12px text-gray-500-darker">Ein erweiterter Name für die Gruppe. Zum Beispiel: Projektleitung MUN-Berlin 2012. Dieser kann aber auch gleich dem Gruppennamen sein.</small>
                                </div>
                            </div>

                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Gruppenkürzel</label>
                                <div class="col-md-9">
                                    <InputText type="text" class="form-control mb-5px" placeholder="PL" @bind-Value="@request.GroupShort" />
                                    <small class="fs-12px text-gray-500-darker">Eine Kurzform für die Gruppe zum Beispiel PL, EPL, Chairs etc.</small>
                                </div>
                            </div>

                            <div class="row mb-15px">
                                <label class="form-label col-form-label col-md-3">Hierarchielevel</label>
                                <div class="col-md-9">
                                    <InputNumber class="form-control mb-5px" @bind-Value="@request.GroupLevel" />
                                    <small class="fs-12px text-gray-500-darker">Eine Einschätzung auf welcher Stufe diese Gruppe steht. Augehend von 1 als Mächtigste Stufe und 2,3,4 als zumehmend weniger mächtig. Diese Information wird ggf. von anderen Anwendungen benötigt um Rechte zu verwalten und auch um hier eine Sortierung herzustellen.</small>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-white" @onclick="() => Hide()">Abbrechen</button>
                            <button class="btn btn-success" type="submit">Gruppe erstellen</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="modal-body">
                        <div class="col-12">
                            @if (!response.HasError)
                            {
                                <div class="alert alert-success">Die Gruppe wurde erfolgreich erstellt <button class="btn btn-sm btn-secondary" @onclick="() => Reset()">weitere Gruppe erstellen</button></div>
                            }
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-white" @onclick="() => Hide()">Schließen</button>
                    </div>
                }

            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private bool isVisible = false;

    [Parameter] public string ConferenceId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> authStateTask { get; set; }

    [Parameter] public EventCallback GroupCreated { get; set; }


    private Schema.Conference.CreateTeamRoleGroupRequest request;

    private Schema.Conference.CreateTeamRoleGroupResponse response;


    protected override void OnInitialized()
    {
        this.request = new Schema.Conference.CreateTeamRoleGroupRequest();
        request.ConferenceId = ConferenceId;
    }

    public void Show()
    {
        isVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        isVisible = false;
    }

    public async Task CreateRoleGroup()
    {
        var claim = (await authStateTask)?.User;
        if (claim != null)
        {
            this.response = await conferenceService.CreateRoleGroupAsync(request, claim);
            if (!response.HasError)
                await GroupCreated.InvokeAsync();
        }

    }

    private void Reset()
    {
        request.GroupFullName = null;
        request.GroupName = null;
        request.GroupShort = null;
        request.GroupLevel = request.GroupLevel + 1;
        response = null;
    }
}
