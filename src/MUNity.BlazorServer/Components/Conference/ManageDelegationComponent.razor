@inject Services.DelegationService delegationService

<div class="col-xl-3 col-lg-3 col-sm-6">
    <div class="card border-0 mb-3 bg-gray-900 text-white">
        <!-- BEGIN card-body -->
        <div class="card-body">
            <!-- BEGIN title -->
            <div class="mb-3 text-gray-300">
                <div class="d-flex align-items-center">
                    <div class="text-truncate">
                        <div>@Info.DelegationName (@Info.DelegationShort)</div>
                    </div>
                    <div class="ms-auto text-center">
                        <div class="text-gray-300">@Info.Roles.Count Slots</div>
                    </div>
                </div>
                
            </div>


            @if (isExpanded)
            {
                @foreach (var role in Info.Roles)
                {
                    <div class="d-flex align-items-center mb-15px">
                        <div class="text-truncate">
                            <div>@role.RoleName</div>
                            <div class="text-gray-300">@((!string.IsNullOrEmpty(role.RoleCommitteeName) ? role.RoleCommitteeName : "Kein Gremium"))</div>
                        </div>
                        <div class="ms-auto text-center">
                            <div class="fs-13px">@((role.HasParicipant) ? "Ist besetzt" : "Rolle ist verfügbar")</div>
                            <div class="text-gray-300 fs-10px">Bewerbung erlaubt</div>
                        </div>
                    </div>
                    
                }
                <hr />
                <div class="row mb-3">
                    <EditForm Model="@form" OnValidSubmit="AddRoleToDelegation">
                        <div class="col-12 mb-1">
                                <InputSelect class="form-select" @bind-Value="@form.SelectedRoleId">
                                    <option value="-1">Rolle zum Hinzufügen auswählen</option> 
                                    @foreach (var role in availableRoles)
                                        {
                                        <option value="@role.RoleId">@role.RoleName @((!string.IsNullOrEmpty(role.RoleCommitteeName) ? $"(in {role.RoleCommitteeName})" : "(ohne Gremium)"))</option>
                                        }
                                </InputSelect>
                        </div>
                        <div class="col-12">
                            <button class="btn btn-block btn-sm btn-success w-100 @((form.SelectedRoleId == -1) ? "disabled" : null)">Delegierte/n Hinzufügen</button>
                        </div>
                    </EditForm>
                    
                </div>
            }
            <hr />
            <div class="row">
                <div class="col-12">
                    <div class="text-center text-gray-300-600 text-decoration-underline"
                         style="cursor: pointer;" @onclick="() => Toggle()">
                    @((!isExpanded) ? "Rollen anzeigen" : "Rollen ausblenden")
                    </div>
                </div>
                
                
            </div>
        </div>
        <!-- END card-body -->
    </div>
</div>

@code {
    private bool isExpanded = false;

    [Parameter] public MUNity.Schema.Conference.ManageDelegationInfo Info { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    [Parameter] public string ConferenceId { get; set; }

    private List<MUNity.Schema.Conference.ManageDelegationRoleInfo> availableRoles = new List<Schema.Conference.ManageDelegationRoleInfo>();



    private class AddRoleForm
    {
        public int SelectedRoleId { get; set; } = -1;
    }

    private AddRoleForm form = new AddRoleForm();

        protected override void OnInitialized()
        {
            base.OnInitialized();
        }

        private async Task Toggle()
    {
        if (!isExpanded)
        {
            var claim = (await AuthStateTask)?.User;
            availableRoles = await delegationService.GetAvailableRoles(ConferenceId, claim);
        }
        isExpanded = !isExpanded;
    }

    private async Task AddRoleToDelegation()
    {
        var claim = (await AuthStateTask)?.User;
        var result = await delegationService.AddRoleToDelegation(form.SelectedRoleId, Info.DelegationId, claim);
        if (result)
        {
            var role = availableRoles.FirstOrDefault(n => n.RoleId == form.SelectedRoleId);
            Info.Roles.Add(role);
            form.SelectedRoleId = -1;

            availableRoles.Remove(role);
        }
    }


}
