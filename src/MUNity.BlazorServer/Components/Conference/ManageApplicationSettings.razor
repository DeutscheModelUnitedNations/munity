@using MUNity.Database.Models.Website
@using MUNity.Database.Context
@inject Services.UserConferenceAuthService conferenceAuthService
@inject MunityContext dbContext

@if (isAuthorized)
{
    <table class="table">
        <thead>
            <tr>
                <th>Eigenschaft</th>
                <th>Wert</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Bewerbung auf Delegation</td>
                <td>@((dbContext.ConferenceApplicationFormulas.Any(a => a.Conference.ConferenceId == ConferenceId && a.FormulaType == MUNityBase.ConferenceApplicationFormulaTypes.Delegation && a.IsActive)) ? "aktiv" : "deaktiviert")</td>
            </tr>
            <tr>
                <td>Bewerbung auf Rollen</td>
                <td>@((dbContext.ConferenceApplicationFormulas.Any(a => a.Conference.ConferenceId == ConferenceId && a.FormulaType == MUNityBase.ConferenceApplicationFormulaTypes.Role && a.IsActive)) ? "aktiv" : "deaktiviert")</td>
            </tr>
            <tr>
                <td>Bewerbung auf Team-Rollen</td>
                <td>@((dbContext.ConferenceApplicationFormulas.Any(a => a.Conference.ConferenceId == ConferenceId && a.FormulaType == MUNityBase.ConferenceApplicationFormulaTypes.Team && a.IsActive)) ? "aktiv" : "deaktiviert")</td>
            </tr>
            <tr>
                <td>Anzahl Delegation-Slots</td>
                <td>@dbContext.Delegates.Count(n => n.Conference.ConferenceId == ConferenceId && n.ApplicationState == MUNityBase.EApplicationStates.DelegationApplication)</td>
            </tr>
            <tr>
                <td>Anzahl Rollen mit Direktbewerbung</td>
                <td>@dbContext.Delegates.Count(n => n.Conference.ConferenceId == ConferenceId && n.ApplicationState == MUNityBase.EApplicationStates.DirectApplication)</td>
            </tr>
            <tr>
                <td>Anzahl Rollen mit geschlossener Bewerbung</td>
                <td>@dbContext.Delegates.Count(n => n.Conference.ConferenceId == ConferenceId && n.ApplicationState == MUNityBase.EApplicationStates.Closed)</td>
            </tr>
            <tr>
                <td>Anzahl eingereichter Delegationsbewerbungen</td>
                <td>@dbContext.DelegationApplications.Count(n => n.Delegations.Select(a => a.Delegation.Conference).First().ConferenceId == ConferenceId)</td>
            </tr>
            <tr>
                <td>Delegationen welche durch Bewerbungen abgedeckt sind</td>
                <td>
                    @{
                        var totalCount = dbContext.Delegations.Count(n => n.Conference.ConferenceId == ConferenceId);
                        var coveredCount = dbContext.Delegations.Count(n => n.Conference.ConferenceId == ConferenceId && dbContext.DelegationApplicationPickedDelegations.Any(a => a.Delegation.DelegationId == n.DelegationId));
                        int percentage = coveredCount * 100 / totalCount;

                        <div class="widget-chart-info-progress">
                            <b>Abdeckung</b>
                            <span class="float-end">@percentage %</span>
                        </div>
                        <div class="progress h-10px">
                            <div class="progress-bar rounded-pill" style="width:@(percentage)%;"></div>
                        </div>
                        <small class="text-secondary">Achtung, diese Zahl gibt nur an, wie auf welche Delegationen ein Beitrittswunsch vorliegt, aber nicht welche Delegationen alles abgedeckt sind.</small>
                    }
                </td>

            </tr>
            <tr>
                <td>Delegationen welche durch erstwünsche abgedeckt sind</td>
                <td>
                    @{
                        var coveredCountByPrioZero = dbContext.Delegations.Count(n => n.Conference.ConferenceId == ConferenceId && dbContext.DelegationApplicationPickedDelegations.Any(a => a.Delegation.DelegationId == n.DelegationId && a.Priority == 0));
                        int percentagePrioZero = coveredCountByPrioZero * 100 / totalCount;

                        <div class="widget-chart-info-progress">
                            <b>Abdeckung</b>
                            <span class="float-end">@percentagePrioZero %</span>
                        </div>
                        <div class="progress h-10px">
                            <div class="progress-bar rounded-pill" style="width:@(percentagePrioZero)%;"></div>
                        </div>
                        <small class="text-secondary">Diese Zahl gibt an, wie viele Delegationen besetzt sind, wenn die Nutzer ihre Prio 1 bekommen.</small>
                    }
                </td>

            </tr>
        </tbody>
    </table>
    
}
else
{
    <div class="alert alert-muted">
        Daten werden geladen...
    </div>
}

@code {
    [Parameter] public string ConferenceId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool isAuthorized = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var claim = (await AuthStateTask)?.User;
        if (claim != null)
        {
            this.isAuthorized = await conferenceAuthService.IsUserAllowedToEditConference(ConferenceId, claim);
        }
    }

}
