@using MUNity.Schema.Conference.Website
@using MUNity.Database.Models.Website

@inject MunityContext dbContext

<h3>EditConfereceApplicationComponent</h3>

<div class="col-12">
    <div class="panel panel-inverse">
        <div class="panel-heading bg-info">
            <h4 class="panel-title">Anmeldung</h4>
            <div class="panel-heading-btn">
                @*<a @onclick="() => dbContext.Update(topcis)" class="btn btn-sm btn-icon btn-primary"><i class="fa fa-save"></i></a>
                <a href="javascript:;" class="btn btn-sm btn-icon btn-success"><i class="fa fa-arrow-up"></i></a>
                <a href="javascript:;" class="btn btn-sm btn-icon btn-warning"><i class="fa fa-arrow-down"></i></a>
                <a href="javascript:;" class="btn btn-sm btn-icon btn-danger"><i class="fa fa-trash"></i></a>*@
            </div>
        </div>
        <div class="panel-body">
            @if (this.options != null)
            {
                <p>Team-Anmeldung: @options.AllowTeamApplication</p>
                <p>Erlaube Länderwunsch-Anmeldung <span class="badge bg-info">Pro-Feature</span> @options.AllowCountryWishApplication</p>
                <p>Erlaube Delegations-Anmeldung: @options.AllowDelegationApplication</p>
                <p>Erlaube Delegationswunsch für Einzelpersonen <span class="badge bg-info">Pro-Feature</span>: @options.AllowDelegationWishApplication</p>
                <p>Erlaube Anmeldung auf Rollen: @options.AllowRoleApplication</p>
            }
            @if (this.Element?.Conference != null)
            {
                <p>Unterscheide zwischen online und vor Ort: @dbContext.Fluent.ForConference(this.Element.Conference.ConferenceId).HasOnLocationAndOnlineCommittees()
                </p>

            }
            else
            {
                <p>ERROR: No Conference set</p>

            }
        </div>
    </div>
</div>



@code {
    [Parameter] public ConferenceRegisterElement Element { get; set; }

    private Database.Models.Conference.ConferenceApplicationOptions options;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        @if (Element?.Conference != null)
        {
            this.options = await dbContext.ConferenceApplicationOptions.FirstOrDefaultAsync(n => n.ConferenceId == Element.Conference.ConferenceId);
        }
        
    }
}
