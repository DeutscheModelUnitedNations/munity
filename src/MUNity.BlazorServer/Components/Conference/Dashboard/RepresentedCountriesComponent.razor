@using MUNity.Database.Models.Conference.Roles

@inject MunityContext dbContext

<div class="panel panel-inverse" data-sortable-id="index-1">
	<div class="panel-heading ui-sortable-handle">
		<h4 class="panel-title">
			Weltkarte vertretene Staaten
		</h4>
	</div>
	<MUNity.BlazorServer.Components.General.VectorMapComponent IsoToColor="@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry != null).Select(n => n.DelegateCountry.Iso).ToList()" />
	<div class="list-group">
		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			Afrika
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.Africa).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>

		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			Asien
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.Asia).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>

		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			Europa
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.Europe).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>

		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			North America
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.NorthAmerica).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>

		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			Ozeianien
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.Oceania).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>

		<a href="javascript:;" class="list-group-item rounded-0 list-group-item-action list-group-item-inverse d-flex justify-content-between align-items-center text-ellipsis">
			Südameria
			<span class="badge bg-teal fs-10px">
				@dbContext.Delegates.Where(n => n.Conference.ConferenceId == ConferenceId && n.DelegateCountry.Continent == EContinent.SouthAmerica).Select(n => n.DelegateCountry).Distinct().Count() 
			</span>
		</a>
	</div>
</div>

@code {
	[Parameter] public string ConferenceId { get; set; }
}
