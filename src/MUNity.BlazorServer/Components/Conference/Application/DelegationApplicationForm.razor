@    using Microsoft.EntityFrameworkCore
@    using MUNity.BlazorServer.Components.Conference.Application

@inject MUNity.Database.Context.MunityContext context
@inject UserManager<MUNity.Database.Models.User.MunityUser> userManager

@if (!saved)
{


    @if (application != null)
    {




        @if (step == 0)
        {
            <ApplicationUsersSelection ConferenceId="@ConferenceId" Application="application" UsersSelected="() => step = 1" />
        }
        else if (step == 1)
        {
            <div class="row">
                <button class="btn btn-primary" @onclick="() => step = 0">Zurück zur Benutzerauswahl</button>
            </div>
            <SelectableDelegationsComponent Application="@application" ConferenceId="@ConferenceId" DelegationsAdded="() => step = 2" />
        }
        else if (step == 2)
        {
            <DelegationApplicationFieldsComponent ConferenceId="@ConferenceId" Application="@application" Finished="() => step = 3" />
        }
        else if (step == 3)
        {
            <ApplicationReviewComponent Application="@application" />
        }
    }

}
else
{
    <div class="alert alert-success">Bewerbung abgeschickt</div>
}


@code {
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    [Parameter] public string ConferenceId { get; set; }

    private int step = 0;

    [Parameter] public EventCallback<int> StepChanged { get; set; }

    private MUNity.Database.Models.Conference.DelegationApplication application;

    private MUNity.Database.Models.User.MunityUser me;

    private bool saved;

    private bool error;

    private class AvailableDelegation
    {
        public string DelegationId { get; set; }

        public string Name { get; set; }

        public string Roles { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();



        application = new Database.Models.Conference.DelegationApplication()
        {
            Status = ApplicationStatuses.Writing
        };

        var claim = (await AuthStateTask)?.User;
        this.me = await userManager.GetUserAsync(claim);

        application.Users = new List<MUNity.Database.Models.Conference.DelegationApplicationUserEntry>();
        application.Users.Add(new Database.Models.Conference.DelegationApplicationUserEntry()
        {
            Application = application,
            CanWrite = true,
            Status = MUNityBase.DelegationApplicationUserEntryStatuses.Joined,
            User = me
        });

        application.DelegationWishes = new List<MUNity.Database.Models.Conference.DelegationApplicationPickedDelegation>();

        application.FormulaInputs = new List<Database.Models.Conference.ConferenceDelegationApplicationFieldInput>();


    }

    private void SendApplication()
    {
        application.Status = ApplicationStatuses.Pending;
        application.ApplyDate = DateTime.Now;
        context.DelegationApplications.Add(application);
        var recaff = context.SaveChanges();
        if (recaff > 0)
        {
            saved = true;
        }
        else
        {
            error = true;
        }
    }
}
