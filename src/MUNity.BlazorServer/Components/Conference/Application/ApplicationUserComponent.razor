@using MUNity.Database.Models.Conference
@using MUNity.Base

@if (User != null)
{

    <tr>
		<td class="field">
            @((User.CanWrite) ? "Autor " : null)
            @((User.User.IsShadowUser) ? "zu Munity eingeladen " : null)
            @((User.Status == DelegationApplicationUserEntryStatuses.Invited && !User.User.IsShadowUser) ? "Eingeladen " : null)
            @((User.Status == DelegationApplicationUserEntryStatuses.RequestJoining) ? "Möchte beitreten " : null)
        </td>
		<td>
            @((User.User.IsShadowUser) ? (User.User.Email) : $"{User.User.Forename} {User.User.Lastname}")
            <a href="javascript:;" @onclick="() => RemoveUser.InvokeAsync(this.User)" class="text-decoration-none text-danger fw-bold"><i class="fa fa-minus fa-fw"></i> Entfernen</a>
        </td>
	</tr>
}
else
{
    <div class="widget-list-item">
        ERROR LOADING A USER
    </div>
    <tr>
        <td colspan="2">ERROR LOADING USER</td>
    </tr>
}


@code {
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    [Parameter] public DelegationApplicationUserEntry User { get; set; }

    [Parameter] public EventCallback<DelegationApplicationUserEntry> RemoveUser { get; set; }

    private bool showDrowdown = false;

    private bool? isMe;

    private string dropDownStyle = "";

    private void ToggleMenu(MouseEventArgs args)
    {
        showDrowdown = !showDrowdown;
        dropDownStyle = $"position: absolute; inset: 0px auto auto 0px; margin: 0px; transform: translate({args.ClientX - 200}px, {args.ClientY - 250}px);";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var claim = (await AuthStateTask)?.User;
        if (claim != null)
        {
            isMe = claim.Identity.Name == User.User.UserName;
        }
    }
}
