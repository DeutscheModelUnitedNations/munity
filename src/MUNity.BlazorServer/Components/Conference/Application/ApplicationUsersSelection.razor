@using Microsoft.EntityFrameworkCore
@using MUNity.Schema.Conference

@inject Services.UserService userSerivce
@inject Services.ConferenceApplicationService applicationService
@inject Database.Context.MunityContext context
@inject NotificationService notificationService

@if (Application != null)
{

    @if (searchResult != null)
    {
        <div class="row">
            @if (searchResult.Status == FindUserForApplicationResult.ResultStatuses.AlreadyApplying)
            {
                <div class="alert alert-warning">Der/Die eigebene BenutzerIn kann nicht zur Bewerbung hinzugefügt werden, da er/sie sich bereits auf eine Rolle bei dieser Konferenz bewirbt.</div>
            }
            else if (searchResult.Status == FindUserForApplicationResult.ResultStatuses.AlreadyParticipating)
            {
                <div class="alert alert-warning">Der/Die eingebene BenutzerIn kann nicht zur Bewerbung hinzugefügt werden, da er/sie bereits eine Rolle auf dieser Konferenz hat.</div>
            }
            else if (searchResult.Status == FindUserForApplicationResult.ResultStatuses.NoUserFound)
            {
                <div class="alert alert-info">
                    Der/Die eingebene BenuterIn ist diesem System nicht bekannt. Sollten Sie wissen, dass diese Person kein Konto hat, können Sie diese mit einem einfachen Klick
                    <button class="btn btn-default" @onclick="() => AddShadowUser(searchInput)">Einladen.</button> Danach erhält er/sie eine E-Mail von uns mit einem Anmeldelink. Bitte achten Sie darauf, dass bis zum Ablauf der Anmeldephase alle angegebenen
                    Teilnehmenden dieser Bewerbung auch ein entsprechendes Konto benötigen.
                </div>
            }
        </div>
    }

    <div class="row profile-content">
        <div class="table-responsive form-inline">
			<table class="table table-profile align-middle">
				<thead>
					<tr>
						<th></th>
						<th>
							<h4>BenutzerInnen <small>An dieser Stelle können Personen zu der Bewerbung hinzugefügt werden.</small></h4>
						</th>
					</tr>
				</thead>
				<tbody>
                    @foreach(var user in Application.Users)
                    {
                        <ApplicationUserComponent User="@user" />
                    }

                    <tr>
						<td class="field">Einladen</td>
						<td>
                            <div class="input-group">
                                <div class="input-group-text">@@</div>
                                <input type="text" class="form-control" @bind="searchInput">
                                <button type="button" class="btn btn-indigo" @onclick="() => SearchUser()">Hinzufügen</button>
                            </div>
                        </td>
					</tr>
					<tr class="divider highlight">
						<td colspan="2"></td>
					</tr>
									
					<tr>
						<td class="field">Lehrkraft</td>
						<td>
                            <RadzenCheckBox TValue="bool" @bind-Value="@guestsConverted" Name="WithTeacherCheckBox" />
                            <RadzenLabel Text="Delegation mit Lehrkraft" Component="WithTeacherCheckBox" />
                        </td>
					</tr>

                    <tr>
                        <td></td>
                        <td>
                            <small>
                                Sofern Sie mit einer Lehrkraft kommen, geben Sie dies bitte hier an. Die Lehrkraft brauchen Sie <b>nicht</b> in diese Bewerbung mit aufnehmen.
                                Diese wird später durch ein dazu berechtigtes Teammitglied nach Annahme der Bewerbung in die Delegation, welche Sie dann erhalten mit aufgenommen.
                            </small>
                        </td>
                    </tr>


					<tr class="divider">
						<td colspan="2"></td>
					</tr>


					<tr>
						<td class="field">Offene Bewerbung</td>
						<td>
                            <RadzenCheckBox TValue="bool" @bind-Value="@Application.OpenToPublic" Name="OpenToPublicCheckBox" />
                            <RadzenLabel Text="offene Bewerbung" Component="OpenToPublicCheckBox" />
                        </td>
					</tr>

                    <tr>
                        <td></td>
                        <td>
                            <small>
                                Wenn Sie die Bewerbung für andere öffnen, können sich diese Benutzer auf ihre Bewerbung/Anmeldung bewerben. Danach können Sie frei entscheiden, ob sie diese Bewerbung annehmen.
                                Diese Funktion ist dann praktisch, wenn Sie mit ihrer momentanen Gruppe ihre Wunschdelegationen nicht voll bekommen.
                            </small>
                        </td>
                    </tr>

                    <tr>
                        <td class="field">Expose</td>
                        <td>
                            <RadzenTextArea class="form-control" Disabled="@(!Application.OpenToPublic)" @bind-Value="@Application.Expose" />
                        </td>
                    </tr>


					<tr class="highlight">
						<td class="field">&nbsp;</td>
						<td class="">
							<button type="submit" class="btn btn-primary" @onclick="() => UsersSelected.InvokeAsync()">Weiter zur Delegationsauswahl</button>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
    </div>
}
else
{
    <div class="alert alert-warning">Error detected: There is no Application given to this component. Try to reload the page, you may need to restart to apply.</div>
}


@code {

    [Parameter] public EventCallback UsersSelected { get; set; }

    [Parameter] public string ConferenceId { get; set; }

    [Parameter] public MUNity.Database.Models.Conference.DelegationApplication Application { get; set; }

    private bool guestsConverted
    {
        get => Application.GuestsCount != null && Application.GuestsCount.Value > 0;
        set
        {
            if (value)
                Application.GuestsCount = 1;
            else
                Application.GuestsCount = null;
        }
    }

    private FindUserForApplicationResult searchResult;

    private string searchInput;

    private void SearchUser()
    {
        searchResult = applicationService.FindUserToAddToDelegationApplication(searchInput, ConferenceId);
        if (searchResult.Status == FindUserForApplicationResult.ResultStatuses.CanBeAdded)
        {
            AddUser(searchResult.UserName);
        }
    }

    private void AddUser(string username)
    {
        var user = userSerivce.GetUserByUsername(searchResult.UserName);
        if (user == null)
        {
            notificationService.Notify(NotificationSeverity.Error, "Benutzer nicht gefunden", $"Es wurde kein Benutzer mit dem Benutzernamen: {searchResult.UserName} gefunden.");
        }
        else
        {
            if (Application.Users.All(n => n.User.UserName != user.UserName))
            {
                Application.Users.Add(new Database.Models.Conference.DelegationApplicationUserEntry()
                {
                    Application = this.Application,
                    CanWrite = false,
                    Message = "Sie wurden eingeladen durch den/die Erstellerin dieser Anmeldung",
                    Status = DelegationApplicationUserEntryStatuses.Invited,
                    User = user
                });

                this.searchInput = "";
                this.searchResult = null;
            }
            else
            {
                notificationService.Notify(NotificationSeverity.Warning, "Bereits vorhaden", "Die angegebene Person ist bereits Teil dieser Bewerbung");
            }
        }


    }

    private async Task AddShadowUser(string mail)
    {
        var shadowUser = await userSerivce.CreateShadowUser(mail);
        if (shadowUser != null)
        {
            Application.Users.Add(new Database.Models.Conference.DelegationApplicationUserEntry()
            {
                Application = this.Application,
                CanWrite = false,
                Message = "Sie wurden eingeladen durch den/die Erstellerin dieser Anmeldung",
                Status = DelegationApplicationUserEntryStatuses.Invited,
                User = shadowUser
            });

            // Send a Mail

            this.searchResult = null;
            this.searchInput = "";

            await this.InvokeAsync(StateHasChanged);
        }
        else
        {
            notificationService.Notify(NotificationSeverity.Error, "Einladung fehlgeschlagen", "Die Einladung des Benutzers ist fehlgeschlagen. Ursachen können eine ungültige oder gesperrte E-Mail Adresse sein.");
        }
    }


}
