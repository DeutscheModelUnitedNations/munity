@using MUNity.Database.General
@inject MunityContext dbContext
@inject Services.ListOfSpeakersService losService



@if (ViewModel != null)
{
    @if (ViewModel.Status == ESpeakerListStatus.Speaking || ViewModel.Status == ESpeakerListStatus.Question)
    {
        <button class="btn btn-warning" @onclick="@ViewModel.Pause">Redner pausieren</button>
    }
    else
    {
        if (ViewModel.CurrentSpeaker != null)
        {
            <button class="btn btn-success" @onclick="@ViewModel.ResumeSpeaker">Redezeit starten</button>
        }

        if (ViewModel.CurrentQuestion != null)
        {
            <button class="btn btn-success" @onclick="@ViewModel.ResumeQuestion">Frage starten</button>
        }

        if (ViewModel.Speakers.Any())
        {
            <button class="btn btn-primary" @onclick="() => ViewModel.NextSpeaker()">Nächste/r RednerIn</button>
        }

        @if (ViewModel.Questions.Any())
        {
            <button class="btn btn-primary" @onclick="() => ViewModel.NextQuestion()">Nächste Frage</button>
        }

    }

    <div class="row">
        <div class="col-2">
            <div class="form-group">
                <label>Redezeit</label>
                <RadzenMask Mask="**:**" CharacterPattern="[0-9]" Placeholder="03:00" Name="SSN" @bind-Value=@inputSpeakerTime Style="width: 100%;" />
            </div>
        </div>
        <div class="col-2">
            <div class="form-group">
                <label>Fragezeit</label>
                <RadzenMask Mask="**:**" CharacterPattern="[0-9]" Placeholder="03:00" Name="SSN" @bind-Value=@inputQuestionTime Style="width: 100%;" />
            </div>
        </div>

    </div>

    <div class="form-group mb-3">
        <label>Name</label>
        
        <div class="btn-group">
            <button class="btn btn-sm btn-default" @onclick="AddToSpeakers">Auf die Redeliste</button>
            <button class="btn btn-sm btn-default" @onclick="AddToQuestions">Auf Fragen und Kurzbemerkungen</button>
        </div>
    </div>

    <div class="row">

        <div class="col-6">
            <ul>
                @foreach(var question in ViewModel.Questions)
                {
                    <li><img src="@($"/img/flags/small/{question.Iso}.png")" > @question.Name</li>
                }
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="col-6">
            <LoSSpeakersComponent ViewModel="@ViewModel" KnownCountries="@knownCountries" />
        </div>
    </div>
}
else
{
    <p>No ViewModel was supplied to this view!</p>
}



@code {
    [Parameter] public ViewModels.ListOfSpeakers.ListOfSpeakersViewModel ViewModel { get; set; }

    private string newSpeakerName = "";

    private string inputSpeakerTime;

    private string inputQuestionTime;

    private List<Country> knownCountries;

    private Timer updateTimer;

    

    private void AddToSpeakers()
    {
        if (ViewModel != null && !string.IsNullOrEmpty(newSpeakerName))
        {
            var foundCountry = knownCountries.FirstOrDefault(n => n.Name == newSpeakerName);
            losService.AddSpeaker(ViewModel.ListOfSpeakersId, newSpeakerName, foundCountry?.Iso ?? "un");  
        }
    }

    private void AddToQuestions()
    {
        if (ViewModel != null && !string.IsNullOrEmpty(newSpeakerName))
        {
            var foundCountry = knownCountries.FirstOrDefault(n => n.Name == newSpeakerName);
            losService.AddQuestion(ViewModel.ListOfSpeakersId, newSpeakerName, foundCountry?.Iso ?? "un");  
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.knownCountries = dbContext.Countries.ToList();
        InvokeAsync(RefreshIfNeeded);
    }

    private async Task RefreshIfNeeded()
    {
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000);
        await RefreshIfNeeded();
    }
}
