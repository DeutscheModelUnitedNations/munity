@using MUNity.Database.General
@inject MunityContext dbContext
@inject Services.ListOfSpeakersService losService


@if (ViewModel != null)
{
    <label>Bearbeitungsmodus</label>
    <RadzenSwitch @bind-Value="@allowEdit" />

    @if (allowEdit)
    {
        @if (ViewModel.Status == ESpeakerListStatus.Speaking || ViewModel.Status == ESpeakerListStatus.Question || ViewModel.Status == ESpeakerListStatus.Answer)
        {
            <button class="btn btn-warning" @onclick="@ViewModel.Pause">Redner/in pausieren</button>
        }
        else
        {
            if (ViewModel.CurrentSpeaker != null)
            {
                @if (ViewModel.Status == ESpeakerListStatus.Stopped || ViewModel.Status == ESpeakerListStatus.QuestionPaused)
                {
                    <button class="btn btn-success" @onclick="@ViewModel.ResumeSpeaker">Redezeit starten</button>
                    <button class="btn btn-default" @onclick="@ViewModel.StartAnswer">Antwort starten</button>
                }
                else if (ViewModel.Status == ESpeakerListStatus.AnswerPaused)
                {
                    <button class="btn btn-success" @onclick="@ViewModel.ResumeSpeaker">Antwort fortsetzen</button>
                    <button class="btn btn-default" @onclick="@ViewModel.StartAnswer">Neue Antwort starten</button>
                }
                else if (ViewModel.Status == ESpeakerListStatus.SpeakerPaused)
                {
                    <button class="btn btn-success" @onclick="@ViewModel.ResumeSpeaker">Rede fortsetzen</button>
                    <button class="btn btn-default" @onclick="@ViewModel.StartAnswer">Antwort starten</button>
                }
            }

            if (ViewModel.CurrentQuestion != null)
            {
                <button class="btn btn-success" @onclick="@ViewModel.ResumeQuestion">
                    @((ViewModel.Status == ESpeakerListStatus.Stopped || ViewModel.Status == ESpeakerListStatus.AnswerPaused || ViewModel.Status == ESpeakerListStatus.SpeakerPaused) ? "Frage starten" : "Frage fortsetzen")
                </button>
            }
        }
    }
    

    <div class="row">
        <div class="col-6">
            <LoSSpeakersComponent ViewModel="@ViewModel" KnownCountries="@knownCountries" AllowEdit="@allowEdit" />
        </div>

        <div class="col-6">
            <LoSQuestionsComponent ViewModel="@ViewModel" KnownCountries="@knownCountries" AllowEdit="@allowEdit" />
        </div>
    </div>
}
else
{
    <p>No ViewModel was supplied to this view!</p>
}



@code {
    [Parameter] public string ListOfSpeakersId { get; set; }

    private ViewModels.ListOfSpeakers.ListOfSpeakersViewModel ViewModel;

    private string newSpeakerName = "";

    private bool allowEdit = true;

    private string inputQuestionTime;

    private List<Country> knownCountries;

    private void AddToSpeakers()
    {
        if (ViewModel != null && !string.IsNullOrEmpty(newSpeakerName))
        {
            var foundCountry = knownCountries.FirstOrDefault(n => n.Name == newSpeakerName);
            losService.AddSpeaker(ViewModel.ListOfSpeakersId, newSpeakerName, foundCountry?.Iso ?? "un");  
        }
    }

    private void AddToQuestions()
    {
        if (ViewModel != null && !string.IsNullOrEmpty(newSpeakerName))
        {
            var foundCountry = knownCountries.FirstOrDefault(n => n.Name == newSpeakerName);
            losService.AddQuestion(ViewModel.ListOfSpeakersId, newSpeakerName, foundCountry?.Iso ?? "un");  
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.knownCountries = dbContext.Countries.ToList();
        InvokeAsync(RefreshIfNeeded);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.ViewModel = losService.GetViewModel(this.ListOfSpeakersId);
    }

    private async Task RefreshIfNeeded()
    {
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1000);
        await RefreshIfNeeded();
    }
}
