@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Resolution

@inject BServices.VirtualCommiteeParticipationService vcParticipationService

<div class="card border-0 mb-1" @onmouseenter="() => displayTools = true" @onmouseleave="() => displayTools = false"
	@onclick="() => { if (htmlText.Length == 0 && !isEditing) { isEditing = true;}}">
	<div class="card-body">
		<div class="row">
			@if (isEditing == false)
			{
				@if (string.IsNullOrWhiteSpace(Paragraph.Text))
				{
					<button class="btn btn-sm btn-default" @onclick="StartEdit">Bearbeiten</button>
				}
				else
				{
					<p @ondblclick="StartEdit" class="card-text">@((MarkupString)Paragraph.Text)</p>
				}
			}
			else
			{
				
				<RadzenHtmlEditor @bind-Value="@Paragraph.Text" style="max-height: 300px; width: 100%; margin-bottom: 1rem;">
					<a @onclick="Save" class="btn btn-primary btn-icon btn-lg me-1">
					  <i class="fa fa-save"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<a @onclick="MoveUp" class="btn btn-info btn-icon btn-lg me-1 @((IsFirst) ? "disabled": null)">
					  <i class="fa fa-arrow-up"></i>
					</a>

					<a @onclick="MoveDown" class="btn btn-info btn-icon btn-lg me-1 @((IsLast) ? "disabled": null)">
					  <i class="fa fa-arrow-down"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorUndo />
					<RadzenHtmlEditorRedo />
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorBold />
					<RadzenHtmlEditorItalic />
					<RadzenHtmlEditorUnderline />
					<RadzenHtmlEditorStrikeThrough />
					<RadzenHtmlEditorSeparator />
					<a @onclick="Remove" class="btn btn-danger btn-icon btn-lg me-1">
					  <i class="fa fa-trash"></i>
					</a>
				</RadzenHtmlEditor>
			}

		</div>
		
@*		@if (displayTools)
		{
			<p class="card-text text-gray">Last updated 3 mins ago</p>
			
		}*@
	</div>
</div>

@code {
	[EditorRequired][Parameter] public ResaPreambleParagraph Paragraph { get; set; }

	[EditorRequired][Parameter] public ResolutionExchange Exchange { get; set; }

	[Parameter]public bool IsFirst { get; set; }

	[Parameter]public bool IsLast { get; set; }

	private bool displayTools = false;

	private bool isEditing = false;

	private string htmlText = "Präambel Paragraph <br />Mit mehreren Zeilen <br />Anklicken um zu bearbeiten";



	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if (vcParticipationService?.LastEditedPreambleParagraphId != null && this.Paragraph.ResaPreambleParagraphId == vcParticipationService.LastEditedPreambleParagraphId)
		{

			this.isEditing = true;
		}

		if (vcParticipationService != null)
		{
			this.vcParticipationService.EditingPreambleParagraphChanged += (s, newId) =>
			{
				if (newId != this.Paragraph.ResaPreambleParagraphId)
				{
					this.isEditing = false;
					InvokeAsync(StateHasChanged);
				}
			};
		}
	}

	private void StartEdit()
	{
		this.isEditing = true;
		vcParticipationService.LastEditedPreambleParagraphId = this.Paragraph.ResaPreambleParagraphId;
	}

	private void Save()
	{
		Exchange.UpdatePreambleParagraph(Paragraph);
		isEditing = false;
		vcParticipationService.LastEditedPreambleParagraphId = null;
	}

	private void MoveUp()
	{
		Exchange.MovePreambleParagraphUp(Paragraph);
		this.isEditing = false;
	}

	private void MoveDown()
	{
		Exchange.MovePreambleParagraphDown(Paragraph);
		this.isEditing = false;
	}

	private void Remove()
	{
		Exchange.RemovePreambleParagraph(Paragraph);
		this.isEditing = false;
		this.vcParticipationService.LastEditedPreambleParagraphId = null;
	}
}
