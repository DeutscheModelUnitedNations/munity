@using MUNity.BlazorServer.BServices
@inject BServices.ResolutionExchangeService resolutionExchangeService
@inject BServices.VirtualCommiteeParticipationService vcParticipationService

@if (exchange != null)
{
<div class="row">
    <div class="panel panel-inverse col-12">
        <div class="panel-heading">
            @if (((exchange.Resolution.State == EResolutionStates.Private || 
            exchange.Resolution.State == EResolutionStates.Public) && exchange.Resolution.SubmitterRole?.RoleId == vcParticipationService.RoleId))
            {
                <label class="me-2">Anderen erlauben mit zu schreiben</label>
                <RadzenSwitch @bind-Value=@allowOthersToEdit class="me-2" />
                <button class="btn btn-default" @onclick="SubmitResolution">Einreichen</button>
            }
            else if (exchange.Resolution.State == EResolutionStates.Submitted)
            {
                <h3 class="panel-title">Eingereichte Resolution</h3>
            }
            else if (exchange.Resolution.State == EResolutionStates.Discussion)
            {
                <h3 class="panel-title">Resolution wird behandelt. Änderungsanträge offen.</h3>
            }
            else
            {
                <h3>Resolution</h3>
            }

            <AuthorizeView>
                <Authorized>
                    @if (exchange.Resolution.State == EResolutionStates.Submitted || exchange.Resolution.State == EResolutionStates.Discussion)
                    {
                        <label class="me-2">Änderungsanträge erlauben</label>
                        <RadzenSwitch @bind-Value=@setDiscussionMode />
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
</div>


    <div class="row">
        <div class="col-12">
            <ResolutionHeaderEditorComponent Exchange=@exchange CanEdit=@canEdit />
        </div>
    </div>

    <PreambleEditorComponent Exchange=@exchange CanEdit=@canEdit />
    <OperativeSectionComponent Exchange=@exchange CanEdit=@canEdit />
}
else
{
    <p>Resolution @ResolutionId wird vorbereitet oder nicht gefunden...</p>
}


@code {
    [Parameter] public string ResolutionId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool isAuthed = false;

    private bool canEdit;

    private ResolutionExchange exchange;
    private bool allowOthersToEdit
    {
        get
        {
            return this.exchange.Resolution.State == EResolutionStates.Public;
        }
        set
        {
            if (value)
            {
                this.exchange.Resolution.State = EResolutionStates.Public;
                this.exchange.UpdateResaElement();
            }
            else
            {
                this.exchange.Resolution.State = EResolutionStates.Private;
                this.exchange.UpdateResaElement();
            }
        }
    }

    private bool setDiscussionMode
    {
        get
        {
            return this.exchange.Resolution.State == EResolutionStates.Discussion;
        }
        set
        {
            if (value)
            {
                this.exchange.Resolution.State = EResolutionStates.Discussion;
                this.exchange.UpdateResaElement();
            }
            else
            {
                this.exchange.Resolution.State = EResolutionStates.Submitted;
                this.exchange.UpdateResaElement();
            }
        }
    }

    private void SubmitResolution()
    {
        this.exchange.Resolution.State = EResolutionStates.Submitted;
        this.exchange.UpdateResaElement();
    }

    private void LoadEditAuth()
    {
        this.canEdit = exchange.Resolution.State == EResolutionStates.Public ||
            (exchange.Resolution.State == EResolutionStates.Private && vcParticipationService.RoleId != null && exchange.Resolution.SubmitterRole.RoleId == vcParticipationService.RoleId) ||
            isAuthed;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        var taskResult = await AuthStateTask;
        isAuthed = taskResult?.User?.Identity != null && taskResult.User.Identity.IsAuthenticated;
        base.OnParametersSet();
        exchange = resolutionExchangeService.GetResolution(ResolutionId);

        LoadEditAuth();
        vcParticipationService.Registered += delegate { LoadEditAuth(); };
    }
}
