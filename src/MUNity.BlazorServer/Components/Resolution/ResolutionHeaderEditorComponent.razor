@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Resolution

@inject BServices.VirtualCommiteeParticipationService vcParticipationService

<div class="card border-0 mb-1">
	<div class="card-body">
		@if (!editTopic)
		{
			<h4 class="card-title" @ondblclick="StartEditTopic">@Exchange.Resolution?.Topic</h4>
		}
		else
		{
			<div class="input-group">
				<input type="text" class="form-control fs-4" @bind-value=@Exchange.Resolution.Topic>
				<button type="button" class="btn btn-primary" @onclick="() => {Exchange.UpdateResaElement(); editTopic = false; }">Speichern</button>
			</div>
		}

		<p class="card-text">Einbringer: @Exchange.Resolution?.SubmitterName</p>
		<p class="card-text">Unterstützer:
			@string.Join(",", Exchange.Resolution.Supporters.Select(n => n.Role.RoleName))
			<br />
			@if (vcParticipationService.RoleId != null && Exchange.Resolution.SubmitterRole != null && 
			vcParticipationService.RoleId != Exchange.Resolution.SubmitterRole.RoleId && 
			vcParticipationService.DelegateType != "NA" &&
			(!string.IsNullOrEmpty(CommitteeContext) && !vcParticipationService.IsActiveForCommittee(CommitteeContext) != false))
			{
				if (Exchange.Resolution.Supporters.All(n => n.Role.RoleId != vcParticipationService.RoleId))
				{
					<button class="btn btn-sm btn-primary" @onclick="Support">Unterstützen</button>
				}
				else
				{
					<button class="btn btn-sm btn-outline-primary" @onclick="RevokeSupport">Unterstützung zurückziehen</button>
				}
			}
		</p>
		<p class="card-text">@Exchange.Resolution?.CommitteeName.ToUpper(),</p>
		<p class="card-text text-gray">Last updated 3 mins ago</p>
	</div>
</div>
@code {
	[EditorRequired][Parameter]public bool CanEdit { get; set; }

	[Parameter] public ResolutionExchange Exchange { get; set; }

	[CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

	[Parameter] public string CommitteeContext { get; set; }

	private bool editTopic = false;



	private void StartEditTopic()
	{
		if (CanEdit)
		{
			editTopic = true;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		if (vcParticipationService != null)
		{
			vcParticipationService.Registered += delegate { InvokeAsync(StateHasChanged); };
		}
	}

	private void Support()
	{
		if (vcParticipationService.RoleId != null)
		{
			Exchange.SupportResolution(Exchange.Resolution, vcParticipationService.RoleId.Value);
		}
	}

	public void RevokeSupport()
	{
		if (vcParticipationService.RoleId != null)
		{
			Exchange.RevokeSupport(Exchange.Resolution, vcParticipationService.RoleId.Value);
		}
	}
}
