@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Resolution

@inject BServices.VirtualCommiteeParticipationService vcParticipationService

<div class="card border-0 mb-1"
	@onclick="() => { if (htmlText.Length == 0 && !isEditing) { isEditing = true;}}">
	<div class="card-body">
		<div class="row">
			@if (isEditing == false)
			{
				@if (!string.IsNullOrEmpty(Paragraph.Text))
				{
					<p @ondblclick="StartEdit" class="card-text"><span>@(Index).</span> @((MarkupString)Paragraph.Text)</p>
				}
				else
				{
					<span>@(Index)</span> <button class="btn btn-sm btn-default" @onclick="StartEdit">Bearbeiten</button>
				}
			}
			else
			{
				<RadzenHtmlEditor @bind-Value="@Paragraph.Text" style="max-height: 300px; width: 100%; margin-bottom: 1rem;">
					<a @onclick="Save" class="btn btn-primary btn-icon btn-lg me-1">
					  <i class="fa fa-save"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<a @onclick="MoveUp" class="btn btn-info btn-icon btn-lg me-1 @((IsFirst) ? "disabled": null)">
					  <i class="fa fa-arrow-up"></i>
					</a>

					<a @onclick="MoveDown" class="btn btn-info btn-icon btn-lg me-1 @((IsLast) ? "disabled": null)">
					  <i class="fa fa-arrow-down"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorUndo />
					<RadzenHtmlEditorRedo />
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorBold />
					<RadzenHtmlEditorItalic />
					<RadzenHtmlEditorUnderline />
					<RadzenHtmlEditorStrikeThrough />
					<RadzenHtmlEditorSeparator />
					<a @onclick="Remove" class="btn btn-danger btn-icon btn-lg me-1">
					  <i class="fa fa-trash"></i>
					</a>
				</RadzenHtmlEditor>
			}

		</div>
		<div class="row">
			<div class="col-12">
				@if (Paragraph.DeleteAmendments.Count > 0)
				{
					<span class="badge bg-danger me-2 cursor-pointer" title="@($"Eingereicht durch: {string.Join(",", Paragraph.DeleteAmendments.Select(n => n.Submitter?.RoleName))}")" @onclick="() => showDeleteAmendmentModal = true">@Paragraph.DeleteAmendments.Count Anträge auf Steichung</span>
				}
				
				@if (Paragraph.ChangeAmendments.Count > 0)
				{
					<span class="badge bg-warning me-2 cursor-pointer" title="@($"Eingereicht durch: {string.Join(",", Paragraph.ChangeAmendments.Select(n => n.Submitter?.RoleName))}")" @onclick="() => showChangeAmendmentsModal = true">@Paragraph.ChangeAmendments.Count Anträge auf Textänderung</span>
				}
				
			</div>
			
		</div>

@*		@if (HasChild)
		{
			<div class="row">
				<OperativeParagraphComponent />
			</div>
		}*@

	</div>
</div>

@if (showAmendmentModal)
{
	<div class="modal-backdrop" style="opacity: 25%"></div>
	<div class="modal show" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Änderungsantrag einreichen</h4>
					<button type="button" class="btn-close" @onclick="() => showAmendmentModal = false"></button>
				</div>
				<div class="modal-body">
					<div class="btn-group btn-group-horizontal w-100">
						<button class="btn @((amendmentMode == AmendmentModes.Remove) ? "btn-primary" : "btn-outline-primary") @((!allowDeleteAmendement) ? "disabled" : null)" @onclick="() => amendmentMode = AmendmentModes.Remove"><i class="fa fa-strikethrough"></i> Streichen</button>
						<button class="btn @((amendmentMode == AmendmentModes.Change) ? "btn-primary" : "btn-outline-primary")" @onclick="() => amendmentMode = AmendmentModes.Change" ><i class="fa fa-pen"></i> Textänderung</button>
						<button class="btn @((amendmentMode == AmendmentModes.Move) ? "btn-primary" : "btn-outline-primary")" @onclick="() => amendmentMode = AmendmentModes.Move"><i class="fa fa-sort"></i> Verschieben</button>
					</div>

					@if (amendmentMode == AmendmentModes.Change)
					{
						<RadzenHtmlEditor class="mt-2" @bind-Value="@newText" style="max-height: 300px; width: 100%; margin-bottom: 1rem;">
						<RadzenHtmlEditorSeparator />
						<RadzenHtmlEditorUndo />
						<RadzenHtmlEditorRedo />
						<RadzenHtmlEditorSeparator />
						<RadzenHtmlEditorBold />
						<RadzenHtmlEditorItalic />
						<RadzenHtmlEditorUnderline />
						<RadzenHtmlEditorStrikeThrough />
						<RadzenHtmlEditorSeparator />
					</RadzenHtmlEditor>
					}
				</div>
				<div class="modal-footer">
					<a class="btn btn-primary @((!allowSubmitAmendment) ? "disabled": null)" @onclick="AddAmendment">Einreichen</a>
					<a class="btn btn-white" @onclick="() => showAmendmentModal = false">Abbrechen</a>
				</div>
			</div>
		</div>
	</div>
}

@if (showDeleteAmendmentModal)
{
	<div class="modal-backdrop" style="opacity: 50%"></div>
	<div class="modal show " style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Änderungsanträge auf Streichen</h4>
					<button type="button" class="btn-close" @onclick="() => showDeleteAmendmentModal = false"></button>
				</div>
				<div class="modal-body">
					<table class="table">
						<thead>
							<tr>
								<td>Eingebracht durch</td>
								<td>Unterstützt durch</td>
								<td>Zeitstempel</td>
								<td>Aktion</td>
							</tr>
						</thead>
						<tbody>
							@foreach(var amendment in Paragraph.DeleteAmendments)
							{
								<tr>
									<td>@amendment.Submitter?.RoleName</td>
									<td>
										@if (amendment.Supporters != null && amendment.Supporters.Count > 0)
										{
											<div class="badge bg-primary me-2">@amendment.Supporters.Count</div>
											@string.Join(",", amendment.Supporters.Select(n => n.Role?.RoleName))
										}
										
									</td>
									<td>@amendment.SubmitTime</td>
									<td>
										@if (vcParticipationService.RoleId != null && amendment.Submitter?.RoleId == vcParticipationService.RoleId)
										{
											<button class="btn btn-default btn-sm" @onclick="() => RevokeDeleteAmendment(amendment)">Zurückziehen</button>
										}
										else
										{

											if (amendment.Supporters.All(n => n.Role?.RoleId != vcParticipationService.RoleId))
											{
												<button class="btn btn-default btn-sm" @onclick="() => SupportAmendment(amendment)">Unterstützen</button>
											}
											else
											{
												<button class="btn btn-default btn-sm" @onclick="() => RevokeSupport(amendment)">Unterstützung zurückziehen</button>
											}
										}

										<AuthorizeView>
											<Authorized>
												@if (!showSecureRemoveAmendment)
												{
													<button class="btn btn-primary" @onclick="() => showSecureRemoveAmendment = true"><i class="fa fa-check"></i> Annehmen</button>
													<button class="btn btn-default"><i class="fa fa-vote"></i> Zur Abstimmung stellen</button>
													<button class="btn btn-danger"><i class="fa fa-trash"></i> Ablehnen</button>
												}
												else
												{
													<p>Annehmen dieses Änderungsantrag hat zur Folge, dass der Absatz, alle Unteransätze und Anträge entgültig gelöscht werden.</p>
													<button class="btn btn-primary" @onclick="() => SubmitAmendment(amendment)">Ja - Anwenden</button>
													<button class="btn btn-default" @onclick="() => showSecureRemoveAmendment = false">Abbrechen</button>
												}

											</Authorized>
										</AuthorizeView>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div class="modal-footer">
					<a class="btn btn-white" @onclick="() => showDeleteAmendmentModal = false">Schließen</a>
				</div>
			</div>
		</div>
	</div>
}

@if (showChangeAmendmentsModal)
{
	<div class="modal-backdrop" style="opacity: 50%"></div>
	<div class="modal show " style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Änderungsanträge auf Streichen</h4>
					<button type="button" class="btn-close" @onclick="() => showChangeAmendmentsModal = false"></button>
				</div>
				<div class="modal-body">
					<div class="accordion" id="accordion">
						@foreach(var amendment in Paragraph.ChangeAmendments)
						{
							<ChangeAmendmentAccItem Amendment=@amendment 
							RevokeAmendment=RevokeChangeAmendment 
							RevokeSupport=RevokeSupport 
							SubmitAmendment=SubmitAmendment 
							SupportAmendment=SupportAmendment />
						}
					</div>

				</div>
				<div class="modal-footer">
					<a class="btn btn-white" @onclick="() => showChangeAmendmentsModal = false">Schließen</a>
				</div>
			</div>
		</div>
	</div>
}


@code {
	[EditorRequired][Parameter]public bool CanEdit { get; set; }

	[EditorRequired][Parameter] public ResaOperativeParagraph Paragraph { get; set; }

	[EditorRequired][Parameter] public ResolutionExchange Exchange { get; set; }

	[Parameter] public bool IsFirst { get; set; }

	[Parameter] public bool IsLast { get; set; }

	[Parameter] public int Index { get; set; }

	[CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

	private bool showAmendmentModal = false;

	private bool showDeleteAmendmentModal = false;

	private bool showChangeAmendmentsModal = false;

	private bool showSecureRemoveAmendment = false;

	private enum AmendmentModes
	{
		Remove,
		Change,
		Move
	}

	private string newText;

	private AmendmentModes amendmentMode;

	private bool isEditing = false;

	private bool isAuthed = false;

	private string htmlText = "1. Operativ Paragraph <br />Mit mehreren Zeilen <br />Anklicken um zu bearbeiten.";

	private bool allowDeleteAmendement
	{
		get
		{
			return Paragraph.DeleteAmendments.All(n => n.Submitter.RoleId != vcParticipationService.RoleId);
		}
	}

	private bool allowSubmitAmendment
	{
		get
		{
			if (amendmentMode == AmendmentModes.Remove)
				return allowDeleteAmendement;
			return true;
		}
	}

	private void StartEdit()
	{
		if (CanEdit)
		{
			vcParticipationService.LastEditedOperativeParagraphId = this.Paragraph.ResaOperativeParagraphId;
			this.isEditing = true;
		}
		else if (Exchange.Resolution.State == EResolutionStates.Discussion)
		{
			showAmendmentModal = true;
		}

	}

	private void Save()
	{
		Exchange.UpdateOperativeParagraph(this.Paragraph);
		vcParticipationService.LastEditedOperativeParagraphId = null;
		this.newText = Paragraph.Text;
		this.isEditing = false;
	}

	private void MoveUp()
	{
		Exchange.MoveOperativeParagraphUp(this.Paragraph);
		isEditing = false;
	}

	private void MoveDown()
	{
		Exchange.MoveOperativeParagraphDown(this.Paragraph);
		isEditing = false;
	}

	private void Remove()
	{
		Exchange.RemoveOperativeParagraph(this.Paragraph);
		isEditing = false;
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		this.newText = Paragraph.Text;
		var taskResult = await AuthStateTask;
		isAuthed = taskResult?.User.Identity != null && taskResult.User.Identity.IsAuthenticated;
		Exchange.OperativeParagraphChanged += (sender, para) =>
		{
			if (para == this.Paragraph)
			{
				InvokeAsync(StateHasChanged);
			}
		};

		if(vcParticipationService.LastEditedOperativeParagraphId == this.Paragraph.ResaOperativeParagraphId)
		{
			this.isEditing = true;
		}


	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		vcParticipationService.EditingOperativeParagraphChanged += (sender, paraId) =>
		{
			if (paraId != this.Paragraph.ResaOperativeParagraphId)
			{
				this.isEditing = false;
				InvokeAsync(StateHasChanged);
			}

		};
	}

	private void AddAmendment()
	{
		if (this.amendmentMode == AmendmentModes.Remove)
		{
			this.AddRemoveAmendment();
		}
		else if (this.amendmentMode == AmendmentModes.Change)
		{
			AddChangeAmendment();
		}
	}

	private void AddRemoveAmendment()
	{
		if (vcParticipationService?.RoleId != null)
		{
			Exchange.AddRemoveAmendment(this.Paragraph, vcParticipationService.RoleId.Value);
			this.showAmendmentModal = false;
		}
	}

	private void AddChangeAmendment()
	{
		if (vcParticipationService?.RoleId != null)
		{
			Exchange.AddChangeAmendment(this.Paragraph, vcParticipationService.RoleId.Value, newText);
			this.showAmendmentModal = false;
		}
	}

	private void RevokeDeleteAmendment(ResaDeleteAmendment amendment)
	{
		if (amendment != null)
		{
			Exchange.RevokeDeleteAmendment(amendment);
		}
	}

	private void RevokeChangeAmendment(ResaChangeAmendment amendment)
	{
		if (amendment != null)
		{
			Exchange.RevokeChangeAmendment(amendment);
		}
	}

	private void SupportAmendment(ResaAmendment amendment)
	{
		if (amendment != null && vcParticipationService.RoleId.HasValue)
		{
			Exchange.SupportAmendment(amendment, vcParticipationService.RoleId.Value);
		}
	}

	private void RevokeSupport(ResaAmendment amendment)
	{
		if (amendment != null && vcParticipationService.RoleId != null)
		{
			Exchange.RevokeSupport(amendment, vcParticipationService.RoleId.Value);
		}
	}

	private void SubmitAmendment(ResaAmendment amendment)
	{
		this.Exchange?.SubmitAmendment(amendment);
	}
}
