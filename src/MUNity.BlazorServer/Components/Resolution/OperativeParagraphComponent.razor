@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Resolution

@inject BServices.VirtualCommiteeParticipationService vcParticipationService

<div class="card border-0 mb-1"
	@onclick="() => { if (htmlText.Length == 0 && !isEditing) { isEditing = true;}}">
	<div class="card-body">
		<div class="row">
			@if (isEditing == false)
			{
				@if (!string.IsNullOrEmpty(Paragraph.Text))
				{
					<p @ondblclick="StartEdit" class="card-text"><span>@(Index).</span> @((MarkupString)Paragraph.Text)</p>
				}
				else
				{
					<span>@(Index)</span> <button class="btn btn-sm btn-default" @onclick="StartEdit">Bearbeiten</button>
				}
			}
			else
			{
				<RadzenHtmlEditor @bind-Value="@Paragraph.Text" style="max-height: 300px; width: 100%; margin-bottom: 1rem;">
					<a @onclick="Save" class="btn btn-primary btn-icon btn-lg me-1">
					  <i class="fa fa-save"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<a @onclick="MoveUp" class="btn btn-info btn-icon btn-lg me-1 @((IsFirst) ? "disabled": null)">
					  <i class="fa fa-arrow-up"></i>
					</a>

					<a @onclick="MoveDown" class="btn btn-info btn-icon btn-lg me-1 @((IsLast) ? "disabled": null)">
					  <i class="fa fa-arrow-down"></i>
					</a>
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorUndo />
					<RadzenHtmlEditorRedo />
					<RadzenHtmlEditorSeparator />
					<RadzenHtmlEditorBold />
					<RadzenHtmlEditorItalic />
					<RadzenHtmlEditorUnderline />
					<RadzenHtmlEditorStrikeThrough />
					<RadzenHtmlEditorSeparator />
					<a @onclick="Remove" class="btn btn-danger btn-icon btn-lg me-1">
					  <i class="fa fa-trash"></i>
					</a>
				</RadzenHtmlEditor>
			}

		</div>
		<div class="row">
			<div class="col-12">
				@if (Paragraph.DeleteAmendments.Count > 0)
				{
					<span class="badge bg-danger me-2">@Paragraph.DeleteAmendments.Count Anträge auf Steichung</span>
				}
				
				@if (Paragraph.ChangeAmendments.Count > 0)
				{
					<span class="badge bg-warning">@Paragraph.ChangeAmendments.Count Anträge auf Textänderung</span>
				}
				
			</div>
			
		</div>

@*		@if (HasChild)
		{
			<div class="row">
				<OperativeParagraphComponent />
			</div>
		}*@

	</div>
</div>

@if (showAmendmentModal)
{
	<div class="modal-backdrop" style="opacity: 25%"></div>
	<div class="modal show" id="modal-without-animation" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Änderungsantrag einreichen</h4>
					<button type="button" class="btn-close" @onclick="() => showAmendmentModal = false"></button>
				</div>
				<div class="modal-body">
					<div class="btn-group btn-group-horizontal w-100">
						<button class="btn @((amendmentMode == AmendmentModes.Remove) ? "btn-primary" : "btn-outline-primary")" @onclick="() => amendmentMode = AmendmentModes.Remove"><i class="fa fa-strikethrough"></i> Streichen</button>
						<button class="btn @((amendmentMode == AmendmentModes.Change) ? "btn-primary" : "btn-outline-primary")" @onclick="() => amendmentMode = AmendmentModes.Change"><i class="fa fa-pen"></i> Textänderung</button>
						<button class="btn @((amendmentMode == AmendmentModes.Move) ? "btn-primary" : "btn-outline-primary")" @onclick="() => amendmentMode = AmendmentModes.Move"><i class="fa fa-sort"></i> Verschieben</button>
					</div>

					@if (amendmentMode == AmendmentModes.Change)
					{
						<RadzenHtmlEditor class="mt-2" @bind-Value="@newText" style="max-height: 300px; width: 100%; margin-bottom: 1rem;">
						<RadzenHtmlEditorSeparator />
						<RadzenHtmlEditorUndo />
						<RadzenHtmlEditorRedo />
						<RadzenHtmlEditorSeparator />
						<RadzenHtmlEditorBold />
						<RadzenHtmlEditorItalic />
						<RadzenHtmlEditorUnderline />
						<RadzenHtmlEditorStrikeThrough />
						<RadzenHtmlEditorSeparator />
					</RadzenHtmlEditor>
					}
				</div>
				<div class="modal-footer">
					<a class="btn btn-primary" @onclick="AddAmendment">Einreichen</a>
					<a href="javascript:;" class="btn btn-white" @onclick="() => showAmendmentModal = false">Abbrechen</a>
				</div>
			</div>
		</div>
	</div>
}


@code {
	[Parameter] public ResaOperativeParagraph Paragraph { get; set; }

	[Parameter] public ResolutionExchange Exchange { get; set; }

	[Parameter] public bool IsFirst { get; set; }

	[Parameter] public bool IsLast { get; set; }

	[Parameter] public int Index { get; set; }

	[CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

	private bool showAmendmentModal = false;

	private enum AmendmentModes
	{
		Remove,
		Change,
		Move
	}

	private string newText;

	private AmendmentModes amendmentMode;

	private bool isEditing = false;

	private bool isAuthed = false;

	private string htmlText = "1. Operativ Paragraph <br />Mit mehreren Zeilen <br />Anklicken um zu bearbeiten.";

	private void StartEdit()
	{
		if (Exchange.Resolution.State == EResolutionStates.Public ||
		Exchange.Resolution.State == EResolutionStates.Private && Exchange.Resolution.SubmitterRole.RoleId == vcParticipationService.RoleId ||
		isAuthed)
		{
			vcParticipationService.LastEditedOperativeParagraphId = this.Paragraph.ResaOperativeParagraphId;
			this.isEditing = true;
		}
		else if (Exchange.Resolution.State == EResolutionStates.Discussion)
		{
			showAmendmentModal = true;
		}

	}

	private void Save()
	{
		Exchange.UpdateOperativeParagraph(this.Paragraph);
		vcParticipationService.LastEditedOperativeParagraphId = null;
		this.newText = Paragraph.Text;
		this.isEditing = false;
	}

	private void MoveUp()
	{
		Exchange.MoveOperativeParagraphUp(this.Paragraph);
		isEditing = false;
	}

	private void MoveDown()
	{
		Exchange.MoveOperativeParagraphDown(this.Paragraph);
		isEditing = false;
	}

	private void Remove()
	{
		Exchange.RemoveOperativeParagraph(this.Paragraph);
		isEditing = false;
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		this.newText = Paragraph.Text;
		var taskResult = await AuthStateTask;
		isAuthed = taskResult?.User.Identity != null && taskResult.User.Identity.IsAuthenticated;
		Exchange.OperativeParagraphChanged += (sender, para) =>
		{
			if (para == this.Paragraph)
			{
				InvokeAsync(StateHasChanged);
			}
		};

		if(vcParticipationService.LastEditedOperativeParagraphId == this.Paragraph.ResaOperativeParagraphId)
		{
			this.isEditing = true;
		}


	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		vcParticipationService.EditingOperativeParagraphChanged += (sender, paraId) =>
		{
			if (paraId != this.Paragraph.ResaOperativeParagraphId)
			{
				this.isEditing = false;
				InvokeAsync(StateHasChanged);
			}

		};
	}

	private void AddAmendment()
	{
		if (this.amendmentMode == AmendmentModes.Remove)
		{
			this.AddRemoveAmendment();
		}
	}

	private void AddRemoveAmendment()
	{
		if (vcParticipationService?.RoleId != null)
		{
			Exchange.AddRemoveAmendment(this.Paragraph, vcParticipationService.RoleId.Value);
			this.showAmendmentModal = false;
		}
	}
}
