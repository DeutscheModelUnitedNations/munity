@using MUNity.BlazorServer.Components.Conference.WebEditor
@using MUNity.Schema.Conference.Website
@using MUNity.Database.Models.Website

@page "/c/managewebsite/{ConferenceId}"
@page "/c/managewebsite/{ConferenceId}/{PageId}"

@inject Services.UserConferenceAuthService conferenceAuthService
@inject MUNity.Database.Context.MunityContext dbContext
@inject Services.ConferenceWebsiteService websiteService

@if (isAllowed)
{
    <div class="row">
        <div class="col-3">
            <div class="panel panel-inverse">
                <div class="panel-heading">
                    <h4 class="panel-title">Seiten und Menü</h4>
                </div>
                <div class="panel-body">
                    <h5>Seiten</h5>
                    <ul>
                        @foreach (var menuItem in menuItems)
                        {
                            <WebEditorMenuItemComponent MenuItem="@menuItem"
                                                        AddPage="(i) => AddPage(i)"
                                                        PageSelected="(i) => ChangeLoadedPage(i)" />
                            
                        }
                        <li class="cursor-pointer"><i class="fa fa-folder-plus text-success fa-lg"></i> Neues Verzeichnis</li>
                        <li class="cursor-pointer" @onclick="() => AddPage(null)"><i class="fa fa-plus text-success fa-lg"></i> Neue Seite</li>
                    </ul>

                    <h5>Weitere Funktionen</h5>
                    <ul>
                        <li><a class="cursor-pointer" @onclick="() => this.editingItem = EditItems.DashboardCard">Karte auf der Startseite</a></li>
                        <li><a class="cursor-pointer" @onclick="() => this.editingItem = EditItems.Footer">Footer</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-9">
            <div class="panel panel-inverse">
                <div class="panel-heading">
                    <h4 class="panel-title">Seite Bearbeiten</h4>
                </div>
                <div class="panel-body">
                    @if (this.editingItem == EditItems.Page)
                    {
                        <ConferenceWebPageEditorComponent ConferenceId=@ConferenceId PageId=@PageId />
                    }
                    else if (this.editingItem == EditItems.DashboardCard)
                    {
                        <EditConferenceDashboardCardComponent ConferenceId=@ConferenceId />
                    }
                    else if (this.editingItem == EditItems.Footer)
                    {
                        <EditFooterComponent ConferenceId=@ConferenceId />
                    }
                    else if (this.editingItem == EditItems.None)
                    {
                        <p>Keine Komponente geladen. Im Menü einen Eintrag auswählen und mit dem Bearbeiten beginnen.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
 else
{
    <p>Zugriff verweigert</p>
}



@code {
    [Parameter] public string ConferenceId { get; set; }

    [Parameter] public string PageId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool isAllowed;

    private List<MenuItem> menuItems;

    private enum EditItems
    {
        None,
        Page,
        DashboardCard,
        Footer
    }

    private EditItems editingItem;

    private void AddPage(MenuItem parentItem)
    {
        var createdPage = websiteService.AddPage(ConferenceId, parentItem?.Id);
        if (createdPage.Success)
        {
            var newMenuItem = new MenuItem()
            {
                Id = createdPage.MenuItemId,
                PageId = createdPage.PageId,
                Title = "Neue Seite",
                Items = new List<MenuItem>()
            };
            if (parentItem != null)
                parentItem.Items.Add(newMenuItem);
            else
                this.menuItems.Add(newMenuItem);

        }
    }

    private void ChangeLoadedPage(MUNity.Schema.Conference.Website.MenuItem selectedMenuEntry)
    {
        if (selectedMenuEntry == null)
        {
            PageId = null;
        }
        else
        {
            PageId = selectedMenuEntry.PageId;
            this.editingItem = EditItems.Page;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.isAllowed = await conferenceAuthService.IsUserAllowedToEditConference(ConferenceId, AuthStateTask);
    }

   

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        this.menuItems = websiteService.GetMenuItems(ConferenceId);
    }
}
