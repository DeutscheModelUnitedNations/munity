@page "/c/committee/{Id}"
@using MUNity.Database.Models.Conference
@using MUNity.Database.Models.Session

@inject MunityContext dbContext
@inject Services.UserConferenceAuthService confAuthService
@inject DialogService dialogService

<AuthorizeView>
    <Authorized>
        @if (isHeadUser && committee != null)
        {
            <h1 class="page-header">@committee.Name <small>@committee.FullName</small></h1>

            <div class="row">
                <div class="col-8">
                    <div class="card">
                        <div class="card-body">
	                         <h5>Themen </h5>
                             <table class="table">
                                 <thead>
                                     <th>Name</th>
                                     <th>Vollständiger Name</th>
                                     <th>Code</th>
                                     <th>Aktion</th>
                                 </thead>
                                 <tbody>
                                        @foreach(var topic in committee.Topics)
                                        {
                                            <tr>
                                                <td>@topic.TopicName</td>
                                                <td>@topic.TopicFullName</td>
                                                <td>@topic.TopicCode</td>
                                                <td><button class="btn btn-danger btn-sm" @onclick="() => OpenConfirmDeleteTopic(topic)"><i class="fa fa-trash"></i></button></td>
                                            </tr>
                                        }
                                 </tbody>
                            </table>
                            <button class="btn btn-success mb-3" @onclick=OpenCreateTopicDialog>Neues Thema</button>

                            <h5>Antragsarten</h5>
                            <ol>
                                @if (committee.AllowedPetitionTypes != null)
                                {
                                    foreach(var petitionType in committee.AllowedPetitionTypes.OrderBy(n => n.SortOrder))
                                    {
                                        <li>@petitionType.Name</li>
                                    }
                                }
                            </ol>

                            <h5>Sessions</h5>
                            @if (sessions != null)
                            {

                                @if (sessions.Count != 0)
                                {
                                    <ul>
                                        @foreach(var session in sessions)
                                        {
                                            <li><a href="/committee/session/@session.CommitteeSessionId">@session.StartDate - @session.EndDate</a></li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick=CreateSession>Eine neue Session erstellen</button>
                                }
                                
                            }

                        </div> <!-- End of body -->
 
                    </div>

                    <div class="card mt-2">
                        <div class="card-header">
                            Tools
                        </div>
                        <div class="card-body">
                            <div class="widget-list rounded mb-4" data-id="widget">
								<a href="/presentation/@Id" target="_blank" class="widget-list-item">
									<div class="widget-list-media icon">
										<i class="fa fa-tv bg-inverse text-white"></i>
									</div>
									<div class="widget-list-content">
										<h4 class="widget-list-title">Präsentationsfenster öffnen</h4>
									</div>
									<div class="widget-list-action text-end">
										<i class="fa fa-angle-right fa-lg text-gray-500"></i>
									</div>
								</a>

                                @if (!string.IsNullOrEmpty(listOfSpeakersId))
                                {
                                    <a href="/los/@listOfSpeakersId" class="widget-list-item">
									    <div class="widget-list-media icon">
										    <i class="fa fa-tv bg-inverse text-white"></i>
									    </div>
									    <div class="widget-list-content">
										    <h4 class="widget-list-title">Redeliste führen</h4>
									    </div>
									    <div class="widget-list-action text-end">
										    <i class="fa fa-angle-right fa-lg text-gray-500"></i>
									    </div>
								    </a>
                                }
                                

                                <a href="oc/@Id" class="widget-list-item">
									<div class="widget-list-media icon">
										<i class="fa fa-house bg-inverse text-white"></i>
									</div>
									<div class="widget-list-content">
										<h4 class="widget-list-title">Sitzungsfenster</h4>
									</div>
									<div class="widget-list-action text-end">
										<i class="fa fa-angle-right fa-lg text-gray-500"></i>
									</div>
								</a>
                                
                                
							</div>
                        </div>
                    </div>

                    <div class="card mt-2">
                        <div class="card-header">
                            Resolutionen
                        </div>
                        <div class="card-body">
                            <div class="widget-list rounded mb-4" data-id="widget">
                                @foreach(var resolution in dbContext.ResolutionAuths.Where(n => n.Committee.CommitteeId == Id).Select(n => new { n.Resolution.ResaElementId, n.Resolution.Topic}))
                                {
                                    <a href="/resolution/@resolution.ResaElementId" target="_blank" class="widget-list-item">
									    <div class="widget-list-media icon">
										    <i class="fa fa-fax bg-primary text-white"></i>
									    </div>
									    <div class="widget-list-content">
										    <h4 class="widget-list-title">@resolution.Topic</h4>
									    </div>
									    <div class="widget-list-action text-end">
										    <i class="fa fa-angle-right fa-lg text-gray-500"></i>
									    </div>
								    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="card border-0 mb-3 bg-gray-800 text-white">
                        <div class="card-body">
                            <div class="mb-2 text-gray-500">
                                <b>Delegierte</b>
                            </div>
                            <MUNity.BlazorServer.Components.General.VectorMapComponent IsoToColor="@dbContext.Delegates.Where(n => n.Committee.CommitteeId == Id && n.DelegateCountry != null).Select(n => n.DelegateCountry.Iso).ToList()" />
                            <div class="mt-2">
                                @foreach(var del in dbContext.Delegates.AsNoTracking().Include(n => n.DelegateCountry).Where(n => n.Committee.CommitteeId == Id).OrderBy(n => n.DelegateType).ThenBy(n => n.RoleName))
                                {
                                    <div class="d-flex align-items-center text-white mb-2">
                                        <div class="widget-img widget-img-xs rounded bg-inverse me-2 w-40px" style="background-image: url(@($"/img/flags/small/{del.DelegateCountry?.Iso}.png"))"></div>
                                        <div class="d-flex w-100">
                                            <div>@del.RoleName</div>
                                        </div>
                                    </div>
                                }
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>

           

            
        }
        else
        {
            <p>Keine Berechtigung</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Sie müssen für diese Seite angemeldet sein.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string Id { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private List<CommitteeSession> sessions;

    private Committee committee;

    private bool isHeadUser;

    private string listOfSpeakersId = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var claim = (await AuthStateTask)?.User;
        isHeadUser = await confAuthService.IsUserTeamMemberForCommitteeOrHigher(Id, claim);
        if (isHeadUser)
        {
            this.committee = dbContext.Committees
            .Include(n => n.Topics)
            .Include(n => n.AllowedPetitionTypes)
            .FirstOrDefault(n => n.CommitteeId == Id);

            this.sessions = dbContext.CommitteeSessions.Where(n => n.Committee.CommitteeId == Id).ToList();

            await InvokeAsync(StateHasChanged);
        }
        this.listOfSpeakersId = dbContext.Committees.Where(n => n.CommitteeId == Id).Select(n => n.ListOfSpeakers.ListOfSpeakersId).FirstOrDefault();
    }

    private async Task OpenCreateTopicDialog()
    {
        await dialogService.OpenAsync<CreateTopicComponent>("Create a topic", new Dictionary<string, object>() { { "CommitteeId", this.Id } });
    }

    private async Task OpenConfirmDeleteTopic(CommitteeTopic topic)
    {
        var result = await dialogService.Confirm($"Soll das Thema '{topic.TopicName}' wirklich entfernt werden?", "Thema löschen", Sharable.YesNoOptions);
        if (result == true)
        {
            dbContext.CommitteeTopics.Remove(topic);
            dbContext.SaveChanges();
        }
    }

    private void CreateSession()
    {
        var session = new CommitteeSession()
            {
                Committee = committee,
                StartDate = DateTime.Now,
                Name = "Neuer Sitzungsblock"
            };
        if (committee.CurrentSession == null)
        {
            committee.CurrentSession = session;
        }

        this.sessions.Add(session);
        dbContext.CommitteeSessions.Add(session);
        dbContext.SaveChanges();
    }
}
