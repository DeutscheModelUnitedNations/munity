@page "/oc/{CommitteeId}"
@page "/oc/{CommitteeId}/session/{SessionId}"
@page "/oc/{CommitteeId}/resolution/{ResolutionId}"
@page "/oc/{CommitteeId}/visit/{VisitCommitteeId}"
@page "/oc/{CommitteeId}/los/{ManageListOfSpeakersId}"
@page "/oc/{CommitteeId}/managevote/{ManageVotingId}"
@page "/oc/{CommitteeId}/vote/{VoteId}"

@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Conference
@using MUNity.Database.Models.Conference.Roles

@layout Shared.MobileGameLayout
@inject MunityContext dbContext
@inject BServices.VirtualCommiteeParticipationService virtualCommitteeParticipation
@inject BServices.PresentationViewsService presentationViewService
@inject Services.ResolutionService resolutionService

@*
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

@inject BServices.VirtualCommitteeExchangeService vcExchangeService
@inject Services.UserConferenceAuthService conferenceAuthService

@inject ILogger<VirtualCommitteeSessionPage> logger*@

@if (isInited)
{
    <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteeBootstrap CommitteeId=@CommitteeId>
        
        @if (!string.IsNullOrEmpty(SessionId))
        {
            
                
            <MUNity.BlazorServer.Components.VirtualCommittee.PropsitionsComponent SessionId=@SessionId />
        }
        else if (!string.IsNullOrEmpty(ResolutionId))
        {
            @if (ResolutionId != "demo" && ResolutionId != "all")
            {
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-primary" @onclick=SetResolutionToPresentation>Resolution auf die Präsentationsfolie setzen</button>
                    </Authorized>
                </AuthorizeView>
                <MUNity.BlazorServer.Components.Resolution.ResolutionEditorComponent ResolutionId=@ResolutionId />
            }
            else
            {
                <AuthorizeView>
                    <Authorized>
                        

                        <div class="row">
                            <div class="alert alert-info">
                                <h3>Neue Resolution anlegen</h3>
                                <div class="row">
                                    <div class="col-8">
                                        <div class="form-group">
                                            <label>Im Namen des Landes/Rolle</label>
                                            <select class="form-control" @bind=@newResolutionDelegate>
                                                <option value="-1">-Ohne-</option>
                                                @foreach(var role in dbContext.Delegates.Where(n => n.Committee.CommitteeId == CommitteeId).Select(n => new { n.RoleId, n.RoleName }))
                                                {
                                                    <option value="@role.RoleId">@role.RoleName</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <button class="btn btn-success" @onclick="CreateResolution">Erstellen</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(resolutionError))
                        {
                            <div class="alert alert-danger">
                                <h1>Fehler beim Erstellen der Resolution</h1>
                                <p>Es ist ein Fehler beim Erstellen aufgetreten mit folgender Meldung:</p>
                                <p>@resolutionError</p>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Thema</th>
                            <th>EinbringerIn</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var resolution in dbContext.ResolutionAuths.AsNoTracking().Where(n => n.Committee.CommitteeId == CommitteeId).Select(n => new {n.Resolution.ResaElementId, n.Resolution.Topic, n.Resolution.SubmitterRole.RoleName, n.Resolution.State}))
                        {
                            <tr>
                                <td>@resolution?.ResaElementId</td>
                                <td><a href="@($"/oc/{CommitteeId}/resolution/{resolution?.ResaElementId}")">@resolution?.Topic</a> </td>
                                <td>@resolution?.RoleName</td>
                                <td>@resolution?.State</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

    }
        else if (!string.IsNullOrEmpty(VisitCommitteeId))
        {
            <MUNity.BlazorServer.Components.VirtualCommittee.VisitCommitteeComponent VisitedCommitteeId=@VisitCommitteeId />
        }
        else if (!string.IsNullOrEmpty(ManageListOfSpeakersId))
        {
            <MUNity.BlazorServer.Components.ListOfSpeakers.LoSManagerComponent ListOfSpeakersId=@ManageListOfSpeakersId />
        }
        else if (!string.IsNullOrEmpty(ManageVotingId))
        {
            <AuthorizeView>
                <Authorized>
                    <MUNity.BlazorServer.Components.VirtualCommittee.ManageVotingComponent VotingId=@ManageVotingId />
                </Authorized>
            </AuthorizeView>
            
            <MUNity.BlazorServer.Components.VirtualCommittee.VoteComponent VoteId=@ManageVotingId />
        }
        else if (!string.IsNullOrEmpty(VoteId))
        {
            <MUNity.BlazorServer.Components.VirtualCommittee.VoteComponent VoteId=@VoteId />
        }
        else {
            <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteeDashboardComponent />
        }

        
    </MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteeBootstrap>

    
}
else
{
    <p>Seite wird iniziirt</p>
    
}



<style>
    @@media (max-width: 993px)
    {
        .hidden-md
        {
            display: none;
            visibility: collapse;
        }
        
    }
</style>


@code {
    [Parameter] public string CommitteeId { get; set; }

    [Parameter] public string SessionId { get; set; }

    [Parameter] public string ResolutionId { get; set; }

    [Parameter] public string VisitCommitteeId { get; set; }

    [Parameter] public string ManageListOfSpeakersId { get; set; }

    [Parameter] public string ManageVotingId { get; set; }

    [Parameter] public string VoteId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool isInited;

    private bool isTeamMember;

    private int newResolutionDelegate = -1;

    string resolutionError = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var authState = await AuthStateTask;
        if (authState != null)
        {
            isTeamMember = authState.User.Identity.IsAuthenticated;
        }
        isInited = true;
        virtualCommitteeParticipation.IsTeamMember = isTeamMember;
    }

    private void SetResolutionToPresentation()
    {
        var presentation = presentationViewService.GetPresentation(CommitteeId);
        if (presentation != null)
        {
            presentation.ResolutionId = ResolutionId;
        }
    }

    private void CreateResolution()
    {
        if (string.IsNullOrEmpty(CommitteeId))
        {
            resolutionError = "Es wurde keine GremiumId angegeben innerhalb dieser Sitzung.";
            return;
        }

        if (newResolutionDelegate != -1)
        {
            var resolution = resolutionService.CreateResolutionForCommittee(CommitteeId, newResolutionDelegate);
            if (resolution != null)
            {
                resolutionError = string.Empty;
            }
            else
            {
                resolutionError = "Es wurde versucht eine Resolution anzulegen aber intern muss etwas schief gelaufen sein.";
            }
        }
        else
        {
            var resolution = resolutionService.CreateResolutionForCommittee(CommitteeId, null);
            if (resolution != null)
            {
                resolutionError = string.Empty;

            }
            else
            {
                resolutionError = "Es wurde versucht eine Resolution anzulegen aber intern muss etwas schief gelaufen sein.";
            }
        }

        InvokeAsync(StateHasChanged);

    }
}
