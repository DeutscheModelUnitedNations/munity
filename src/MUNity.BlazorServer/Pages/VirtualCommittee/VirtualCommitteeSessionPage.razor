@page "/oc/{CommitteeId}"
@page "/oc/{CommitteeId}/session/{SessionId}"
@page "/oc/{CommitteeId}/resolution/{ResolutionId}"
@page "/oc/{CommitteeId}/visit/{VisitCommitteeId}"
@page "/oc/{CommitteeId}/los/{ManageListOfSpeakersId}"
@page "/oc/{CommitteeId}/managevote/{ManageVotingId}"
@page "/oc/{CommitteeId}/vote/{VoteId}"

@using MUNity.BlazorServer.BServices
@using MUNity.Database.Models.Conference
@using MUNity.Database.Models.Conference.Roles

@layout Shared.MobileGameLayout

@inject MunityContext dbContext
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject BServices.VirtualCommiteeParticipationService virtualCommitteeParticipation
@inject BServices.VirtualCommitteeExchangeService vcExchangeService
@inject Services.UserConferenceAuthService conferenceAuthService
@inject Services.ListOfSpeakersService listOfSpeakersService
@inject ILogger<VirtualCommitteeSessionPage> logger

@if (!accessDenied && !errorOnInit)
{
    <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteTopMenu 
    CommitteeId=@CommitteeId />

    <div class="d-flex justify-content-center bg-dark-800" style="min-height: 90px">
        <div class="mt-5px">
            @if(listOfSpeakersId != null)
            {
                <MUNity.BlazorServer.Components.ListOfSpeakers.ListOfSpeakersHeaderComponent 
                ListOfSpeakersId=@listOfSpeakersId 
                MyRoleName=@virtualCommitteeParticipation.RoleName
                MyIso=@virtualCommitteeParticipation.RoleIso />
            }
            else
            {
                <span class="text-white">Es wurde noch keine Redeliste erstellt</span>
                <button class="btn btn-sm btn-default" @onclick="CreateListOfSpeakers">Jetzt erstellen</button>
            }
        </div>
        @*<div class="d-flex align-items-center hidden-md">
            @if (exchange != null)
            {
                if (exchange.CurrentSessionExchange != null)
                {
                    <h3 class="me-3 text-default">@exchange.CurrentSessionExchange.SessionName</h3>
                }
                else
                {
                    <h3 class="me-3 text-default">Kein Sitzungsblock</h3>
                }
            }
            else
            {
                <small class="text-danger">Exchange error!</small>
            }
        </div>*@
    </div>

    <div class="row mt-5 ms-2 me-2">
        <MUNity.BlazorServer.Components.VirtualCommittee.VirtualCommitteeBannerComponent />
    </div>

    <div class="row mt-1 me-1">

        <div class="col-lg-3 col-sm-12 animate__animated animate__bounceInLeft">
            <MUNity.BlazorServer.Components.VirtualCommittee.VCUsersComponent MyRoleId=@virtualCommitteeParticipation.RoleId CommitteeId=@CommitteeId />
        </div>
        <div class="col-lg-9 col-sm-12">
            @if (!string.IsNullOrEmpty(SessionId))
            {
                <h1 class="page-header">@(dbContext.CommitteeSessions.FirstOrDefault(n => n.CommitteeSessionId == SessionId)?.Name)</h1>
                <AuthorizeView>
                    <Authorized>
                        <MUNity.BlazorServer.Components.VirtualCommittee.PresentsCheckComponent SessionId=@SessionId />
                    </Authorized>
                </AuthorizeView>
                
                <MUNity.BlazorServer.Components.VirtualCommittee.PropsitionsComponent SessionId=@SessionId />
            }
            else if (!string.IsNullOrEmpty(ResolutionId))
            {
                <MUNity.BlazorServer.Components.Resolution.ResolutionEditorComponent ResolutionId=@ResolutionId />
            }
            else if (!string.IsNullOrEmpty(VisitCommitteeId))
            {
                <MUNity.BlazorServer.Components.VirtualCommittee.VisitCommitteeComponent />
            }
            else if (!string.IsNullOrEmpty(ManageListOfSpeakersId))
            {
                <MUNity.BlazorServer.Components.ListOfSpeakers.LoSManagerComponent ViewModel=@listOfSpeakersService.GetViewModel(ManageListOfSpeakersId) />
            }
            else if (!string.IsNullOrEmpty(ManageVotingId))
            {
                <MUNity.BlazorServer.Components.VirtualCommittee.ManageVotingComponent VotingId=@ManageVotingId />
                <MUNity.BlazorServer.Components.VirtualCommittee.VoteComponent VoteId=@ManageVotingId />
            }
            else if (!string.IsNullOrEmpty(VoteId))
            {
                <MUNity.BlazorServer.Components.VirtualCommittee.VoteComponent VoteId=@VoteId />
            }
            else {
                <h1 class="page-header">Willkommen @((isTeam) ? "Teammitglied" : virtualCommitteeParticipation.RoleName)</h1>
                <div class="panel panel-inverse">
				    <div class="panel-heading">
					    <h4 class="panel-title">Information</h4>
				    </div>
				    <div class="panel-body">
					    Bei dieser Seite handelt es sich um eine technische Demo für MUNity. Diese Seite zeigt lediglich den Funktionsumfang von MUNity.
                        Vorgenommene Änderungen werden nicht gespeichert.
				    </div>
			    </div>

                <div class="row">
                    <div class="col-lg-6 col-sm-12">
                        <div class="panel panel-inverse">
                            <div class="panel-heading">
					    <h4 class="panel-title">Information</h4>
				    </div>
				    <div class="panel-body">
					    <MUNity.BlazorServer.Components.VirtualCommittee.ProcedureComponent />
				    </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <MUNity.BlazorServer.Components.VirtualCommittee.VCNotificationsComponent />
}
else
{
    <p>Zugriff verweigert!</p>
    
}

@if (errorOnInit)
{
    <div class="row">
        <div class="col-12">
            <div class="alert alert-danger">
                <h1>Kritischer Fehler</h1>
                <p>Ein unerwarteter kritischer Fehler ist aufgetreten. Dieser führt dazu, dass die Plattform nicht korrekt verwendet werden kann!</p>
                <p>@initError</p>
            </div>
        </div>
    </div>
}

<style>
    @@media (max-width: 993px)
    {
        .hidden-md
        {
            display: none;
            visibility: collapse;
        }
        
    }
</style>


@code {
    [Parameter] public string CommitteeId { get; set; }

    [Parameter] public string SessionId { get; set; }

    [Parameter] public string ResolutionId { get; set; }

    [Parameter] public string VisitCommitteeId { get; set; }

    [Parameter] public string ManageListOfSpeakersId { get; set; }

    [Parameter] public string ManageVotingId { get; set; }

    [Parameter] public string VoteId { get; set; }

    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private string committeeName;

    private string listOfSpeakersId;

    private bool accessDenied = false;

    private bool isTeam = false;

    private bool errorOnInit = false;

    private string initError = "";

    private VirtualCommitteeExchange exchange;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await Init();
        }
        catch (Exception ex)
        {
            errorOnInit = true;
            initError = ex.Message;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.virtualCommitteeParticipation.RoleId == null)
        {
            await Init();
        }
    }

    private async Task Init()
    {
        var accessKey = await localStorageService.GetItemAsStringAsync($"munity-access-{CommitteeId}");

        if (accessKey != null)
        {
            var signInSucces = virtualCommitteeParticipation.SignIn(CommitteeId, accessKey);
            if (!signInSucces)
            {
                accessDenied = true;
                await localStorageService.RemoveItemAsync($"munity-access-{CommitteeId}");
            }
        }
        else
        {
            var claim = (await AuthStateTask)?.User;
            this.isTeam = await conferenceAuthService.IsUserTeamMemberForCommitteeOrHigher(CommitteeId, claim);
            if (!isTeam)
            {
                accessDenied = true;
            }
        }

        if (!accessDenied)
        {
            var committeeInfo = dbContext.Committees.AsNoTracking().Where(n => n.CommitteeId == CommitteeId)
            .Select(n => new
            {
                Name = n.Name,
                ListOfSpeakersId = n.ListOfSpeakers.ListOfSpeakersId
            }).FirstOrDefault();
            committeeName = committeeInfo.Name;
            listOfSpeakersId = committeeInfo.ListOfSpeakersId;
        }
        this.exchange = vcExchangeService.GetExchange(CommitteeId);
        if (exchange != null)
        {
            this.exchange.CurrentSessionChanged += (n,a) => InvokeAsync(StateHasChanged);
        }
        await InvokeAsync(StateHasChanged);
    }

    private void CreateListOfSpeakers()
    {
        var viewModel = listOfSpeakersService.CreateList($"los_{CommitteeId}_{Guid.NewGuid().ToString().Substring(0,5)}");
        var committee = dbContext.Committees.FirstOrDefault(n => n.CommitteeId == CommitteeId);
        if (committee != null)
        {
            var listInstance = dbContext.ListOfSpeakers.FirstOrDefault(n => n.ListOfSpeakersId == viewModel.ListOfSpeakersId);
            if (listInstance == null)
            {
                logger?.LogError($"Unable to find a list of speakers with the id '{viewModel.ListOfSpeakersId}' the list can't be loaded correctly!");
            }
            else
            {
                committee.ListOfSpeakers = listInstance;
                this.listOfSpeakersId = viewModel.ListOfSpeakersId;
                dbContext.SaveChanges();
            }
            
        }
    }

}
