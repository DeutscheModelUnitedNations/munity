@using Microsoft.EntityFrameworkCore

@layout MUNity.BlazorServer.Shared.FrontEndLayout
@page "/web/conference/{ConferenceId}/register"

@inject MUNity.Database.Context.MunityContext context;

<AuthorizeView>
    <Authorized>

            

            <div class="panel panel-inverse" data-sortable-id="form-stuff-1">
                <!-- BEGIN panel-heading -->
                <div class="panel-heading ui-sortable-handle">
                    <h4 class="panel-title">Bewerbung</h4>
                </div>
                <!-- END panel-heading -->
                <!-- BEGIN panel-body -->
                <div class="panel-body">

                    @if (!isDelegationApplicationAvailable && !isRoleApplicationAvailable)
                    {
                        <div class="alert alert-danger">Derzeit scheint keine Anmeldephase zu sein.</div>
                    }

                    <div class="nav-wizards-container">
                        <nav class="nav nav-wizards-3 mb-2">
                            <div class="nav-item col">
                                <a class="nav-link cursor-pointer @((step == 0) ? "active" : null) @((step > 0) ? "completed" : null)" @onclick="() => step = 0">
                                    <div class="nav-dot"></div>
                                    <div class="nav-title">Schritt 1</div>
                                    <div class="nav-text">Anwesenheit</div>
                                </a>
                            </div>
                            <div class="nav-item col">
                                <a class="nav-link cursor-pointer @((step == 1) ? "active" : null) @((step > 1) ? "completed" : null)"  @onclick="() => step = 1">
                                    <div class="nav-dot"></div>
                                    <div class="nav-title">Schritt 2</div>
                                    <div class="nav-text">Art</div>
                                </a>
                            </div>
                            <div class="nav-item col">
                                <a class="nav-link cursor-pointer @((step == 2) ? "active" : null) @((step > 2) ? "completed" : null)"  @onclick="() => step = 2">
                                    <div class="nav-dot"></div>
                                    <div class="nav-title">Schritt 3</div>
                                    <div class="nav-text">Eingabe</div>
                                </a>
                            </div>
                        </nav>
                    </div>

                    <div class="row">

                        @if (step == 0)
                        {
                            <div class="col-6">
                                <a class="widget-card rounded square mb-5px cursor-pointer" @onclick="() => step = 1" style="max-height: 400px">
                                    <div class="widget-card-cover" style="background-image: url(../img/login-bg/login-bg-9.jpg)">
                                        <div class="d-flex h-100 align-items-center justify-content-center">
                                            <div class="text-center">
                                                <div class="text-white fs-24px"><b>Online</b></div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </div>
                             
                            <div class="col-6">
                                <a class="widget-card rounded square mb-5px cursor-pointer" @onclick="() => step = 1" style="max-height: 400px">
                                    <div class="widget-card-cover" style="background-image: url(../img/login-bg/login-bg-17.jpg)">
                                        <div class="d-flex h-100 align-items-center justify-content-center">
                                            <div class="text-center">
                                                <div class="text-white fs-24px"><b>In Präsenz</b></div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </div>
                            
                        }
                        else if (step == 1)
                        {
                            @if (isRoleApplicationAvailable)
                            {
                                <div class="col-6 animate__animated animate__backInRight" >
                                    <a href="#" class="widget-card rounded square mb-5px" style="max-height: 400px; max-width: 400px">
                                        <div class="widget-card-cover" style="background-image: url(../img/gallery/gallery-1.jpg)">
                                            <div class="d-flex h-100 align-items-center justify-content-center">
                                                <div class="text-center">
                                                    <div class="text-white fs-24px"><b>Einzelbewerbung</b></div>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            }

                            @if (isDelegationApplicationAvailable)
                            {
                                <div class="col-6 animate__animated animate__backInRight" >
                                    <a class="widget-card rounded square mb-5px cursor-pointer" style="max-height: 400px; max-width: 400px"
                                       @onclick="() => { step = 2; mode = Modes.Delegation; }">
                                        <div class="widget-card-cover" style="background-image: url(../img/gallery/gallery-4.jpg)">
                                            <div class="d-flex h-100 align-items-center justify-content-center">
                                                <div class="text-center">
                                                    <div class="text-white fs-24px"><b>Gruppenbewerbung</b></div>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            }
                        }
                        else if (step == 2)
                        {
                            @if (mode == Modes.Delegation)
                            {
                                <MUNity.BlazorServer.Components.Conference.DelegationApplicationForm ConferenceId="@ConferenceId" />
                            }
                        }
                    </div>

                </div>
            </div>
    </Authorized>
    <NotAuthorized>
        <div class="error">
            @*<div class="error-code">Nicht angemeldet</div>*@
            <div class="error-content">
                <div class="error-message">Hallo, schön dass du bei CONFERENCE_SHORT dabei sein willst.</div>
                <div class="error-desc mb-4">
                    Für die Anmeldung bei der Konferenz benötigst du ein MUNity-Konto.
                    Melde dich bitte an oder erstelle dir ein neues Konto.
                </div>
                <div>
                    <a href="/Identity/Account/Login" class="btn btn-success px-3">Anmelden</a>
                    <a href="/Identity/Account/Register" class="btn btn-secondary px-3">Konto erstellen</a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter] public string ConferenceId { get; set; }

    private bool isDelegationApplicationAvailable;

    private bool isRoleApplicationAvailable;

    private int step { get; set; } = 0;

    private enum PresencePreferences
    {
        NotSelected,
        Online,
        OnLocation
    }

    private PresencePreferences presencePreference;

    private enum Modes
    {
        None,
        Delegation,
        Role
    }

    private Modes mode;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // TODO: If there are committees that are Online and offline inside this conference
        // make take step 0, if not skip to step 1


        isDelegationApplicationAvailable = context.ConferenceApplicationFormulas
        .Any(n => n.Conference.ConferenceId == ConferenceId && n.IsActive && n.FormulaType == MUNityBase.ConferenceApplicationFormulaTypes.Delegation);

        isRoleApplicationAvailable = context.ConferenceApplicationFormulas
            .Any(n => n.Conference.ConferenceId == ConferenceId && n.IsActive && n.FormulaType == MUNityBase.ConferenceApplicationFormulaTypes.Role);

        if (isDelegationApplicationAvailable)
            mode = Modes.Delegation;

        if (!isDelegationApplicationAvailable && isRoleApplicationAvailable)
            mode = Modes.Role;

    }
}
