@using Microsoft.EntityFrameworkCore
@using MUNity.BlazorServer.Components.Conference.Application

@layout MUNity.BlazorServer.Shared.ConferenceFrontEndLayout
@page "/web/conference/{ConferenceId}/register"
@page "/web/conference/{ConferenceId}/register/{Preference}"

@inject MUNity.Database.Context.MunityContext context
@inject NavigationManager navManager

<AuthorizeView>
    <Authorized>
            <div class="panel panel-inverse" data-sortable-id="form-stuff-1">
                <!-- BEGIN panel-heading -->
                <div class="panel-heading ui-sortable-handle">
                    <h4 class="panel-title">Bewerbung</h4>
                </div>
                <!-- END panel-heading -->
                <!-- BEGIN panel-body -->
                <div class="panel-body">
                    @if (step == 1)
                    {
                        <div class="row">
                            <div class="col-4">
                                <button class="btn w-100 btn-primary" @onclick="() => presencePreference = SelectPresencePreferenceComponent.PresencePreferences.NotSelected">Zurück</button>
                            </div>
                        </div>
                    }

                    <div class="row">

                        @if (step == 0)
                        {
                            <SelectPresencePreferenceComponent PreferenceSelected="OnPreferenceSelected" />
                        }
                        else if (step == 1)
                        {
                            <SelectApplicationTypeComponent ApplicationTypeSelected="OnApplicationTypeSelected" />
                        }
                        else if (step == 2)
                        {
                            @if (applicationType == SelectApplicationTypeComponent.ApplicationType.Delegation)
                            {
                                <DelegationApplicationForm ConferenceId="@ConferenceId" />
                            }
                        }
                    </div>

                </div>
            </div>
    </Authorized>
    <NotAuthorized>
        <div class="error">
            @*<div class="error-code">Nicht angemeldet</div>*@
            <div class="error-content">
                <div class="error-message">Hallo, schön dass du bei @conferenceShort dabei sein willst.</div>
                <div class="error-desc mb-4">
                    Für die Anmeldung bei der Konferenz benötigst du ein MUNity-Konto.
                    Melde dich bitte an oder erstelle dir ein neues Konto.
                </div>
                <div>
                    <a href="/Identity/Account/Login" class="btn btn-success px-3">Anmelden</a>
                    <a href="/Identity/Account/Register" class="btn btn-secondary px-3">Konto erstellen</a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    @@media only screen and (min-width: 1200px) {
        .padding-on-lg {
            padding-left: 150px;
            padding-right: 150px;
        }
    }
</style>

@code {
    [Parameter] public string ConferenceId { get; set; }

    [Parameter] public string Preference { get; set; }

    private string conferenceShort = "Conference";


    private int step
    {
        get
        {
            if (presencePreference == SelectPresencePreferenceComponent.PresencePreferences.NotSelected)
                return 0;

            if (presencePreference != SelectPresencePreferenceComponent.PresencePreferences.NotSelected &&
                applicationType == SelectApplicationTypeComponent.ApplicationType.NotSelected)
                return 1;

            if (presencePreference != SelectPresencePreferenceComponent.PresencePreferences.NotSelected &&
                applicationType != SelectApplicationTypeComponent.ApplicationType.NotSelected)
                return 2;

            return 0;
        }
    }

    private SelectPresencePreferenceComponent.PresencePreferences presencePreference;


    private SelectApplicationTypeComponent.ApplicationType applicationType;

    private void OnPreferenceSelected(SelectPresencePreferenceComponent.PresencePreferences preference)
    {
        this.presencePreference = preference;
    }

    private void OnApplicationTypeSelected(SelectApplicationTypeComponent.ApplicationType applicationType)
    {
        this.applicationType = applicationType;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // TODO: If there are committees that are Online and offline inside this conference
        // make take step 0, if not skip to step 1


        //isDelegationApplicationAvailable = context.ConferenceApplicationOptions
        //.Any(n => n.Conference.ConferenceId == ConferenceId && n.IsActive && n.AllowDelegationApplication);

        //isRoleApplicationAvailable = context.ConferenceApplicationOptions
        //    .Any(n => n.Conference.ConferenceId == ConferenceId && n.IsActive && n.AllowRoleApplication);

    }
}
