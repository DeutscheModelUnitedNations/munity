@layout MUNity.BlazorServer.Shared.FrontEndLayout
@page "/"
@using Blazored.LocalStorage
@using MUNity.Schema.Conference
@inject Services.ConferenceService conferenceService
@inject MUNity.Database.Context.MunityContext dbContext
@inject ILocalStorageService localStorage
@inject BServices.VirtualCommiteeParticipationService vcParticipationService
@inject NavigationManager navManager

@*<div class="card border-0 text-white bg-dark-900 mb-3">
    <div class="h-250px rounded-top card-img" 
     style="background-image: linear-gradient(rgba(0, 0, 0, 0.527),rgba(0, 0, 0, 0.5)), url(/img/logo/MUNityLogoNoBorder.png); background-position: center; background-size: cover; background-repeat: no-repeat; "></div>
    <div class="card-img-overlay">
        <h2 class="card-title fs-54px">MUNity</h2>
        <p class="card-text fs-24px">MUNity ist zurück, mit vielen neuen Funktionen. Wir unterstützen euch gerne bei euren Model United Nations Konferenzen mit kostenfreien online Diensten.</p>
    </div>
</div>*@

<div class="row">
    <div class="col-12">
        <div class="alert alert-info">
            <h3>MUNity MUNBW 2022 - Edition</h3>
            <p>Willkommen bei MUNity. Der Open-Source Plattform für Model United Nations Konferenzen.</p>
        </div>
    </div>
</div>

@*<div class="row">
    @foreach (var conferenceCard in dbContext.ConferenceDashboardCards
        .Include(n => n.Conference)
        .Where(n => n.Active))
    {
        <div class="col-6">
            <div class="card text-center">
                <div class="h-250px rounded-top" style="background-image: url(/img/munstock/munbw-01.jpg); background-position: center; background-size: cover; background-repeat: no-repeat;"></div>
                <div class="card-body">
                    <h4 class="card-title">@conferenceCard.Title</h4>
                    <p>@conferenceCard.Text</p>
                    <a href="/web/conference/@conferenceCard.Conference.ConferenceId" class="btn btn-sm btn-primary">Seite öffnen</a>
                    @if (conferenceBoardInfos != null && conferenceBoardInfos.Any(n => (n.UserIsOwner || n.UserIsTeamMember) && n.ConferenceId == conferenceCard.Conference.ConferenceId))
                    {
                        <a href="/c/dashboard/@conferenceCard.Conference.ConferenceId" class="btn btn-sm btn-default">Team-Center öffnen</a>
                    }
                </div>
            </div>
        </div>
    }
</div>
*@

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Mein Gremium</h4>
    </div>
    <div class="panel-body">
        <p>Einem Gremium über einen Code beitreten.</p>
        <div class="form-group">
            <label>Beitrittscode</label>
            <input type="number" class="form-control" @bind="committeeSecret" @bind:event="onchange" placeholder="00000" />
        </div>
        <a href="/mobile/@committeeSecret" class="btn btn-default mt-2">Beitreten</a>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>MUNBW 2022 Beitritt</h5>
                    </div>
                    <div class="card-body">
                        <p>Die Beitrittslinks sind nun versteckt worden und befinden sich jetzt <a href="/c/managecommittees/munsh22">hier</a></p>
                        <h5>Beitritt für Vorsitzende</h5>
                        <div class="btn-group btn-group-vertical">
                            @foreach(var committee in dbContext.Committees.Where(n => n.Conference.ConferenceId == "munbw22").Select(n => new { n.CommitteeId, n.Name, n.CommitteeShort}))
                            {
                                <button class="btn @((committee.CommitteeShort == "SEK" || committee.CommitteeShort == "KFK") ? "btn-default" : "btn-primary")" @onclick="() => JoinAsTeam(committee.CommitteeId)">@committee.Name</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code
{
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    private List<ConferenceBoardInfo> conferenceBoardInfos;

    private string committeeSecret = "";

    protected override async Task OnInitializedAsync()
    {
        var claim = (await AuthStateTask)?.User;
        if (claim != null)
        {
            conferenceBoardInfos = await conferenceService.GetConferenceBoardInfosAsync(claim);
        }
    }

    private async Task JoinAsTeam(string committeeId)
    {
        await localStorage.RemoveItemAsync($"munity-access-{committeeId}");
        navManager.NavigateTo($"/oc/{committeeId}");
    }
}
