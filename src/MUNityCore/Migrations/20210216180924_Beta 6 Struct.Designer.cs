// <auto-generated />
using System;
using MUNityCore.DataHandlers.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MUNityCore.Migrations
{
    [DbContext(typeof(MunityContext))]
    [Migration("20210216180924_Beta 6 Struct")]
    partial class Beta6Struct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("MUNity.Models.ListOfSpeakers.ListOfSpeakers", b =>
                {
                    b.Property<string>("ListOfSpeakersId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("ListClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("PausedQuestionTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("PausedSpeakerTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("PublicId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<TimeSpan>("QuestionTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("QuestionsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("SpeakerTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("StartQuestionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartSpeakerTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ListOfSpeakersId");

                    b.ToTable("ListOfSpeakers");
                });

            modelBuilder.Entity("MUNity.Models.ListOfSpeakers.Speaker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Iso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ListOfSpeakersId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrdnerIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListOfSpeakersId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.AbstractRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowMultipleParticipations")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ApplicationState")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationValue")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("IconName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleAuthId")
                        .HasColumnType("int");

                    b.Property<string>("RoleFullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleShort")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RoleTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("RoleId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("RoleAuthId");

                    b.ToTable("AbstractRole");

                    b.HasDiscriminator<string>("RoleType").HasValue("AbstractRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Article")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4");

                    b.Property<string>("CommitteeShort")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CommitteeTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("ResolutlyCommitteeCommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ResolutlyCommitteeCommitteeId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.CommitteeTopic", b =>
                {
                    b.Property<int>("CommitteeTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CommitteeTopicTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("TopicCode")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4");

                    b.Property<string>("TopicDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TopicFullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("TopicName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeTopicId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeTopic");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Conference", b =>
                {
                    b.Property<string>("ConferenceId")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceProjectProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceShort")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ConferenceTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserMunityUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("ConferenceId");

                    b.HasIndex("ConferenceProjectProjectId");

                    b.HasIndex("CreationUserMunityUserId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Continent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CountryTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Iso")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Delegation", b =>
                {
                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("DelegationId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Delegation");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupApplication", b =>
                {
                    b.Property<int>("GroupApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("GroupApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("GroupApplicationId");

                    b.HasIndex("DelegationId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupedRoleApplication", b =>
                {
                    b.Property<int>("GroupedRoleApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GroupedRoleApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("GroupedRoleApplicationId");

                    b.ToTable("GroupedRoleApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Participation", b =>
                {
                    b.Property<int>("ParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<bool>("IsMainRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Paid")
                        .HasColumnType("double");

                    b.Property<string>("ParticipationSecret")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ParticipationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserMunityUserId")
                        .HasColumnType("int");

                    b.HasKey("ParticipationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserMunityUserId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectOrganizationOrganizationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectShort")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ProjectTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectOrganizationOrganizationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleApplication", b =>
                {
                    b.Property<int>("RoleApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GroupedRoleApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RoleApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<int?>("UserMunityUserId")
                        .HasColumnType("int");

                    b.HasKey("RoleApplicationId");

                    b.HasIndex("GroupedRoleApplicationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserMunityUserId");

                    b.ToTable("RoleApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleAuth", b =>
                {
                    b.Property<int>("RoleAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanEditConferenceSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditParticipations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSeeApplications")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int");

                    b.Property<string>("RoleAuthName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RoleAuthTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("RoleAuthId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("RoleAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.TeamRoleGroup", b =>
                {
                    b.Property<int>("TeamRoleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int>("GroupLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("TeamRoleGroupShort")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("TeamRoleGroupTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("TeamRoleGroupId");

                    b.ToTable("TeamRoleGroups");
                });

            modelBuilder.Entity("MUNityCore.Models.MunitySetting", b =>
                {
                    b.Property<string>("SetttingName")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SetByMunityUserId")
                        .HasColumnType("int");

                    b.Property<string>("SettingValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SetttingName");

                    b.HasIndex("SetByMunityUserId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.Organization", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.Property<string>("OrganizationShort")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("OrganizationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.OrganizationMember", b =>
                {
                    b.Property<int>("OrganizationMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("OrganizationMemberTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleOrganizationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserMunityUserId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationMemberId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleOrganizationRoleId");

                    b.HasIndex("UserMunityUserId");

                    b.ToTable("OrganizationMember");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.OrganizationRole", b =>
                {
                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateProject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("OrganizationRoleId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationRoles");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionAuth", b =>
                {
                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("AllowCommitteeRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowConferenceRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AmendmentMode")
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserMunityUserId")
                        .HasColumnType("int");

                    b.Property<string>("EditPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PublicShortKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReadPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.HasKey("ResolutionId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CreationUserMunityUserId");

                    b.HasIndex("SimulationId");

                    b.ToTable("ResolutionAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.Property<int>("ResolutionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("CanAddUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserMunityUserId")
                        .HasColumnType("int");

                    b.HasKey("ResolutionUserId");

                    b.HasIndex("AuthResolutionId");

                    b.HasIndex("UserMunityUserId");

                    b.ToTable("ResolutionUsers");
                });

            modelBuilder.Entity("MUNityCore.Models.Session.CommitteeSession", b =>
                {
                    b.Property<string>("CommitteeSessionId")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CommitteeSessionId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeSession");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.AgendaItem", b =>
                {
                    b.Property<int>("AgendaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AgendaItemId");

                    b.HasIndex("SimulationId");

                    b.ToTable("AgendaItems");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Petition", b =>
                {
                    b.Property<string>("PetitionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("AgendaItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PetitionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PetitionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PetitionId");

                    b.HasIndex("AgendaItemId");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("SimulationUserId");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.PetitionType", b =>
                {
                    b.Property<int>("PetitionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Reference")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Ruling")
                        .HasColumnType("int");

                    b.HasKey("PetitionTypeId");

                    b.ToTable("PetitionTypes");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.PetitionTypeSimulation", b =>
                {
                    b.Property<long>("PetitionTypeSimulationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowChairs")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowDelegates")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowNgo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSpectator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("PetitionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.HasKey("PetitionTypeSimulationId");

                    b.HasIndex("PetitionTypeId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimulationPetitionTypes");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Simulation", b =>
                {
                    b.Property<int>("SimulationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CurrentResolutionId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("LastStatusChange")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ListOfSpeakersId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("LobbyMode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SimulationId");

                    b.HasIndex("ListOfSpeakersId");

                    b.ToTable("Simulations");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationHubConnection", b =>
                {
                    b.Property<int>("SimulationHubConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserSimulationUserId")
                        .HasColumnType("int");

                    b.HasKey("SimulationHubConnectionId");

                    b.HasIndex("UserSimulationUserId");

                    b.ToTable("SimulationHubConnections");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationRole", b =>
                {
                    b.Property<int>("SimulationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Iso")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.HasKey("SimulationRoleId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimulationRoles");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationUser", b =>
                {
                    b.Property<int>("SimulationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditListOfSpeakers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditResolution")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSelectRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PinRetries")
                        .HasColumnType("int");

                    b.Property<string>("PublicUserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleSimulationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SimulationUserId");

                    b.HasIndex("RoleSimulationRoleId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimulationUser");
                });

            modelBuilder.Entity("MUNityCore.Models.User.MunityUser", b =>
                {
                    b.Property<int>("MunityUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AuthMunityUserAuthId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4");

                    b.Property<string>("Forename")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int?>("GroupApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Mail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<int?>("MunityUserId1")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImageName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Salt")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<int>("UserState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Username")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4");

                    b.HasKey("MunityUserId");

                    b.HasIndex("AuthMunityUserAuthId");

                    b.HasIndex("GroupApplicationId");

                    b.HasIndex("MunityUserId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MUNityCore.Models.User.MunityUserAuth", b =>
                {
                    b.Property<int>("MunityUserAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthLevel")
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateOrganization")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserAuthName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4");

                    b.HasKey("MunityUserAuthId");

                    b.ToTable("UserAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.User.UserPrivacySettings", b =>
                {
                    b.Property<int>("UserPrivacySettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceHistory")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("Friendslist")
                        .HasColumnType("int");

                    b.Property<int>("InternalNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("Pinboard")
                        .HasColumnType("int");

                    b.Property<int>("PublicNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("UserRef")
                        .HasColumnType("int");

                    b.HasKey("UserPrivacySettingsId");

                    b.HasIndex("UserRef")
                        .IsUnique();

                    b.ToTable("UserPrivacySettings");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.DelegateRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("DelegateStateCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDelegationLeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("DelegateStateCountryId");

                    b.HasIndex("DelegationId");

                    b.HasDiscriminator().HasValue("DelegateRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.NgoRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("Leader")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NgoName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("NgoRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.PressRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int>("PressCategory")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PressRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.SecretaryGeneralRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasColumnName("SecretaryGeneralRole_Title");

                    b.HasDiscriminator().HasValue("SecretaryGeneralRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.TeamRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int?>("ParentTeamRoleRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamRoleGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRoleLevel")
                        .HasColumnType("int");

                    b.HasIndex("ParentTeamRoleRoleId");

                    b.HasIndex("TeamRoleGroupId");

                    b.HasDiscriminator().HasValue("TeamRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.VisitorRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("VisitorRole");
                });

            modelBuilder.Entity("MUNity.Models.ListOfSpeakers.Speaker", b =>
                {
                    b.HasOne("MUNity.Models.ListOfSpeakers.ListOfSpeakers", "ListOfSpeakers")
                        .WithMany("AllSpeakers")
                        .HasForeignKey("ListOfSpeakersId");

                    b.Navigation("ListOfSpeakers");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.AbstractRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany("Roles")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityCore.Models.Conference.RoleAuth", "RoleAuth")
                        .WithMany()
                        .HasForeignKey("RoleAuthId");

                    b.Navigation("Conference");

                    b.Navigation("RoleAuth");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Committee", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany("Committees")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MUNityCore.Models.Conference.Committee", "ResolutlyCommittee")
                        .WithMany()
                        .HasForeignKey("ResolutlyCommitteeCommitteeId");

                    b.Navigation("Conference");

                    b.Navigation("ResolutlyCommittee");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.CommitteeTopic", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany("Topics")
                        .HasForeignKey("CommitteeId");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Conference", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Project", "ConferenceProject")
                        .WithMany("Conferences")
                        .HasForeignKey("ConferenceProjectProjectId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserMunityUserId");

                    b.Navigation("ConferenceProject");

                    b.Navigation("CreationUser");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Delegation", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupApplication", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");

                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Delegation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Participation", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserMunityUserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Project", b =>
                {
                    b.HasOne("MUNityCore.Models.Organization.Organization", "ProjectOrganization")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectOrganizationOrganizationId");

                    b.Navigation("ProjectOrganization");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleApplication", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.GroupedRoleApplication", null)
                        .WithMany("Applications")
                        .HasForeignKey("GroupedRoleApplicationId");

                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserMunityUserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleAuth", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("MUNityCore.Models.MunitySetting", b =>
                {
                    b.HasOne("MUNityCore.Models.User.MunityUser", "SetBy")
                        .WithMany()
                        .HasForeignKey("SetByMunityUserId");

                    b.Navigation("SetBy");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.OrganizationMember", b =>
                {
                    b.HasOne("MUNityCore.Models.Organization.Organization", "Organization")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("MUNityCore.Models.Organization.OrganizationRole", "Role")
                        .WithMany("MembersWithRole")
                        .HasForeignKey("RoleOrganizationRoleId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserMunityUserId");

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.OrganizationRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Organization.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionAuth", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany("Resolutions")
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "CreationUser")
                        .WithMany("CreatedResolutions")
                        .HasForeignKey("CreationUserMunityUserId");

                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("Resolutions")
                        .HasForeignKey("SimulationId");

                    b.Navigation("Committee");

                    b.Navigation("CreationUser");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.HasOne("MUNityCore.Models.Resolution.V2.ResolutionAuth", "Auth")
                        .WithMany("Users")
                        .HasForeignKey("AuthResolutionId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserMunityUserId");

                    b.Navigation("Auth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Session.CommitteeSession", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany("Sessions")
                        .HasForeignKey("CommitteeId");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.AgendaItem", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("AgendaItems")
                        .HasForeignKey("SimulationId");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Petition", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.AgendaItem", "AgendaItem")
                        .WithMany("Petitions")
                        .HasForeignKey("AgendaItemId");

                    b.HasOne("MUNityCore.Models.Simulation.PetitionType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId");

                    b.HasOne("MUNityCore.Models.Simulation.SimulationUser", "SimulationUser")
                        .WithMany("Petitions")
                        .HasForeignKey("SimulationUserId");

                    b.Navigation("AgendaItem");

                    b.Navigation("PetitionType");

                    b.Navigation("SimulationUser");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.PetitionTypeSimulation", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.PetitionType", "PetitionType")
                        .WithMany()
                        .HasForeignKey("PetitionTypeId");

                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("PetitionTypes")
                        .HasForeignKey("SimulationId");

                    b.Navigation("PetitionType");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Simulation", b =>
                {
                    b.HasOne("MUNity.Models.ListOfSpeakers.ListOfSpeakers", "ListOfSpeakers")
                        .WithMany()
                        .HasForeignKey("ListOfSpeakersId");

                    b.Navigation("ListOfSpeakers");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationHubConnection", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.SimulationUser", "User")
                        .WithMany("HubConnections")
                        .HasForeignKey("UserSimulationUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("Roles")
                        .HasForeignKey("SimulationId");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationUser", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.SimulationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleSimulationRoleId");

                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("Users")
                        .HasForeignKey("SimulationId");

                    b.Navigation("Role");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("MUNityCore.Models.User.MunityUser", b =>
                {
                    b.HasOne("MUNityCore.Models.User.MunityUserAuth", "Auth")
                        .WithMany("Users")
                        .HasForeignKey("AuthMunityUserAuthId");

                    b.HasOne("MUNityCore.Models.Conference.GroupApplication", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupApplicationId");

                    b.HasOne("MUNityCore.Models.User.MunityUser", null)
                        .WithMany("Friends")
                        .HasForeignKey("MunityUserId1");

                    b.Navigation("Auth");
                });

            modelBuilder.Entity("MUNityCore.Models.User.UserPrivacySettings", b =>
                {
                    b.HasOne("MUNityCore.Models.User.MunityUser", "User")
                        .WithOne("PrivacySettings")
                        .HasForeignKey("MUNityCore.Models.User.UserPrivacySettings", "UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.DelegateRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityCore.Models.Conference.Country", "DelegateState")
                        .WithMany()
                        .HasForeignKey("DelegateStateCountryId");

                    b.HasOne("MUNityCore.Models.Conference.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");

                    b.Navigation("Committee");

                    b.Navigation("DelegateState");

                    b.Navigation("Delegation");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.TeamRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Roles.TeamRole", "ParentTeamRole")
                        .WithMany()
                        .HasForeignKey("ParentTeamRoleRoleId");

                    b.HasOne("MUNityCore.Models.Conference.TeamRoleGroup", "TeamRoleGroup")
                        .WithMany("TeamRoles")
                        .HasForeignKey("TeamRoleGroupId");

                    b.Navigation("ParentTeamRole");

                    b.Navigation("TeamRoleGroup");
                });

            modelBuilder.Entity("MUNity.Models.ListOfSpeakers.ListOfSpeakers", b =>
                {
                    b.Navigation("AllSpeakers");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Committee", b =>
                {
                    b.Navigation("Resolutions");

                    b.Navigation("Sessions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Conference", b =>
                {
                    b.Navigation("Committees");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupApplication", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupedRoleApplication", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Project", b =>
                {
                    b.Navigation("Conferences");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.TeamRoleGroup", b =>
                {
                    b.Navigation("TeamRoles");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.Organization", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("Projects");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MUNityCore.Models.Organization.OrganizationRole", b =>
                {
                    b.Navigation("MembersWithRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionAuth", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.AgendaItem", b =>
                {
                    b.Navigation("Petitions");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Simulation", b =>
                {
                    b.Navigation("AgendaItems");

                    b.Navigation("PetitionTypes");

                    b.Navigation("Resolutions");

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationUser", b =>
                {
                    b.Navigation("HubConnections");

                    b.Navigation("Petitions");
                });

            modelBuilder.Entity("MUNityCore.Models.User.MunityUser", b =>
                {
                    b.Navigation("CreatedResolutions");

                    b.Navigation("Friends");

                    b.Navigation("PrivacySettings");
                });

            modelBuilder.Entity("MUNityCore.Models.User.MunityUserAuth", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
