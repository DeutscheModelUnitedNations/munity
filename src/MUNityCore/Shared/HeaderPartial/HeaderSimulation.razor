@using Services;
@inject MUNityCore.Services.FrontendSimulationService frontendSimulationService;

<div class="row align-self-center">
    <button class="btn @overViewClass"
            @onclick="() => frontendSimulationService.CurrentTab = FrontendSimulationService.SimulationTabs.Overview">
        <i class="fa fa-flag"></i> Start
    </button>

    <button class="btn @presentsClass"
            @onclick="() => frontendSimulationService.CurrentTab = FrontendSimulationService.SimulationTabs.Presents">
        <i class="fa fa-check-double"></i> Anwesenheit
    </button>

    <button class="btn @agendaClass"
            @onclick="() => { newAgendaOrPetition = false; frontendSimulationService.CurrentTab = FrontendSimulationService.SimulationTabs.Agenda; }">
        <i class="fa fa-bookmark"></i> Tagesordnung
        @if (newAgendaOrPetition)
        {
            <span class="badge badge-danger">neu</span>
        }
    </button>

    <button class="btn @votingClass"
            @onclick="() => { newVoting = false; frontendSimulationService.CurrentTab = FrontendSimulationService.SimulationTabs.Voting; }">
        <i class="fa fa-vote-yea"></i> Abstimmung
        @if (newVoting)
        {
            <span class="badge badge-danger">neu</span>
        }
    </button>

    <button class="btn @resolutionClass" @onclick="() => frontendSimulationService.CurrentTab = Services.FrontendSimulationService.SimulationTabs.Resolutions">
        <i class="fa fa-file-archive"></i> Resolutionen
    </button>

    @if (frontendSimulationService.CurrentSimulation?.UserContext != null && frontendSimulationService.CurrentSimulation.UserContext.IsChair)
    {
        <button class="btn @protocolClass" @onclick="() => frontendSimulationService.CurrentTab = Services.FrontendSimulationService.SimulationTabs.Protocol">
            <i class="fa fa-list"></i> Protokoll
        </button>
    }
</div>

@code {
    private string overViewClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Overview) ? "btn-primary text-white" : "btn-default";

    private string agendaClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Agenda) ? "btn-primary text-white" : "btn-default";

    private string votingClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Voting) ? "btn-primary text-white" : "btn-default";

    private string resolutionClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Resolutions) ? "btn-primary text-white" : "btn-default";

    private string protocolClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Protocol) ? "btn-primary text-white" : "btn-default";

    private string presentsClass =>
        (frontendSimulationService.CurrentTab == FrontendSimulationService.SimulationTabs.Presents) ? "btn-primary text-white" : "btn-default";

    private bool newVoting = false;

    private bool newAgendaOrPetition = false;

    protected override void OnInitialized()
    {
        if (frontendSimulationService.CurrentSimulation != null)
        {
            BindBadgesLoader(frontendSimulationService.CurrentSimulation);
        }
        else
        {
            frontendSimulationService.CurrentSimulationChanged += (o, vm) => BindBadgesLoader(vm);
        }

        base.OnInitialized();
    }

    private void BindBadgesLoader(ViewModel.SimulationViewModel viewModel)
    {
        frontendSimulationService.CurrentSimulation.VotingCreated += OnVotingCreated;
        frontendSimulationService.CurrentSimulation.PetitionAdded += OnPetitionCreated;
        frontendSimulationService.CurrentSimulation.AgendaItemCreated += OnAgendaItemCreated;
    }

    private void OnAgendaItemCreated(object sender, MUNity.Schema.Simulation.AgendaItemDto item)
    {
        if (frontendSimulationService.CurrentTab != FrontendSimulationService.SimulationTabs.Agenda)
        {
            newAgendaOrPetition = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnPetitionCreated(object sender, MUNity.Schema.Simulation.PetitionInfoDto petition)
    {
        if (frontendSimulationService.CurrentTab != FrontendSimulationService.SimulationTabs.Agenda)
        {
            newAgendaOrPetition = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnVotingCreated(object sender, MUNity.Schema.Simulation.Voting.SimulationVotingDto dto)
    {
        if ( frontendSimulationService.CurrentTab != FrontendSimulationService.SimulationTabs.Voting)
        {
            newVoting = true;
            InvokeAsync(this.StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lastTab = await this.frontendSimulationService.LoadLastTab();
            if (lastTab != null && this.frontendSimulationService.CurrentTab != lastTab.Value)
            {
                this.frontendSimulationService.CurrentTab = lastTab.Value;
                this.StateHasChanged();
            }
        }

        //return base.OnAfterRenderAsync(firstRender);
    }
}
