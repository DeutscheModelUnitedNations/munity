@using MUNityCore.Extensions.CastExtensions;
@inject Services.SimulationService simulationService;

@if (ViewModel != null)
{
    <div class="col-lg-3 col-sm-6 col-xs-12">
        <!-- begin widget-card -->
        <a class="widget-card widget-card-rounded m-b-20"
           href="/sek/sim/@ViewModel.SimulationId">
            <div class="widget-card-cover" style="background-image: url(/img/extra/236A6488.jpg)"></div>
            <div class="widget-card-content">
                <b class="text-white">Simulation</b>
            </div>
            <div class="widget-card-content bottom">
                <i class="fa fa-university fa-5x text-indigo"></i>
                <h4 class="text-white m-t-10"><b>@ViewModel.Name</b></h4>
                <h5 class="f-s-12 text-white-transparent-7 m-b-2"><b>@currentStatus?.StatusText</b></h5>
            </div>
        </a>
        <!-- end widget-card -->
    </div>
}

@code {
    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private MUNity.Schema.Simulation.SimulationStatusDto currentStatus;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ViewModel != null)
        {
            currentStatus = simulationService.GetCurrentStatus(ViewModel.SimulationId)?.ToModel();


            ViewModel.StatusChanged += OnStatusChanged;
        }
    }

    private void OnStatusChanged(object sender, MUNity.Schema.Simulation.SimulationStatusDto status)
    {
        this.currentStatus = status;
        this.InvokeAsync(StateHasChanged);
    }
}
