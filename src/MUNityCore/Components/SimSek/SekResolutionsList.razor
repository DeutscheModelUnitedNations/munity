@inject Services.SimulationService simulationService;

<div class="card border-0 mb-3 bg-dark-darker text-white">
    <!-- begin card-body -->
    <div class="card-body" style="background: no-repeat bottom right; background-image: url(/img/extra/documents.png); background-size: auto 60%;">
        <!-- begin title -->
        <div class="mb-3 text-grey">
            <b>Resolutionen</b>
        </div>
        <!-- end title -->
        <!-- begin sales -->
        <h3 class="m-b-10">@resolutions?.Count Insgesamt</h3>
        <!-- end sales -->
        <!-- begin percentage -->
        <div class="text-grey m-b-1">Anklicken um diese zu bearbeiten</div>
        <!-- end percentage -->
    </div>
    <!-- end card-body -->
    <!-- begin widget-list -->
    <div class="widget-list widget-list-rounded inverse-mode p-b-3">

        @if (resolutions != null)
        {
            @foreach (var resolution in resolutions)
            {
                <a class="widget-list-item" style="cursor: pointer;">
                    <div class="widget-list-media icon">
                        <i class="fa fa-file-alt bg-blue text-white"></i>
                    </div>
                    <div class="widget-list-content">
                        <div class="widget-list-title">@resolution.Name</div>
                    </div>
                    <div class="widget-list-action text-nowrap text-grey">
                        @if (!string.IsNullOrEmpty(resolution.SubmitterName))
                        {
                            <span><img src="/img/flags/small/un.png" /> @resolution.SubmitterName</span>
                        }

                    </div>
                </a>
            }
        }
        <!-- end widget-list-item -->
    </div>
    <!-- end widget-list -->
</div>

@code {      
    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private List<MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo> resolutions;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        if (ViewModel != null)
        {
            this.resolutions = await simulationService.GetResolutions(ViewModel.SimulationId);
        }

    }
}
