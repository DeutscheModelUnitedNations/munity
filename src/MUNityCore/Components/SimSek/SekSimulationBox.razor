@using MUNityCore.Extensions.CastExtensions;

@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.SimulationService simulationService;
@inject Services.SpeakerlistService speakerlistService;
@page "/sek/sim/{Id}"

<AuthorizeView Roles="Admin, Moderator">
    <Authorized>
        @if (SimViewModel != null)
        {
            <div class="row">
                <h4>@SimViewModel.SimulationId @SimViewModel.Name  Status: @currentStatus?.StatusText</h4>
            </div>

            <div class="row">
                <div class="col-12">
                    <MUNityCore.Components.Simulation.ListOfSpeakerHeader SimViewModel="@SimViewModel"
                                                                          ViewModel="@SimViewModel.SpeakerlistViewModel"
                                                                          ShowToggleButton="false"
                                                                          OffsetMargin="false" />
                </div>
            </div>




            @if (newPetitionInfo != null)
            {
                <div class="row">
                    <div class="alert alert-success fade show animate__animated @((fadeOutNewPetition) ? "animate__fadeOut" : "animate__bounceIn")">
                        <strong>Neuer Antrag</strong>
                        @newPetitionInfo.CategoryName @newPetitionInfo.TypeName durch @newPetitionInfo.SubmitterRoleName
                    </div>
                </div>

            }

            <div class="row mt-3">
                <div class="col-lg-8">
                    <SekAgendaStatusboard @ref="@agendaBoard" ViewModel="@SimViewModel" />
                </div>

                <div class="col-lg-4">
                    <SekPresentsAndVotings ViewModel="@SimViewModel" />

                    <SekResolutionsList ViewModel="@SimViewModel" />
                </div>
            </div>

            
            <div class="row mt-3">
                <div class="col-lg-12">
                    @if (_speakerlistLog != null)
                    {
                        <SekSpeakerlistStatistics Log="_speakerlistLog" />
                    }
                </div>
            </div>

        }
    </Authorized>
    <NotAuthorized>
        <Paragraph>Zutritt verweigert</Paragraph>
    </NotAuthorized>
</AuthorizeView>





@code {
    private SekAgendaStatusboard agendaBoard;

    private string _id;
    [Parameter]
    public string Id
    {
        get => _id;
        set
        {
            if (value != _id)
            {
                _id = value;
                LoadSimulation().ConfigureAwait(false);

            }
        }
    }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    private MUNity.Schema.Simulation.PetitionInfoDto newPetitionInfo;

    private List<MUNityCore.Models.Speakerlists.ListOfSpeakersLog> _speakerlistLog;

    private bool fadeOutNewPetition = false;

    private MUNity.Schema.Simulation.SimulationStatusDto currentStatus;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadSimulation();
    }

    private async Task LoadSimulation()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            int simulationId = 0;
            if (int.TryParse(Id, out simulationId))
            {
                this.SimViewModel = await frontendSimulationService.GetOrInitViewModelWildcard(simulationId);
                SimViewModel.FetchData(simulationService);
                await SimViewModel.SignInContext();
            }

        }

        if (SimViewModel != null)
        {
            if (SimViewModel.SpeakerlistViewModel != null)
            {
                SimViewModel.SpeakerlistViewModel.SpeakerlistChanged += delegate { this.StateHasChanged(); };
                _speakerlistLog = speakerlistService.GetLog(this.SimViewModel.SpeakerlistViewModel.SpeakerlistId);
            }
            SimViewModel.PetitionAdded += OnPetitionAdded;
            SimViewModel.StatusChanged += OnStatusChanged;
            currentStatus = this.simulationService.GetCurrentStatus(SimViewModel.SimulationId).ToModel();
        }
        agendaBoard?.ReloadAgendaItems();
        await InvokeAsync(StateHasChanged);
    }

    private void OnPetitionAdded(object sender, MUNity.Schema.Simulation.PetitionInfoDto info)
    {
        this.newPetitionInfo = info;
        this.fadeOutNewPetition = false;

        InvokeAsync(StateHasChanged);
        Task.Delay(5000).ContinueWith((n) =>
        {
            this.fadeOutNewPetition = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private void OnStatusChanged(object sender, MUNity.Schema.Simulation.SimulationStatusDto status)
    {
        currentStatus = status;
        InvokeAsync(this.StateHasChanged);
    }
}
