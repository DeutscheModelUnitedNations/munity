@inject Services.SimulationService simulationService;
@inject NavigationManager navManager;

@if (Sim != null)
{
    <div class="panel panel-inverse" data-sortable-id="ui-widget-1">
        <div class="panel-heading">
            <h4 class="panel-title">Benutzer (@Sim.Users.Count)</h4>
            <div class="panel-heading-btn">
                <input class="form-control form-control-sm" type="text" placeholder="Anzeigename" @bind="newUserDisplayName" />
                <button class="btn btn-success btn-xs" @onclick="() => CreateNewUser()">Neuer Benutzer</button>
            </div>
        </div>
        <div class="panel-body">
            <Table>
                <TableHeader>
                    <TableHeaderCell>Id</TableHeaderCell>
                    <TableHeaderCell>Anzeigename</TableHeaderCell>
                    <TableHeaderCell>Rolle</TableHeaderCell>
                    <TableHeaderCell>Login-Id</TableHeaderCell>
                    <TableHeaderCell>Login-Pass</TableHeaderCell>
                    <TableHeaderCell>Einladungslink</TableHeaderCell>
                    <TableHeaderCell TextAlignment="TextAlignment.Center">Löschen</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var user in Sim.Users)
                    {
                        <UserCardUserRow User="@user" Roles="@Sim.Roles" UserRemoved="OnUserRemoved" />
                    }
                </TableBody>
            </Table>
            <button class="btn btn-block btn-primary" @onclick="() => Download()">Liste herunterladen</button>
        </div>
    </div>
}


@code {
    [Parameter]
    public MUNityCore.Models.Simulation.Simulation Sim { get; set; }

    [Parameter]
    public EventCallback UsersChanged { get; set; }

    private string newUserDisplayName;

    private void CreateNewUser()
    {
        var user = simulationService.CreateUser(Sim.SimulationId, newUserDisplayName);
        UsersChanged.InvokeAsync();
    }

    private void OnUserRemoved(MUNityCore.Models.Simulation.SimulationUser user)
    {
        this.StateHasChanged();
        UsersChanged.InvokeAsync();
    }

    private void Download()
    {
        navManager.NavigateTo("api/Simulation/User/SimulationUserCsv?simulationId=" + Sim.SimulationId.ToString(), true);
    }
}
