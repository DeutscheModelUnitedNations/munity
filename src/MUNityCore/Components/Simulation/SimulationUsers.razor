@inject Services.SimulationService simulationService;
@inject NavigationManager navManager;

@if (users != null)
{
    <div class="col-lg-12 col-md-12">
        <div class="card border-0 text-truncate mb-3 bg-dark text-white">
            <!-- begin card-body -->
            <div class="card-body">
                <!-- begin title -->
                <div class="mb-3 text-grey">
                    <b class="mb-3">Benutzer</b>
                    <span class="ml-2"><i class="fa fa-info-circle" data-toggle="popover" data-trigger="hover" data-title="Conversion Rate" data-placement="top" data-content="Percentage of sessions that resulted in orders from total number of sessions." data-original-title="" title=""></i></span>
                </div>
                <!-- end title -->
                <!-- begin conversion-rate -->
                <div class="d-flex align-items-center mb-1">
                    <h2 class="text-white mb-0">@users.Count(n => n.IsOnline) Online</h2>
                    <div class="ml-auto" style="position: relative;">
                        @*<p>Right Text</p>*@
                    </div>
                </div>
                <!-- end conversion-rate -->
                <!-- begin percentage -->
                <div class="mb-4 text-grey">
                    @users.Count Insgesamt
                </div>

                <UserListGroup Users="users" RoleType="MUNity.Schema.Simulation.RoleTypes.Chairman" InviteLinkRequested="OpenInviteModal" IsChair="@ViewModel.UserContext.IsChair" />
                <UserListGroup Users="users" RoleType="MUNity.Schema.Simulation.RoleTypes.Delegate" InviteLinkRequested="OpenInviteModal" IsChair="@ViewModel.UserContext.IsChair" />
                <UserListGroup Users="users" RoleType="MUNity.Schema.Simulation.RoleTypes.Ngo" InviteLinkRequested="OpenInviteModal" IsChair="@ViewModel.UserContext.IsChair" />
                <UserListGroup Users="users" RoleType="MUNity.Schema.Simulation.RoleTypes.Spectator" InviteLinkRequested="OpenInviteModal" IsChair="@ViewModel.UserContext.IsChair" />
                <UserListGroup Users="users" RoleType="MUNity.Schema.Simulation.RoleTypes.None" InviteLinkRequested="OpenInviteModal" IsChair="@ViewModel.UserContext.IsChair" />

            </div>
            <!-- end card-body -->
        </div>
    </div>
}


<Modal @ref="inviteModal">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Benutzer einladen!</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Einladungslink</FieldLabel>
                <TextEdit Text="@inviteLink" ReadOnly="true" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => inviteModal.Hide()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private Modal inviteModal;

    private string inviteLink;

    private void OpenInviteModal(int userId)
    {
        inviteLink = navManager.BaseUri + "invite/" + simulationService.GetInviteLink(userId);
        this.inviteModal.Show();
    }

    private List<MUNityCore.Dtos.Simulations.SimulationUserInfoDto> users;

    protected override void OnInitialized()
    {
        if (this.ViewModel != null)
        {
            users = simulationService.GetSimulationUserInfos(ViewModel.SimulationId);
            this.ViewModel.ConnectedUsersChanged += ConnectedUsersChanged;
        }

        base.OnInitialized();
    }

    private void ConnectedUsersChanged(object sender, List<int> connectedUsers)
    {
        foreach (var user in users)
        {
            user.IsOnline = connectedUsers.Contains(user.SimulationUserId);
        }
        this.InvokeAsync(() => this.StateHasChanged());
    }
}
