@using Microsoft.EntityFrameworkCore;
@inject MUNityCore.DataHandlers.EntityFramework.MunityContext munityContext;
@inject MUNityCore.Services.SimulationService simulationService;
@inject MUNityCore.Services.FrontendSimulationService frontendSimulationService;
@inject Services.MainViewService mainViewService;

<h1 class="page-header mb-3">Tagesordnung</h1>


@if (this.ViewModel != null)
{
    <Row>
        <div class="col-lg-4 col-md-12">
            <div class="panel panel-inverse" data-sortable-id="ui-widget-1">
                <div class="panel-heading">
                    <h4 class="panel-title">Alle Tagesordnungspunkte</h4>
                    <div class="panel-heading-btn">
                        <a class="btn btn-xs btn-icon btn-circle btn-success"
                           @onclick="() => ReloadAgendaItems()"><i class="fa fa-redo"></i></a>
                    </div>
                </div>
                <div class="panel-body bg-dark">
                    @if (ViewModel.UserContext.IsChair)
                    {
                        <button class="btn btn-block btn-success mb-3" @onclick="() => ShowModal()">Neuer Tagesordnungspunkt</button>
                    }

                    <div class="widget-list widget-list-rounded inverse-mode">

                        @foreach (var top in AgendaItems)
                        {
                            <a class="widget-list-item rounded-0 p-t-3   @((this.selectedAgendaItem == top) ? "bg-dark-lighter" : null)"
                               @onclick="() => this.selectedAgendaItem = top">
                                <div class="widget-list-content">
                                    <div class="widget-list-title font-weight-bold">@top.Name</div>
                                    <span class="text-info">@top.PetitionCount @((top.PetitionCount == 1) ? "Antrag" : "Anträge")</span>
                                </div>
                                @if (ViewModel.UserContext.IsChair)
                                {
                                    <div class="widget-list-action text-nowrap text-grey">
                                        <i class="fa fa-trash text-danger" @onclick="() => { deleteAgendaItem = top; this.deleteAgendaItemModal.Show(); }"></i>
                                    </div>
                                }

                            </a>
                        }

                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-8 col-md-12">
            <div class="card border-0 mb-3 bg-dark-darker text-white">
                <!-- begin card-body -->
                <div class="card-body">
                    <!-- begin title -->
                    @if (selectedAgendaItem != null)
                    {
                        <div class="mb-3 text-grey">
                            <b>@selectedAgendaItem.Name</b>
                            <button class="ml-2 btn btn-xs btn-success" @onclick="() => newPetitionModal.Show()">Einen Antrag stellen</button>
                        </div>
                        @if (this.petitionsOfAgendaItem.Count > 0)
                        {
                            var currentPetition = this.petitionsOfAgendaItem.FirstOrDefault(n => n.Status == MUNity.Models.Simulation.EPetitionStates.Active);
                            if (currentPetition != null)
                            {
                                <h3 class="m-b-10">
                                    @currentPetition.TypeName
                                    @if (ViewModel.UserContext.IsChair)
                                    {
                                        <button class="btn btn-circle btn-icon btn-danger ml-3"
                                                @onclick="() => RemovePetition(currentPetition.PetitionId)">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    }
                                </h3>
                                <div class="text-grey m-b-1"><i class="fa fa-flag"></i> @currentPetition.SubmitterRoleName @currentPetition.SubmitterDisplayName</div>

                            }
                        }
                        else
                        {
                            <Paragraph>Derzeit wird kein Antrag bearbeitet.</Paragraph>
                        }


                        <div class="widget-list widget-list-rounded inverse-mode m-t-5">
                            @if (selectedAgendaItem != null && petitionsOfAgendaItem != null && petitionsOfAgendaItem.Count > 0)
                            {
                                @foreach (var petition in petitionsOfAgendaItem.Where(n => n.Status != MUNity.Models.Simulation.EPetitionStates.Active))
                                {

                                    <PetitionListItem Petition="@petition" AllowActivate="ViewModel.UserContext.IsChair"
                                                      AllowDeletion="ViewModel.UserContext.IsChair || petition.SubmitterRoleName == ViewModel.UserContext.RoleName"
                                                      OnActivate="MakePetitionActive"
                                                      OnDelete="RemovePetition" />
                                }

                                }
                                else
                                {
                                <Paragraph>Es befindet sich kein Antrag in der Warteschlange.</Paragraph>
                                }

                        </div>
                    }
                    else
                    {
                        <div class="mb-3 text-grey">
                            <b>Es ist kein Tagesordnungspunkt ausgewählt</b>
                        </div>
                    }

                </div>
            </div>
        </div>
    </Row>
}


<Modal @ref="createAgendaItemModal">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Neuer Tagesordnungspunkt</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Name des TOPs" @bind-Text="newAgendaItem.Name" />
            </Field>
            <Field>
                <FieldLabel>Beschreibung</FieldLabel>
                <TextEdit Placeholder="Eine Beschreibung des TOPs" @bind-Text="newAgendaItem.Description" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="() => CreateAgendaItem()">erstellen</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="deleteAgendaItemModal">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Tagesordnungspunkt löschen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Paragraph>Bist du sicher, dass du den Tagesordnungspunkt @deleteAgendaItem?.Name löschen möchtest?</Paragraph>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => this.deleteAgendaItemModal.Hide()">Abbrechen</Button>
            <Button Color="Color.Danger" Clicked="() => DeleteAgendaItem()">Löschen</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="newPetitionModal">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Antrag stellen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="btn-group">
                @foreach (var category in petitionTypes.Select(n => n.PetitionType.Category).Distinct())
                {
                    <button class="btn btn-white @((activePetitionCategory == category) ? "active" : null)"
                            @onclick="() => activePetitionCategory = category">
                        @category
                        </button>
                    }
            </div>

            <div class="widget-list widget-list-rounded m-b-30" data-id="widget">

                @foreach (var petitionType in petitionTypes.Where(n => n.PetitionType.Category == activePetitionCategory))
                {
                    <a @onclick="() => MakePetition(petitionType.PetitionType.PetitionTypeId)" class="widget-list-item"
                       style="cursor: pointer;">
                        <div class="widget-list-media icon">
                            <i class="fa fa-comment @((petitionType.AllowDelegates && ViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate || petitionType.AllowNgo && ViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo) ? "bg-success" : "bg-inverse")  text-white"></i>
                        </div>
                        <div class="widget-list-content">
                            <h4 class="widget-list-title">@petitionType.PetitionType?.Name</h4>
                        </div>
                        <div class="widget-list-action text-right">
                            <i class="fa fa-angle-right fa-lg text-muted"></i>
                        </div>
                    </a>
                }
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideNewPetitionModal">Abbrechen</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private Modal createAgendaItemModal;

    private Modal deleteAgendaItemModal;

    private Modal newPetitionModal;

    private MUNityCore.Dtos.Simulations.AgendaItemInfo _selectedAgendaItem;
    private MUNityCore.Dtos.Simulations.AgendaItemInfo selectedAgendaItem
    {
        get => _selectedAgendaItem;
        set
        {
            _selectedAgendaItem = value;
            if (value != null)
                this.petitionsOfAgendaItem = simulationService.GetPetitionsOfAgendaItem(_selectedAgendaItem.AgendaItemId);
            else
                this.petitionsOfAgendaItem = null;
        }
    }

    private void HideNewPetitionModal()
    {
        this.newPetitionModal.Hide();
    }

    private MUNityCore.Dtos.Simulations.AgendaItemInfo deleteAgendaItem;

    private List<MUNityCore.Dtos.Simulations.AgendaItemInfo> AgendaItems { get; set; }

    private List<MUNity.Schema.Simulation.PetitionInfoDto> petitionsOfAgendaItem { get; set; }

    private List<MUNityCore.Models.Simulation.PetitionTypeSimulation> petitionTypes;

    private string activePetitionCategory;

    private class NewAgendaItemInput
    {
        public string Name { get; set; }

        public string Description { get; set; }
    }

    private NewAgendaItemInput newAgendaItem = new NewAgendaItemInput();

    private void ShowModal()
    {
        createAgendaItemModal.Show();
    }

    private void HideModal()
    {
        createAgendaItemModal.Hide();
    }

    private async Task CreateAgendaItem()
    {
        await ViewModel.CreateAgendaItem(newAgendaItem.Name, newAgendaItem.Description);
        this.HideModal();
    }

    private async Task DeleteAgendaItem()
    {
        await ViewModel.RemoveAgendaItem(this.deleteAgendaItem.AgendaItemId);
        this.deleteAgendaItem = null;
        this.deleteAgendaItemModal.Hide();
    }

    private async Task MakePetition(int typeId)
    {
        this.mainViewService.LoadingState = 0;
        await ViewModel.SubmitPetition(selectedAgendaItem.AgendaItemId, typeId);
        this.newPetitionModal.Hide();
        this.mainViewService.LoadingState = 100;
    }

    private async Task MakePetitionActive(string petitionId)
    {
        this.mainViewService.LoadingState = 0;
        await ViewModel.ActivatePetition(petitionId);
        this.mainViewService.LoadingState = 100;
    }

    private async Task RemovePetition(string petitionId)
    {
        await ViewModel.RemovePetition(petitionId);
    }

    protected override void OnInitialized()
    {
        if (this.ViewModel != null)
        {
            ReloadAgendaItems();
            this.petitionTypes = simulationService.GetPetitionTypesOfSimulation(this.ViewModel.SimulationId);

            ViewModel.AgendaItemCreated += OnAgendaItemCreated;
            ViewModel.AgendaItemRemoved += OnAgendaItemRemoved;
            ViewModel.PetitionAdded += OnPetitionAdded;
            ViewModel.PetitionActivated += OnPetitionActivated;
            ViewModel.PetitionRemoved += OnPetitionRemoved;
        }

        base.OnInitialized();
    }

    private void OnAgendaItemRemoved(object sender, int agendaItemId)
    {
        if (this.selectedAgendaItem != null && this.selectedAgendaItem.AgendaItemId == agendaItemId)
        {
            this.selectedAgendaItem = null;
        }


        if (this.deleteAgendaItem != null && this.deleteAgendaItem.AgendaItemId == agendaItemId)
            this.deleteAgendaItem = null;

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == agendaItemId);
        if (agendaItem != null)
        {
            this.AgendaItems.Remove(agendaItem);
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnPetitionRemoved(object sender, MUNity.Schema.Simulation.PetitionInteractedDto item)
    {
        this.mainViewService.LoadingState = 0;
        bool changesMade = false;

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == item.AgendaItemId);
        if (agendaItem != null)
        {
            agendaItem.PetitionCount--;
            changesMade = true;
        }

        var petitionElement = this.petitionsOfAgendaItem.FirstOrDefault(n => n.PetitionId == item.PetitionId);
        if (petitionElement != null)
        {
            this.petitionsOfAgendaItem.Remove(petitionElement);
            changesMade = true;
        }

        if (changesMade)
            InvokeAsync(StateHasChanged);

        this.mainViewService.LoadingState = 100;
    }

    private void OnAgendaItemCreated(object sender, MUNity.Schema.Simulation.AgendaItemDto item)
    {
        if (this.AgendaItems.All(n => n.AgendaItemId != item.AgendaItemId))
        {
            var newAgendaItem = new Dtos.Simulations.AgendaItemInfo()
            {
                AgendaItemId = item.AgendaItemId,
                Description = item.Description,
                Name = item.Name,
                PetitionCount = item.Petitions?.Count ?? 0
            };
            this.AgendaItems.Add(newAgendaItem);
            if (this.selectedAgendaItem == null)
            {
                this.selectedAgendaItem = newAgendaItem;
            }
            InvokeAsync(StateHasChanged);
        }

    }

    private void ReloadAgendaItems()
    {
        if (this.ViewModel == null)
            return;

        this.AgendaItems = simulationService.GetAgendaItemInfosForSim(this.ViewModel.SimulationId);
        if (this.AgendaItems.Count > 0)
        {
            this.selectedAgendaItem = this.AgendaItems.First();
        }
    }

    private void OnPetitionAdded(object sender, MUNity.Schema.Simulation.PetitionInfoDto petition)
    {

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == petition.AgendaItemId);
        if (agendaItem != null)
            agendaItem.PetitionCount++;

        if (this.selectedAgendaItem != null && this.selectedAgendaItem.AgendaItemId == petition.AgendaItemId &&
            this.petitionsOfAgendaItem != null)
        {
            if (this.petitionsOfAgendaItem.All(n => n.PetitionId != petition.PetitionId))
            {
                this.petitionsOfAgendaItem.Add(petition);
                this.petitionsOfAgendaItem = this.petitionsOfAgendaItem.OrderBy(n => n.OrderIndex).ThenBy(n => n.SubmitTime).ToList();
            }
        }
        this.InvokeAsync(this.StateHasChanged);
    }

    private void OnPetitionActivated(object sender, string petitionId)
    {
        if (this.selectedAgendaItem != null)
        {
            var petitionItem = this.petitionsOfAgendaItem.FirstOrDefault(n => n.PetitionId == petitionId);
            if (petitionItem != null)
            {
                petitionItem.Status = MUNity.Models.Simulation.EPetitionStates.Active;
                InvokeAsync(StateHasChanged);
            }
        }
    }
}
