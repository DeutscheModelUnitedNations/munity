@inject Services.SimulationService simulationService
@inject Services.SqlResolutionService resolutionService;



@if (!string.IsNullOrEmpty(selectedResolutionId))
{
    <MUNityCore.Components.Resolution.ResolutionEditorPro ResolutionId="@selectedResolutionId"
                                                          OnEditorClosed="EditorClosed" />
}
else
{
    <h3> Resolutionen </h3>

    <div class="row">
        <div class="col-12">
            <div class="form-group">
                <Label>Resolution öffnen</Label>
                <select class="form-control" @bind="@selectedResolutionId">
                    <option value="" disabled>Resolution auswählen</option>
                    @foreach (var resolution in resolutions)
                    {

                        <option value="@resolution.ResolutionId">@resolution.Name</option>
                    }
                </select>
                <button class="btn btn-primary" @onclick="() => UpdateResolutions()">Aktualisieren</button>
            </div>
            <div class="form-group">
                <label>Erstellen</label>
                <button class="btn btn-block btn-success mt-10"
                        @onclick="() => createNewModal.Show()">
                    Neue Resolution erstellen
                </button>
            </div>
        </div>
    </div>
}

<Modal @ref="createNewModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Neue Resolution</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="form">
                <Label>Neue Resolution erstellen:</Label>
                <div class="form-group">
                    <input type="text" class="form-control" @bind-value="titleOfNewResolution" placeholder="Titel der Resolution">
                </div>
                <button class="btn btn-sm btn-primary" @onclick="() => CreateNewResolution()">Resolution erstellen</button>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public int SimulationId { get; set; }

    private Modal createNewModal;

    private string titleOfNewResolution;

    private MUNityCore.Components.Resolution.ResolutionEditorPro.EResolutionMode resolutionMode;

    private string selectedResolutionId { get; set; } = "";

    private void EditorClosed()
    {
        this.selectedResolutionId = string.Empty;
    }

    private bool showResolutions = true;

    private List<MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo> resolutions =
        new List<MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo>();

    private void CreateNewResolution()
    {
        if (string.IsNullOrEmpty(titleOfNewResolution)) return;
        var created = resolutionService.CreateSimulationResolution(SimulationId, titleOfNewResolution, "");
        if (created != null)
        {
            var info = new MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo()
            {
                AllowAmendments = created.AllowOnlineAmendments,
                AllowPublicEdit = created.AllowPublicEdit,
                LastChangedTime = created.CreationDate,
                Name = created.Name,
                ResolutionId = created.ResolutionId
            };
            resolutions.Add(info);
            titleOfNewResolution = "";
            createNewModal.Hide();
        }
    }

    private async Task UpdateResolutions()
    {
        this.resolutions = await simulationService.GetResolutions(SimulationId);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateResolutions();
        await base.OnInitializedAsync();
    }
}
