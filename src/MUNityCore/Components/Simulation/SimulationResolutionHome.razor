@inject Services.SimulationService simulationService
@inject Services.SqlResolutionService resolutionService;
@inject Services.FrontendSimulationService frontendSimulationService;


@if (!string.IsNullOrEmpty(selectedResolutionId))
{
    <MUNityCore.Components.Resolution.ResolutionEditorPro ResolutionId="@selectedResolutionId"
                                                          OnEditorClosed="EditorClosed"
                                                          SimViewModel="@SimViewModel" />
}
else
{
    <h3> Resolutionen </h3>
    @if (resolutions != null)
    {
        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary btn-block" @onclick="() => UpdateResolutions()">Aktualisieren</button>
            </div>
        </div>

        <div class="row mt-2">
            @foreach (var resolution in resolutions)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12">
                    <!-- begin widget-card -->
                    <a @onclick="() => selectedResolutionId = resolution.ResolutionId" class="widget-card widget-card-rounded m-b-20" style="cursor: pointer;">
                        <div class="widget-card-cover"></div>
                        <div class="widget-card-content">
                            <h5 class="f-s-12 text-black-transparent-7"><b>Resolution</b></h5>
                            <h4 class="m-b-10 text-pink">@resolution.Name</h4>
                            <h5 class="text-black-transparent-7">@resolution.SubmitterName</h5>
                            <b class="text-black-transparent-7">@resolution.PreambleParagraphCount Präambelabsätze</b><br />
                            <b class="text-black-transparent-7">@resolution.OperativeParagraphCount Operative Absätze</b><br />
                            <b class="text-black-transparent-7">@resolution.AmendmentCount Änderungsanträge</b>
                        </div>
                        <div class="widget-card-content bottom">
                            <b class="text-black-transparent-7"><i class="fa @((resolution.AllowPublicEdit) ? "fa-edit" : "fa-lock")"></i> @((resolution.AllowPublicEdit) ? "Frei für Bearbeitung" : "Nur Leseansicht")</b>
                        </div>
                    </a>
                    <!-- end widget-card -->
                </div>
            }
        </div>
    }
    else
    {
        <p>Keine Resolutionen gefunden oder sie werden noch geladen :/</p>
    }

    <div class="form-group">
        <label>Erstellen</label>
        <button class="btn btn-block btn-success mt-10"
                @onclick="() => createNewModal.Show()">
            Neue Resolution erstellen
        </button>
    </div>

}

<Modal @ref="createNewModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Neue Resolution</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="form">
                <Label>Neue Resolution erstellen:</Label>
                <div class="form-group">
                    <input type="text" class="form-control" @bind-value="titleOfNewResolution" placeholder="Titel der Resolution">
                </div>
                <button class="btn btn-sm btn-primary" @onclick="() => CreateNewResolution()">Resolution erstellen</button>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
        [Parameter]
        public ViewModel.SimulationViewModel SimViewModel { get; set; }

        private Modal createNewModal;

        private string titleOfNewResolution;

        private string _selectedResolution;
        private string selectedResolutionId
        {
            get => _selectedResolution;
            set
            {
                if (value != _selectedResolution)
                {
                    _selectedResolution = value;
                    this.frontendSimulationService.SaveResolutionOpenedId(value).ConfigureAwait(false);
                }
            }
        }

    private async Task EditorClosed()
    {
        this.selectedResolutionId = string.Empty;
        await frontendSimulationService.SaveResolutionOpenedId(string.Empty);
    }

    private List<MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo> resolutions =
        new List<MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo>();

    private void CreateNewResolution()
    {
        if (string.IsNullOrEmpty(titleOfNewResolution) || SimViewModel == null) return;
        var created = resolutionService.CreateSimulationResolution(SimViewModel.SimulationId, titleOfNewResolution, "");
        if (created != null)
        {
            var info = new MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo()
            {
                AllowAmendments = created.AllowOnlineAmendments,
                AllowPublicEdit = created.AllowPublicEdit,
                LastChangedTime = created.CreationDate,
                Name = created.Name,
                ResolutionId = created.ResolutionId
            };
            resolutions.Add(info);
            titleOfNewResolution = "";
            createNewModal.Hide();
        }
    }

    private async Task UpdateResolutions()
    {
        if (SimViewModel == null)
            return;

        this.resolutions = await simulationService.GetResolutions(SimViewModel.SimulationId);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateResolutions();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lastResolutionId = await this.frontendSimulationService.GetLastOpenedResolutionId();
            if (!string.IsNullOrEmpty(lastResolutionId))
            {
                selectedResolutionId = lastResolutionId;
                this.StateHasChanged();
            }
        }
        //return base.OnAfterRenderAsync(firstRender);
    }
}
