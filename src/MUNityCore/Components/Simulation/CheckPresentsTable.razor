@inject Services.PresentsService presentsService;

<h1>Feststellungstabelle:</h1>

<Table>
    <TableHeader>
        <TableHeaderCell>Name</TableHeaderCell>
        <TableHeaderCell>Anwesend</TableHeaderCell>
        <TableHeaderCell>Abwesend</TableHeaderCell>
        <TableHeaderCell>Feststellungsdatum</TableHeaderCell>
    </TableHeader>
    <TableBody>
        @foreach (var slot in Presents.CheckedUsers.OrderBy(n => n.SimulationUser.Role.RoleType).ThenBy(n => n.SimulationUser.Role.Name))
        {
            <TableRow>
                <TableRowCell>@slot.SimulationUser.Role?.Name</TableRowCell>
                <TableRowCell>
                    @if (Presents.MarkedFinished)
                    {
                        if (slot.State == Models.Simulation.PresentsState.PresentsStates.Present)
                        {
                            <Heading Size="HeadingSize.Is3">
                                <Badge Color="Color.Success">
                                    <Icon Name="IconName.Check" />
                                </Badge>
                            </Heading>
                        }
                    }
                    else
                    {
                        <button class="btn @((slot.State == Models.Simulation.PresentsState.PresentsStates.Present) ? "btn-success" : "btn-outline-success")"
                                @onclick="() => MarkPresent(slot)">
                            Anwesend
                        </button>
                    }

                </TableRowCell>
                <TableRowCell>
                    @if (Presents.MarkedFinished)
                    {
                        @if (slot.State == Models.Simulation.PresentsState.PresentsStates.Absent)
                        {
                            <Heading Size="HeadingSize.Is3">
                                <Badge Color="Color.Danger">
                                    <Icon Name="IconName.Times" />
                                </Badge>
                            </Heading>
                        }

                    }
                    else
                    {
                        <button class="btn @((slot.State == Models.Simulation.PresentsState.PresentsStates.Absent) ? "btn-danger" : "btn-outline-danger")"
                                @onclick="() => MarkAbsent(slot)">
                            Abwesend
                        </button>
                    }

                </TableRowCell>
                <TableRowCell>
                    @((slot.RegistertTimestamp != null) ? slot.RegistertTimestamp.Value.ToString("HH:mm:ss") : "Nicht festgestellt")
                </TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@if (!Presents.MarkedFinished)
{
    <button class="btn btn-block btn-primary" @onclick="MarkFinished">Als abgeschlossen markieren!</button>
}

@code {
    [Parameter]
    public MUNityCore.Models.Simulation.SimulationPresents Presents { get; set; }

    [Parameter]
    public EventCallback PresentStateChanged { get; set; }

    private void MarkFinished()
    {
        this.presentsService.FinishCheck(this.Presents.SimulationPresentsId);
        this.PresentStateChanged.InvokeAsync();
    }

    private void MarkPresent(MUNityCore.Models.Simulation.PresentsState state)
    {
        this.presentsService.MarkPresent(state.PresentsStateId);
        this.PresentStateChanged.InvokeAsync();
    }

    private void MarkAbsent(MUNityCore.Models.Simulation.PresentsState state)
    {
        this.presentsService.MarkAbsent(state.PresentsStateId);
        this.PresentStateChanged.InvokeAsync();
    }
}
