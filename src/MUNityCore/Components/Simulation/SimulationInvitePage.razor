@inject Services.SimulationService simulationService;
@inject Services.FrontendSimulationService frontendSimulationService;
@inject NavigationManager navManager;
@page "/invite/{id}"

@if (validationState == InviteLinkValidationStates.Checking)
{
    <p>Einladung wird überprüft!</p>
}
else if (validationState == InviteLinkValidationStates.Invalid)
{
    <p>Einladungslink ungültig</p>
}
else if (validationState == InviteLinkValidationStates.Valid)
{

<h3>Willkommen im Raum @_invitation.SimulationName</h3>
    <div class="form-group">
        <label>Anzeigename</label>
        <input @bind="@displayName" type="text" class="form-control" />
    </div>
    <p>Deine Rolle: @((string.IsNullOrEmpty(_invitation.RoleName)) ? "Keine Rolle zugewiesen" : _invitation.RoleName)</p>
    <button class="btn btn-primary" @onclick="() => EnterSimulation()">Raum betreten</button>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private MUNity.Schema.Simulation.InvitationResponse _invitation;

    private string displayName
    {
        get => _invitation?.DisplayName;
        set
        {
            if (_invitation != null && value != this._invitation.DisplayName)
            {
                this._invitation.DisplayName = value;
                this.simulationService.SetUserDisplayName(_invitation.SimulationUserId, value);
            }


        }
    }

    private enum InviteLinkValidationStates
    {
        Checking,
        Valid,
        Invalid
    };

    private InviteLinkValidationStates validationState = InviteLinkValidationStates.Checking;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            _invitation = simulationService.ValidateInviteLink(Id);
            validationState = InviteLinkValidationStates.Valid;
        }
        else
        {
            validationState = InviteLinkValidationStates.Invalid;
        }

        base.OnInitialized();
    }

    private async Task EnterSimulation()
    {
        await this.frontendSimulationService.RemoveSimulationTokensForSimulation(_invitation.SimulationId);
        await this.frontendSimulationService.StoreSimulationToken(new MUNity.Schema.Simulation.SimulationTokenResponse()
        {
            Name = _invitation.SimulationName,
            Pin = "12345",
            SimulationId = _invitation.SimulationId,
            Token = _invitation.Token
        });

        navManager.NavigateTo(navManager.BaseUri + "simulation/" + _invitation.SimulationId.ToString());
    }
}
