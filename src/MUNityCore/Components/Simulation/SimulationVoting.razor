@inject Services.SimulationService simulationService;
@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.PresentsService presentsService;

@if (ViewModel != null && ViewModel.UserContext.IsChair)
{
<Row>
    <div class="col-12">
        <div class="panel panel-inverse panel-success">
            <div class="panel-heading ui-sortable-handle">
                <h4 class="panel-title">Neue Abstimmung erstellen</h4>
                @*<div class="panel-heading-btn">
                    <a class="btn btn-xs btn-icon btn-circle btn-success"><i class="fa fa-redo"></i></a>
                </div>*@
            </div>
            <div class="panel-body">
                <h3>Abstimmung erstellen</h3>
                <EditForm Model="@NewVoting" OnValidSubmit="@CreateVoting">
                    <div class="form-group row m-b-15">
                        <label class="col-form-label col-md-3">Anzeigetext</label>
                        <div class="col-md-9">
                            <input type="text" class="form-control m-b-5" @bind-value="NewVoting.DisplayName" placeholder="Anzeigetext">
                            <small class="f-s-12 text-grey-darker">Dieser Text wird allen als Thema der Abstimmung angezeigt.</small>
                        </div>
                    </div>
                    <div class="form-group row m-b-15">
                        <label class="col-form-label col-md-3">Anwesenheit verwenden</label>
                        <div class="col-md-9">
                            <Blazorise.Select TValue="int" @bind-SelectedValue="NewVoting.PresentsId" class="form-control">
                                <SelectItem TValue="int" Value="-1">Alle (Anwesenheit ignorieren)</SelectItem>
                                @if (currentPresents != null)
                                {
                                    <SelectItem TValue="int" Value="@currentPresents.SimulationPresentsId">Aktuelle Anwesenheit (festgestellt @currentPresents.CreatedTime.ToString("dd.MM HH:mm"))</SelectItem>
                                }
                            </Blazorise.Select>
                            <small class="f-s-12 text-grey-darker">Dieser Text wird allen als Thema der Abstimmung angezeigt.</small>
                        </div>
                    </div>
                    <div class="form-group row m-b-10">
                        <label class="col-md-3 col-form-label">Enthaltungen erlauben</label>
                        <div class="col-md-9 p-t-3">
                            <div class="switcher">
                                <input type="checkbox" name="switcher_checkbox_1" @bind-value="@NewVoting.AllowAbstention" id="switcher_checkbox_1" checked="@NewVoting.AllowAbstention">
                                <label for="switcher_checkbox_1"></label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group row m-b-10">
                        <label class="col-md-3 col-form-label">Nichtstaatlichen Akteuren erlauben abzustimmen</label>
                        <div class="col-md-9 p-t-3">
                            <div class="switcher">
                                <input type="checkbox" name="switcher_checkbox_2" @bind-value="@NewVoting.AllowNgoVote" id="switcher_checkbox_2" checked="@NewVoting.AllowNgoVote">
                                <label for="switcher_checkbox_2"></label>
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-success" type="submit">Abstimmung erstellen!</button>
                </EditForm>
                
            </div>
        </div>
    </div>
</Row>
}


<Row>
    <div class="col-lg-8">
        <div class="panel panel-inverse" data-sortable-id="ui-widget-1" style="">
            <div class="panel-heading ui-sortable-handle">
                <h4 class="panel-title">Aktuelle Abstimmung</h4>
                <div class="panel-heading-btn">
                    <a class="btn btn-xs btn-icon btn-circle btn-success"><i class="fa fa-redo" @onclick="() => ReloadCurrentVoting()"></i></a>
                </div>
            </div>
            <div class="panel-body">
                @if (currentVoting != null && currentVoting.Slots != null)
                {
                    <h3>@currentVoting.Name</h3>
                    <div class="progress rounded-corner m-b-15">
                        <div class="progress-bar bg-success" style="width: @(this.currentVoting.ProPercentageOverall)%">Dafür</div>
                        <div class="progress-bar bg-danger" style="width: @(this.currentVoting.ConPercentageOverall)%">Gegenstimmen</div>
                        <div class="progress-bar bg-primary" style="width: @(this.currentVoting.AbstentionPercentageOverall)%">Enthaltungen</div>
                    </div>

                    <p>
                        Stimmberechtigt: @this.currentVoting.Slots.Count <br />
                        Abgegebene Stimmen: @this.currentVoting.TotalGivenVotes <br />
                        Davon gezählte stimmen: @this.currentVoting.TotalValidVotes <br />
                        <span class="text-success">@this.currentVoting.ProVotes (@this.currentVoting.ProPercentage %) dafür</span>
                        <span class="text-gray">(@this.currentVoting.ProPercentageOverall % aller Stimmen inkl. Enthaltungen und nicht abgegebene Stimmen) </span>
                        <br />
                        <span class="text-danger">@this.currentVoting.ConVotes (@this.currentVoting.ConPercentage %) dagegen</span>
                        <span class="text-gray">(@this.currentVoting.ConPercentageOverall % aller Stimmen inkl. Enthaltungen und nicht abgegebene Stimmen) </span>
                        <br />
                        <span class="text-primary-darker">@this.currentVoting.AbstentionVotes Enthaltungen</span>
                        <span class="text-gray">(@this.currentVoting.AbstentionPercentageOverall % aller Stimmen inkl. Enthaltungen und nicht abgegebene Stimmen) </span>
                    </p>

                    @if (currentVoting.Slots.Any(n => n.SimulationUserId == ViewModel.UserContext.UserId && n.Choice == MUNity.Schema.Simulation.EVoteStates.NotVoted))
                    {
                        <div class="btn-group-lg">
                            <button class="btn btn-success m-1" @onclick="() => VoteOnCurrent(MUNity.Schema.Simulation.EVoteStates.Pro)">Dafür stimmen</button>
                            <button class="btn btn-danger m-1" @onclick="() => VoteOnCurrent(MUNity.Schema.Simulation.EVoteStates.Con)">Dagegen stimmen</button>
                            @if (currentVoting.AllowAbstention)
                        {
                            <button class="btn btn-primary m-1" @onclick="() => VoteOnCurrent(MUNity.Schema.Simulation.EVoteStates.Abstention)">Enthaltung</button>
                        }
                        </div>
                    }

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Entscheidung</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var slot in currentVoting.Slots)
                    {
                        <tr>

                            <td>@slot.RoleName (@slot.DisplayName)</td>
                            <td>
                                <h3>
                                    @if (slot.Choice == MUNity.Schema.Simulation.EVoteStates.Abstention)
                                    {
                                        <span class="badge badge-primary">Enthaltung</span>
                                    }
                                    else if (slot.Choice == MUNity.Schema.Simulation.EVoteStates.Con)
                                    {
                                        <span class="badge badge-danger">Dagegen</span>
                                    }
                                    else if (slot.Choice == MUNity.Schema.Simulation.EVoteStates.NotVoted)
                                    {
                                        <span class="badge badge-gray">Nicht abgestimmt</span>
                                    }
                                    else if (slot.Choice == MUNity.Schema.Simulation.EVoteStates.Pro)
                                    {
                                        <span class="badge badge-success">Dafür</span>

                                    }
                                </h3>
                            </td>
                        </tr>
                    }
                        </tbody>
                    </table>

                }
                else
                {
                    <p>Derzeit liegt keine Abstimmung vor. Drücke oben auf aktualisieren um die aktuelle Abstimmung neu zu laden.</p>
                }

            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="panel panel-inverse" data-sortable-id="ui-widget-1" style="">
            <div class="panel-heading ui-sortable-handle">
                <h4 class="panel-title">Vergangene Abstimmungen</h4>
                <div class="panel-heading-btn">
                    <a class="btn btn-xs btn-icon btn-circle btn-success" @onclick="ReloadPastVotings"><i class="fa fa-redo"></i></a>
                </div>
            </div>
            <div class="panel-body">
                @if (_oldVotings != null)
                {
                    if (_oldVotings.Count > 0)
                    {
                <div class="widget-list widget-list-rounded m-b-30">
                    @foreach (var oldVoting in _oldVotings)
                    {
                        <div class="widget-list-item">
                            <div class="widget-list-content">
                                <h4 class="widget-list-title">@oldVoting.Name</h4>
                                <p class="widget-list-desc">@oldVoting.ProCount dafür, @oldVoting.ConCount dagegen, @oldVoting.AbstentionCount Enthaltungen, @oldVoting.NotVotedCount Nicht abgestimmt</p>
                            </div>
                        </div>
                    }

                </div>
                    }
                    else
                    {

                    }
                }
            </div>
        </div>
    </div>
</Row>

@code {
    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private List<Dtos.Simulations.OldVotingDto> _oldVotings;

    private MUNityCore.Models.Simulation.SimulationPresents currentPresents;

    private class CreateNewVotingModel
    {
        public string DisplayName { get; set; }

        public bool AllowAbstention { get; set; } = false;

        public bool AllowNgoVote { get; set; } = false;

        public int PresentsId { get; set; } = -1;
    }

    private CreateNewVotingModel NewVoting = new CreateNewVotingModel();

    MUNity.Schema.Simulation.Voting.SimulationVotingDto currentVoting;

    protected override void OnInitialized()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.VotingCreated += OnVotingCreated;
            this.ViewModel.Voted += OnVoted;
            ReloadCurrentVoting();
            ReloadPastVotings();
            ReloadCurrentPresents();
        }

        base.OnInitialized();
    }

    private void OnVotingCreated(object sender, MUNity.Schema.Simulation.Voting.SimulationVotingDto dto)
    {
        this.currentVoting = dto;
        InvokeAsync(this.StateHasChanged);
    }

    private void OnVoted(object sender, MUNity.Schema.Simulation.VotedEventArgs args)
    {
        if (this.currentVoting.VotingId == args.VoteId)
        {
            var slot = this.currentVoting.Slots.FirstOrDefault(n => n.SimulationUserId == args.UserId);
            if (slot != null)
            {
                slot.Choice = args.Choice;
                InvokeAsync(this.StateHasChanged);
            }
        }
    }

    private void ReloadCurrentVoting()
    {
        if (this.ViewModel != null)
        {
            currentVoting = simulationService.GetCurrentVoting(ViewModel.SimulationId);
            InvokeAsync(this.StateHasChanged);
        }
    }

    private void ReloadPastVotings()
    {
        if (this.ViewModel != null)
        {
            _oldVotings = this.simulationService.GetPastVotings(this.ViewModel.SimulationId);
        }
    }

    private void ReloadCurrentPresents()
    {
        this.currentPresents = this.presentsService.GetLastPresentCheckOfSimulation(this.ViewModel.SimulationId);
    }

    private async Task VoteOnCurrent(MUNity.Schema.Simulation.EVoteStates choice)
    {
        await this.ViewModel.Vote(currentVoting.VotingId, choice);
    }

    private async Task CreateVoting()
    {
        if (NewVoting.PresentsId == -1)
        {
            await this.ViewModel.CreateVoting(NewVoting.DisplayName, NewVoting.AllowAbstention, NewVoting.AllowNgoVote);
        }
        else
        {
            await this.ViewModel.CreateVotingForPresentDelegates(NewVoting.PresentsId, NewVoting.DisplayName, NewVoting.AllowAbstention, NewVoting.AllowNgoVote);
        }

    }
}
