@page "/simulations";
@inject Services.SimulationService simulationService;
@inject Services.FrontendSimulationService frontendSimulationService;
@inject Blazored.LocalStorage.ILocalStorageService localStorageService;
@inject NavigationManager navManager;

@if (simulations != null)
{
    foreach (var simulation in simulations)
    {
        <div class="card bg-dark border-0 text-white">
            <div class="card-body">
                <h4 class="card-title">@simulation.Id @simulation.Name</h4>
                <p class="card-text">Rollen: @simulation.RoleNames</p>
                <p class="card-text">Slots: @simulation.SlotCount</p>
                @if (this.knownSimulations != null)
                {
                    if (this.knownSimulations.Any(n => n.SimulationId == simulation.Id))
                    {
                        <a @onclick="() => JoinSimulation(simulation.Id)" class="btn btn-sm btn-warning">Beitreten</a>
                    }
                    else
                    {
                        <a class="btn btn-sm btn-success" @onclick="() => { selectedSimulation = simulation; ShowModal(); }">Anmelden</a>
                    }
                }
            </div>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="panel panel-inverse" data-sortable-id="ui-widget-8" data-init="true">
                <div class="panel-heading ui-sortable-handle">
                    <h4 class="panel-title">Panel with Slimscroll</h4>
                    <div class="panel-heading-btn">
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-redo"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                        <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
                    </div>
                </div>
                <div class="panel-body">
                    <div class="slimScrollDiv" style="position: relative; overflow: hidden; width: auto; height: 280px;">
                        <div data-scrollbar="true" data-height="280px" data-init="true" style="overflow: hidden; width: auto; height: 280px;">
                            <p>
                                <span class="fa-stack fa-4x pull-left m-r-10 text-inverse">
                                    <i class="fab fa-twitter fa-stack-1x"></i>
                                </span>
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque sed enim arcu.
                                Ut posuere in ligula quis ultricies. In in justo turpis. Donec ut dui at massa gravida
                                interdum nec vitae justo. Quisque ullamcorper vehicula dictum. Nullam hendrerit interdum eleifend.
                                Aenean luctus sed arcu laoreet scelerisque. Vivamus non ullamcorper mauris, id sagittis lorem.
                                Proin tincidunt mauris et dolor mattis imperdiet. Sed facilisis mattis diam elementum adipiscing.
                            </p>
                            <p>
                                <span class="fa-stack fa-4x pull-right m-l-10 text-inverse">
                                    <i class="fab fa-google-plus fa-stack-1x"></i>
                                </span>
                                Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.
                                Ut ante velit, pretium non nisi a, egestas placerat diam. Nullam aliquet iaculis ultricies.
                                Aliquam volutpat, sapien quis volutpat elementum, ligula purus auctor diam, at vestibulum nulla augue
                                vel purus. Praesent ac nisl a magna tincidunt interdum sed in turpis. Maecenas nec condimentum risus.
                                In congue pretium est, eget euismod tortor ornare quis.
                            </p>
                            <p>
                                <span class="fa-stack fa-4x pull-left m-r-10 text-inverse">
                                    <i class="fab fa-facebook fa-stack-1x"></i>
                                </span>
                                Praesent eu ultrices justo. Vestibulum ante
                                ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae;
                                Cras mattis ipsum quis sapien consectetur fringilla.
                                Etiam sagittis sem tempus purus elementum, vitae pretium sapien porta. Curabitur iaculis ante ut aliquam luctus.
                                Vivamus ullamcorper blandit imperdiet. Ut egestas, orci id rhoncus cursus, orci risus scelerisque enim, eget mattis eros lacus quis ligula.
                                Vivamus ullamcorper urna eget hendrerit laoreet.
                            </p>
                            <p>
                                <span class="fa-stack fa-4x pull-right m-l-10 text-inverse">
                                    <i class="fab fa-apple fa-stack-1x"></i>
                                </span>
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.
                                Morbi accumsan velit dolor. Donec convallis eleifend magna, at euismod tellus convallis a.
                                Curabitur in nisi dolor. Cras viverra scelerisque orci, sed interdum ligula volutpat non.
                                Nunc eu enim ac neque tempor feugiat. Duis posuere lacus non magna eleifend,
                                non dictum sem feugiat. Duis eleifend condimentum pulvinar.
                            </p>
                        </div><div class="slimScrollBar" style="background: rgb(0, 0, 0); width: 7px; position: absolute; top: 0px; opacity: 0.4; display: none; border-radius: 7px; z-index: 99; right: 1px; height: 244.237px;"></div><div class="slimScrollRail" style="width: 7px; height: 100%; position: absolute; top: 0px; display: none; border-radius: 7px; background: rgb(51, 51, 51); opacity: 0.2; z-index: 90; right: 1px;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal @ref="modalRef">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>In Simulation anmelden</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Anzeigename</FieldLabel>
                    <TextEdit Placeholder="Dein Anzeigename" @bind-Text="displayName" />
                </Field>
                <Field>
                    <FieldLabel>Id/Kennung</FieldLabel>
                    <TextEdit Placeholder="Kennung" @bind-Text="userId" />
                </Field>
                <Field>
                    <FieldLabel>Passwort</FieldLabel>
                    <TextEdit Role="TextRole.Password" Placeholder="********" @bind-Text="userPass" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="() => LoginToSimulation()">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    List<MUNityCore.Dtos.Simulations.HomeScreenInfo> simulations;

    List<MUNity.Schema.Simulation.SimulationTokenResponse> knownSimulations;

    MUNityCore.Dtos.Simulations.HomeScreenInfo selectedSimulation;

    private Modal modalRef;

    private MUNity.Schema.Simulation.JoinAuthenticate joinAuthenticate;

    private string displayName;

    private string userId;

    private string userPass;

    private void ShowModal()
    {
        modalRef.Show();
    }

    private async Task LoginToSimulation()
    {
        if (this.selectedSimulation != null)
        {
            var simulationResponse = this.simulationService.JoinSimulation(selectedSimulation.Id, userId, userPass, displayName);
            if (simulationResponse != null)
            {
                this.knownSimulations.Add(simulationResponse);
                await this.localStorageService.SetItemAsync("munity_simsims", this.knownSimulations);
                this.HideModal();
            }
        }
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    protected override void OnInitialized()
    {
        simulations = simulationService.GetHomeScreenInfos();
    }

    private void JoinSimulation(int id)
    {
        var token = this.knownSimulations.FirstOrDefault(n => n.SimulationId == id);
        if (token != null)
        {
            this.frontendSimulationService.CurrentUserToken = token.Token;
            this.frontendSimulationService.CurrentSimulationId = id;
            navManager.NavigateTo("/simulation/" + id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.knownSimulations == null)
        {
            this.knownSimulations = await this.localStorageService.GetItemAsync<List<MUNity.Schema.Simulation.SimulationTokenResponse>>("munity_simsims");
            if (this.knownSimulations != null && this.knownSimulations.Count > 0)
            {
                var simsToDelete = new List<MUNity.Schema.Simulation.SimulationTokenResponse>();

                foreach (var knownSimulation in knownSimulations)
                {
                    var isValid = await this.simulationService.IsTokenValid(knownSimulation.SimulationId, knownSimulation.Token);
                    if (!isValid)
                    {
                        simsToDelete.Add(knownSimulation);
                    }
                }

                if (simsToDelete.Count > 0)
                {
                    foreach (var tr in simsToDelete)
                    {
                        knownSimulations.Remove(tr);
                    }
                    await this.localStorageService.SetItemAsync("munity_simsims", this.knownSimulations);
                    Console.WriteLine($"{simsToDelete.Count} Simulationen sind nicht mehr gültig!");
                }
            }
            else
            {
                this.knownSimulations = new List<MUNity.Schema.Simulation.SimulationTokenResponse>();
            }
            this.StateHasChanged();
        }

    }
}