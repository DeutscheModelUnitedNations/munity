@page "/simulations";
@inject Services.SimulationService simulationService;
@inject Services.FrontendSimulationService frontendSimulationService;
@inject Blazored.LocalStorage.ILocalStorageService localStorageService;
@inject NavigationManager navManager;

@if (simulations != null)
{
    foreach(var simulation in simulations)
    {
        <div class="card bg-dark border-0 text-white">
            <div class="card-body">
                <h4 class="card-title">@simulation.Name</h4>
                <p class="card-text">Rollen: @simulation.RoleNames</p>
                <p class="card-text">Slots: @simulation.SlotCount</p>
                @if (this.knownSimulations != null)
                {
                    if (this.knownSimulations.Any(n => n.SimulationId == simulation.Id))
                    {
                        <a @onclick="() => JoinSimulation(simulation.Id)" class="btn btn-sm btn-warning">Beitreten</a>
                    }
                    else 
                    {
                        <a>Anmelden</a>
                    }
                }
            </div>
        </div>
    }
}

@code {
    List<MUNityCore.Dtos.Simulations.HomeScreenInfo> simulations;

    List<MUNity.Schema.Simulation.SimulationTokenResponse> knownSimulations;

    protected override void OnInitialized()
    {
        simulations = simulationService.GetHomeScreenInfos();
    }

    private void JoinSimulation(int id)
    {
        var token = this.knownSimulations.FirstOrDefault(n => n.SimulationId == id);
        if (token != null)
        {
            this.frontendSimulationService.CurrentUserToken = token.Token;
            this.frontendSimulationService.CurrentSimulationId = id;
            navManager.NavigateTo("/simulation/" + id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.knownSimulations == null)
        {
            this.knownSimulations = await this.localStorageService.GetItemAsync<List<MUNity.Schema.Simulation.SimulationTokenResponse>>("munity_simsims");
                this.StateHasChanged();
        }
        
    }
}