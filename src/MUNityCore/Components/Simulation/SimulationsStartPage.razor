@page "/simulations";
@inject Services.SimulationService simulationService;
@inject Services.FrontendSimulationService frontendSimulationService;
@inject Blazored.LocalStorage.ILocalStorageService localStorageService;
@inject NavigationManager navManager;

@if (simulations != null)
{
    foreach (var simulation in simulations)
    {
        <div class="card bg-dark border-0 text-white">
            <div class="card-body">
                <h4 class="card-title">@simulation.Id @simulation.Name</h4>
                <p class="card-text">Rollen: @simulation.RoleNames</p>
                <p class="card-text">Slots: @simulation.SlotCount</p>
                @if (this.knownSimulations != null)
                {
                    if (this.knownSimulations.Any(n => n.SimulationId == simulation.Id))
                    {
                        <a @onclick="() => JoinSimulation(simulation.Id)" class="btn btn-sm btn-warning">Beitreten</a>
                    }
                    else
                    {
                        <a class="btn btn-sm btn-success" @onclick="() => { selectedSimulation = simulation; ShowModal(); }">Anmelden</a>
                    }
                }
            </div>
        </div>
    }

    <Modal @ref="modalRef">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>In Simulation anmelden</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Anzeigename</FieldLabel>
                    <TextEdit Placeholder="Dein Anzeigename" @bind-Text="displayName" />
                </Field>
                <Field>
                    <FieldLabel>Id/Kennung</FieldLabel>
                    <TextEdit Placeholder="Kennung" @bind-Text="userId" />
                </Field>
                <Field>
                    <FieldLabel>Passwort</FieldLabel>
                    <TextEdit Role="TextRole.Password" Placeholder="********" @bind-Text="userPass" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="() => LoginToSimulation()">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    List<MUNityCore.Dtos.Simulations.HomeScreenInfo> simulations;

    List<MUNity.Schema.Simulation.SimulationTokenResponse> knownSimulations;

    MUNityCore.Dtos.Simulations.HomeScreenInfo selectedSimulation;

    private Modal modalRef;

    private MUNity.Schema.Simulation.JoinAuthenticate joinAuthenticate;

    private string displayName;

    private string userId;

    private string userPass;

    private void ShowModal()
    {
        modalRef.Show();
    }

    private async Task LoginToSimulation()
    {
        if (this.selectedSimulation != null)
        {
            var simulationResponse = this.simulationService.JoinSimulation(selectedSimulation.Id, userId, userPass, displayName);
            if (simulationResponse != null)
            {
                this.knownSimulations.Add(simulationResponse);
                await this.localStorageService.SetItemAsync("munity_simsims", this.knownSimulations);
                this.HideModal();
            }
        }
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        simulations = await simulationService.GetHomeScreenInfos();
    }

    private void JoinSimulation(int id)
    {
        var token = this.knownSimulations.FirstOrDefault(n => n.SimulationId == id);
        if (token != null)
        {
            this.frontendSimulationService.CurrentUserToken = token.Token;
            this.frontendSimulationService.CurrentSimulationId = id;
            navManager.NavigateTo("/simulation/" + id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (this.knownSimulations == null)
        {
            this.knownSimulations = await this.localStorageService.GetItemAsync<List<MUNity.Schema.Simulation.SimulationTokenResponse>>("munity_simsims");
            if (this.knownSimulations != null && this.knownSimulations.Count > 0)
            {
                var simsToDelete = new List<MUNity.Schema.Simulation.SimulationTokenResponse>();

                foreach (var knownSimulation in knownSimulations)
                {
                    var isValid = await this.simulationService.IsTokenValid(knownSimulation.SimulationId, knownSimulation.Token);
                    if (!isValid)
                    {
                        simsToDelete.Add(knownSimulation);
                    }
                }

                if (simsToDelete.Count > 0)
                {
                    foreach (var tr in simsToDelete)
                    {
                        knownSimulations.Remove(tr);
                    }
                    await this.localStorageService.SetItemAsync("munity_simsims", this.knownSimulations);
                    Console.WriteLine($"{simsToDelete.Count} Simulationen sind nicht mehr gültig!");
                }
            }
            else
            {
                this.knownSimulations = new List<MUNity.Schema.Simulation.SimulationTokenResponse>();
            }
            this.StateHasChanged();
        }

    }
}