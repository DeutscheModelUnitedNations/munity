@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.SignalR.Client;
@using MUNity.Hubs;
@using MUNity.Extensions.LoSExtensions;
@page "/simulation/{id}"
@page "/simulation/{id}/{page}"
@inject Services.FrontendSimulationService frontService;
@inject Services.SpeakerlistHubService speakerlistHubService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JS;

@if (loadingState == LoadingStates.Loading)
{
    <Paragraph>Wird geladen</Paragraph>
}
else if (loadingState == LoadingStates.Forbid)
{
    <Paragraph>Du bist nicht berechtigt an dieser Simulation teilzunehmen.</Paragraph>
}
else
{

    <ListOfSpeakerHeader ShowList="ShowListCallback" />

    <div class="row">
        <div class="@((showListOfSpeakers) ? "col-lg-8" : "col-lg-12")">
            @if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Overview)
            {
                <SimulationUsers SimulationId="@simulationId" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Agenda)
            {
                <SimulationAgenda SimulationId="@frontService.CurrentSimulationId" Token="@frontService.CurrentUserToken" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Voting)
            {
                <SimulationVoting SimulationId="@simulationId" Token="@frontService.CurrentUserToken" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Resolutions)
            {
                <SimulationResolutionHome SimulationId="@simulationId" />
            }
        </div>

        @if (showListOfSpeakers)
        {
            <div class="col-lg-4">
                <MUNityCore.Components.ListOfSpeakers.ListOfSpeakersSimulationView />
            </div>
        }
    </div>


}

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Page { get; set; }

    private enum LoadingStates
    {
        Loading,
        Success,
        Forbid
    }

    private bool showListOfSpeakers = false;

    private LoadingStates loadingState = LoadingStates.Loading;

    private int simulationId = -1;

    MUNity.Schema.Simulation.GamePhases currentPhase { get; set; }

    private HubConnection _listOfSpeakersHub;

    private void ShowListCallback(bool value)
    {
        this.showListOfSpeakers = !this.showListOfSpeakers;
    }

    private void SurpressSocket(bool value)
    {
        this.surpressSocket = value;
    }

    private bool surpressSocket = false;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(Id, out simulationId))
        {
            frontService.TabChanged += delegate { this.StateHasChanged(); };
        }

        if (!string.IsNullOrEmpty(Page))
        {
            frontService.CurrentTabByString(Page);
        }

        await base.OnInitializedAsync();
    }

    private void RefreshSpeakerlistTimer()
    {
        if (this.frontService.CurrentSpeakerlist == null)
            return;
        if (this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer ||
            this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question ||
            this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            return;


        var result = await this.frontService.Init(this.simulationId);
        if (result)
        {
            this.loadingState = LoadingStates.Success;
        }
        else
        {
            this.loadingState = LoadingStates.Forbid;
        }
        this.StateHasChanged();

        //await JS.InvokeAsync<string>("App.init");


    }
}
