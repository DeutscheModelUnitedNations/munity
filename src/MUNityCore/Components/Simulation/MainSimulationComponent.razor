@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.SignalR.Client;
@using MUNity.Hubs;
@using MUNity.Extensions.LoSExtensions;
@page "/simulation/{id}"
@page "/simulation/{id}/{page}"
@inject Services.FrontendSimulationService frontService;
@inject Services.SpeakerlistHubService speakerlistHubService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JS;
@inject Services.MainViewService mainViewService;

@if (loadingState == LoadingStates.Loading)
{
    <Paragraph>Wird geladen</Paragraph>
}
else if (loadingState == LoadingStates.Forbid)
{
    <Paragraph>Du bist nicht berechtigt an dieser Simulation teilzunehmen.</Paragraph>
}
else if (loadingState == LoadingStates.Success && _simulationViewModel != null)
{

    <ListOfSpeakerHeader ShowList="ShowListCallback" ViewModel="@_simulationViewModel.SpeakerlistViewModel" SimViewModel="@_simulationViewModel" />

    <div class="row">
        <div class="@((showListOfSpeakers) ? "col-lg-8" : "col-lg-12")">
            @if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Overview)
            {
                <SimulationStatus ViewModel="@_simulationViewModel" />
                <SimulationUsers ViewModel="@_simulationViewModel" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Agenda)
            {
                <SimulationAgenda ViewModel="@_simulationViewModel" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Voting)
            {
                <SimulationVoting ViewModel="@_simulationViewModel" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Resolutions)
            {
                <SimulationResolutionHome SimViewModel="@_simulationViewModel" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Protocol)
            {
                <SimulationProtocol SimulationId="@_simulationViewModel.SimulationId" />
            }
            else if (frontService.CurrentTab == Services.FrontendSimulationService.SimulationTabs.Presents)
            {
                <SimulationPresents SimViewModel="@_simulationViewModel" />
            }
        </div>

        @if (showListOfSpeakers)
        {
            <div class="col-lg-4">
                <MUNityCore.Components.ListOfSpeakers.ListOfSpeakersSimulationView ViewModel="@_simulationViewModel.SpeakerlistViewModel"
                                                                                   SimViewModel="@_simulationViewModel"/>
            </div>
        }
    </div>
}
else
{
    <p>Fehler beim Laden der Simulation :(</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Page { get; set; }

    private enum LoadingStates
    {
        Loading,
        Success,
        Forbid,
        Errored
    }

    private bool showListOfSpeakers = false;

    private LoadingStates loadingState = LoadingStates.Loading;

    MUNity.Schema.Simulation.GamePhases currentPhase { get; set; }

    private ViewModel.SimulationViewModel _simulationViewModel;

    private void ShowListCallback(bool value)
    {
        this.showListOfSpeakers = !this.showListOfSpeakers;
    }

    private void SurpressSocket(bool value)
    {
        this.surpressSocket = value;
    }

    private bool surpressSocket = false;

    protected override async Task OnInitializedAsync()
    {


        if (!string.IsNullOrEmpty(Page))
        {
            frontService.CurrentTabByString(Page);
        }

        await base.OnInitializedAsync();
    }

    private void RefreshSpeakerlistTimer()
    {
        if (this.frontService.CurrentSpeakerlist == null)
            return;
        if (this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer ||
            this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question ||
            this.frontService.CurrentSpeakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            return;

        try
        {
            int simulationId = -1;
            if (int.TryParse(Id, out simulationId))
            {
                frontService.TabChanged += delegate { this.StateHasChanged(); };
                _simulationViewModel = await this.frontService.GetOrInitViewModel(simulationId);
                if (_simulationViewModel != null)
                {
                    if (_simulationViewModel.UserContext == null)
                    {
                        await this.frontService.EnsureUserContext(_simulationViewModel);
                    }
                    this.loadingState = LoadingStates.Success;
                }
                else
                {
                    this.loadingState = LoadingStates.Forbid;
                }
            }


        }
        catch (Exception ex)
        {
            this.loadingState = LoadingStates.Errored;
            Console.WriteLine($"Error while loading the Simulation Main Component: {ex}");
            if (ex.StackTrace != null)
            {
                Console.WriteLine(ex.StackTrace);
            }
        }
        this.mainViewService.LoadingState = 100;
        this.StateHasChanged();

        //await JS.InvokeAsync<string>("App.init");


    }
}
