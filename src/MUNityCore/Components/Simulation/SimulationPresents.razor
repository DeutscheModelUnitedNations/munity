@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.PresentsService presentsService;

@if (SimViewModel != null && SimViewModel.UserContext != null && SimViewModel.UserContext.IsChair)
{
    <h3>Anwesenheit</h3>

    <button class="btn btn-block btn-primary" @onclick="CreateNewPresentsCheck">Neue Anwesenheitsfeststellung</button>

    @if (presents != null)
    {
        <h1>Anwesenheitsfeststellung</h1>
        <h4>Gestartet: @presents.CreatedTime.ToString("dd.MM.yyyy HH:mm:ss")</h4>
        <h4>Status: @((presents.MarkedFinished) ? "Abgeschlossen" : "Im Gange")</h4>

        <Table>
            <TableHeader>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Anwesend</TableHeaderCell>
                <TableHeaderCell>Abwesend</TableHeaderCell>
                <TableHeaderCell>Feststellungsdatum</TableHeaderCell>
            </TableHeader>
            <TableBody>
                @foreach(var slot in presents.CheckedUsers)
                {
                <TableRow>
                    <TableRowCell>@slot.SimulationUser.Role?.Name</TableRowCell>
                    <TableRowCell>
                        <button class="btn @((slot.State == Models.Simulation.PresentsState.PresentsStates.Present) ? "btn-success" : "btn-outline-success")"
                                @onclick="() => MarkPresent(slot)">Anwesend</button>
                    </TableRowCell>
                    <TableRowCell>
                        <button class="btn @((slot.State == Models.Simulation.PresentsState.PresentsStates.Absent) ? "btn-danger" : "btn-outline-danger")"
                                @onclick="() => MarkAbsent(slot)">Abwesend</button>
                    </TableRowCell>
                    <TableRowCell>
                        @((slot.RegistertTimestamp != null) ? slot.RegistertTimestamp.Value.ToString("HH:mm:ss") : "Nicht festgestellt")
                    </TableRowCell>
                </TableRow>
                }
            </TableBody>
        </Table>

        <button class="btn btn-block btn-primary" @onclick="MarkFinished">Als abgeschlossen markieren!</button>
    }
}

@code {
    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    private MUNityCore.Models.Simulation.SimulationPresents presents;

    private void CreateNewPresentsCheck()
    {
        this.presents = presentsService?.CreatePresentsCheck(SimViewModel.SimulationId);
    }

    private void MarkPresent(MUNityCore.Models.Simulation.PresentsState state)
    {
        this.presentsService.MarkPresent(state.PresentsStateId);
    }

    private void MarkAbsent(MUNityCore.Models.Simulation.PresentsState state)
    {
        this.presentsService.MarkAbsent(state.PresentsStateId);
    }

    private void MarkFinished()
    {
        this.presentsService.FinishCheck(this.presents.SimulationPresentsId);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (SimViewModel != null)
        {
            this.presents = presentsService.GetLastPresentCheckOfSimulation(SimViewModel.SimulationId);
        }
    }
}
