@inject Services.FrontendSimulationService frontendSimulationService;
@inject IJSRuntime jsRuntime;

<div class="row bg-dark text-white @((OffsetMargin) ? "remove-padding" : null) ">

    @if (ViewModel != null)
    {
        <!-- Redeliste -->
        <div class="col-lg-3 col-sm-8 col-xs-9 mt-2 mb-2">
            <div class="row ml-2 ml-xs-0">
                <span class="text-sm-left text-white">Aktuelle*r Redner*in</span>
            </div>
            <div class="row ml-3 ml-xs-0">
                <h4>@((ViewModel.Speakerlist.CurrentSpeaker != null) ? ViewModel.Speakerlist.CurrentSpeaker.Name : "Niemand")</h4>
            </div>
            <div class="row ml-2" style="margin-top: -5px;">
                <span class="text-sm-left text-white">@ViewModel.Speakerlist.Speakers.Count() warten</span>
            </div>
        </div>

        <div class="col-lg-2 col-sm-4 col-xs-3  mt-2 mb-2">
            <div class="row">
                <span class="text-sm-left text-white">Zeit</span>
            </div>
            <div class="row">
                <h4 class="speakerTimer">@this.ViewModel.Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss")</h4>
            </div>
            <div class="row" style="margin-top: -5px;">
                @if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer ||
                 this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.AnswerPaused)
                {
                    <span class="text-sm-left text-white">@ViewModel.Speakerlist.QuestionTime.ToString(@"mm\:ss")</span>
                }
                else
                {
                    <span class="text-sm-left text-white">@ViewModel.Speakerlist.SpeakerTime.ToString(@"mm\:ss")</span>
                }

            </div>
        </div>

        <!-- Fragen und Kurzbemerkungen -->
        <div class="col-lg-3 col-sm-8 col-xs-9  mt-2 mb-2">
            <div class="row ml-2">
                <span class="text-sm-left text-white">Fragen und Kurzbemerkungen</span>
            </div>
            <div class="row ml-3">
                <h4>@((ViewModel.Speakerlist.CurrentQuestion != null) ? ViewModel.Speakerlist.CurrentQuestion.Name : "Niemand")</h4>
            </div>
            <div class="row ml-2" style="margin-top: -5px;">
                <span class="text-sm-left text-white">
                    @((ViewModel.Speakerlist.Questions.Any()) ? "danach: " + ViewModel.Speakerlist.Questions.First().Name : null)
                    @((ViewModel.Speakerlist.Questions.Any() && ViewModel.Speakerlist.Questions.Count() > 1) ? " +" + (ViewModel.Speakerlist.Questions.Count() - 1).ToString() : null)
                </span>
            </div>
        </div>

        <div class="col-lg-2 col-sm-4 col-xs-3  mt-2 mb-2">
            <div class="row">
                <span class="text-sm-left text-white">Zeit</span>
            </div>
            <div class="row">
                <h4 class="questionTimer">@((this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds > 0) ? this.ViewModel.Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss") : "Zum Ende kommen")</h4>
            </div>
            <div class="row" style="margin-top: -5px;">
                <span class="text-sm-left text-white">@ViewModel.Speakerlist.QuestionTime.ToString(@"mm\:ss")</span>
            </div>
        </div>

        @if (ShowToggleButton)
        {
            <div class="col-lg-2 align-self-center col-sm-12 col-xs-12">
                <a class="btn @((showListOfSpeakers) ? "btn-primary" : "btn-default") btn-lg"
                   @onclick="() => { ShowList.InvokeAsync(showListOfSpeakers); showListOfSpeakers = !showListOfSpeakers; }">
                    <i class="fa fa-comment"></i>
                    @((showListOfSpeakers) ? "Redeliste ausblenden" : "Redeliste anzeigen")
                </a>
            </div>
        }

    }
</div>

<style>
    @@media (max-width: 767px) {
        .hidden-xs {
            display: none !important;
        }

        .remove-padding {
            margin: -20px -30px 10px -30px;
        }
    }

    @@media (min-width: 768px) {
        .remove-padding {
            margin: -25px -30px 10px -30px;
        }
    }
</style>

@code {
    [Parameter]
    public ViewModel.SpeakerlistViewModel ViewModel { get; set; }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    [Parameter]
    public EventCallback<bool> ShowList { get; set; }

    [Parameter]
    public bool ShowToggleButton { get; set; } = true;

    [Parameter]
    public bool OffsetMargin { get; set; } = true;

    private bool showListOfSpeakers = false;

    private System.Timers.Timer refreshTimer;

    private string speakerTimeClass
    {
        get
        {
            if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking ||
            this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer)
            {
                if (this.ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds > 10)
                {
                    return "text-primary";
                }
                else
                {
                    return "text-danger";
                }
            }
            else
            {
                return "text-white";
            }
        }
    }

    private string questionTimeClass
    {
        get
        {
            if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
            {
                if (this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds > 10)
                {
                    return "text-primary";
                }
                else
                {
                    return "text-danger";
                }
            }
            else
            {
                return "text-white";
            }
        }
    }



    protected override void OnInitialized()
    {
        this.ViewModel.SpeakerlistChanged += delegate {
            HandleSpeakerlistToJavaScript();
            this.StateHasChanged();
        };
        //this.ViewModel.SpeakerStarted += delegate {  };
        //this.refreshTimer = new System.Timers.Timer(1000);
        //this.refreshTimer.Elapsed += OnTimeTick;
        //this.refreshTimer.Start();
        base.OnInitialized();
        this.HandleSpeakerlistToJavaScript();
    }

    private void OnTimeTick(object sender, System.Timers.ElapsedEventArgs args)
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer ||
        this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question ||
        this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void HandleSpeakerlistToJavaScript()
    {
        if (this.ViewModel == null)
            return;

        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking ||
            this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer)
        {
            this.jsRuntime.InvokeVoidAsync("startSpeakerTimer", (int)this.ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds, "speakerTimer");
            this.jsRuntime.InvokeVoidAsync("pauseQuestionTimer", (int)this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds, "questionTimer");
        }
        else if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.SpeakerPaused ||
            this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.AnswerPaused)
        {
            this.jsRuntime.InvokeVoidAsync("pauseQuestionTimer", (int)this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds, "questionTimer");
            this.jsRuntime.InvokeVoidAsync("pauseSpeakerTimer", (int)this.ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds, "speakerTimer");
        }
        else if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Stopped)
        {
            this.jsRuntime.InvokeVoidAsync("resetSpeakerTimer", (int)this.ViewModel.Speakerlist.SpeakerTime.TotalSeconds, "speakerTimer");
            this.jsRuntime.InvokeVoidAsync("resetQuestionTimer", (int)this.ViewModel.Speakerlist.QuestionTime.TotalSeconds, "questionTimer");
        }
        else if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            this.jsRuntime.InvokeVoidAsync("pauseSpeakerTimer", (int)this.ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds, "speakerTimer");
            this.jsRuntime.InvokeVoidAsync("startQuestionTimer", (int)this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds, "questionTimer");
        }
        else if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.QuestionPaused)
        {
            this.jsRuntime.InvokeVoidAsync("pauseQuestionTimer", (int)this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds, "questionTimer");
        }
    }
}
