@inject Services.SqlResolutionService resolutionService;
@inject Services.FrontendSimulationService simulationService;
@inject NavigationManager navManager;

<div class="row">
    <div class="@((resolutionMode == EResolutionMode.Write) ? "col-lg-8" : "col-lg-12")  col-md-12">
        <div class="panel panel-inverse" data-sortable-id="ui-widget-1" style="">
            <div class="panel-heading ui-sortable-handle">
                <h4 class="panel-title">
                    Resolutionseditor <span class="badge badge-primary">Pro</span>
                    @if (simulationService.CurrentSimulation != null)
                    {
                        if (simulationService.CurrentSimulation.UserContext != null &&
                            (simulationService.CurrentSimulation.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate ||
                            simulationService.CurrentSimulation.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo) &&
                            _info != null &&
                            _info.AllowAmendments &&
                            resolutionMode == EResolutionMode.Read)
                        {
                            <button class="btn btn-success btn-sm ml-3" @onclick="() => createAmendmentModal.ShowModal()">Änderungsantrag einreichen</button>
                        }
                    }
                </h4>

                <div class="panel-heading-btn">
                    @*<a class="btn btn-xs btn-icon btn-circle btn-success"
                       @onclick="() => ReloadResolution()"><i class="fa fa-redo"></i></a>*@
                    @if (resolutionMode == EResolutionMode.Write)
                    {
                        <a class="btn btn-sm btn-icon btn-circle btn-primary"
                           @onclick="() => resolutionMode = EResolutionMode.Read"><i class="fa fa-glasses"></i></a>
                    }
                    else if (resolutionMode == EResolutionMode.Read && CanSwitchToEditMode)
                    {
                        <a class="btn btn-sm btn-icon btn-circle btn-secondary"
                           @onclick="() => resolutionMode = EResolutionMode.Write"><i class="fa fa-pen"></i></a>
                    }
                    <a class="btn btn-sm btn-icon btn-circle btn-danger"
                       @onclick="() => { this.OnEditorClosed.InvokeAsync(); this.DisposeViewModel(); }">X</a>
                </div>
            </div>
            <div class="panel-body bg-white-darker">
                @if (resolutionMode == EResolutionMode.Write && this._viewModel != null)
                {
                    <MUNityCore.Components.Resolution.ResolutionEditor ViewModel="@_viewModel"
                                                                       Info="@_info"
                                                                       SimViewModel="@SimViewModel"
                                                                       IsSignedIn="@IsSignedIn"
                                                                       OperativeParagraphsChanged="OnOperativeParagraphsChanged"/>
                }
                else if (resolutionMode == EResolutionMode.Read && this._viewModel != null)
                {
                    <MUNityCore.Components.Resolution.ResolutionReader ViewModel="@_viewModel" />
                }
            </div>
        </div>
    </div>
    @if (resolutionMode == EResolutionMode.Write && this._viewModel != null)
    {
        <div class="col-lg-4 col-md-12">
            <MUNityCore.Components.Resolution.AmendmentPanel ViewModel="@_viewModel"
                                                             AmendmentSubmitted="OnAmendmentSubmitted"
                                                             AmendmentDenied="OnAmendmentSubmitted"
                                                             AmendmentChanged="OnAmendmentChanged"/>
        </div>
    }
</div>

@if (_viewModel != null)
{
    <CreateAmendmentModal ViewModel="@_viewModel" @ref="createAmendmentModal" AmendmentCreated="OnAmendmentCreated" IsSekContext="@IsSignedIn" />
}

@code {

    private bool CanSwitchToEditMode
    {
        get
        {
            return (SimViewModel?.UserContext != null && SimViewModel.UserContext.IsChair || _info.AllowPublicEdit) || IsSignedIn;
        }
    }

    private CreateAmendmentModal createAmendmentModal;

    public enum EResolutionMode
    {
        None,
        Write,
        Read,
        ReadWithAmendments
    }

    [Parameter]
    public EResolutionMode resolutionMode { get; set; } = EResolutionMode.Write;

    [Parameter]
    public string ResolutionId { get; set; }

    [Parameter]
    public EventCallback OnEditorClosed { get; set; }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    [Parameter]
    public bool IsSignedIn { get; set; } = false;


    private ViewModel.ResolutionViewModel _viewModel;

    private MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo _info { get; set; }

    private void OnAmendmentCreated()
    {
        InvokeAsync(this.StateHasChanged);
    }

    private void OnOperativeParagraphsChanged()
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    private void OnAmendmentSubmitted(MUNity.Models.Resolution.AbstractAmendment amendment)
    {
        InvokeAsync(this.StateHasChanged);
    }

    private void OnAmendmentChanged()
    {
        InvokeAsync(this.StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadResolution();
        if (this._viewModel != null)
        {

        }



        await base.OnInitializedAsync();
    }

    private void DisposeViewModel()
    {
        this._viewModel.Dispose();
    }

    private async Task ReloadResolution()
    {
        var resolution = await resolutionService.GetResolutionDtoAsync(ResolutionId);
        if (resolution != null)
        {
            this._info = this.resolutionService.GetResolutionInfo(this.ResolutionId);
            if (!this._info.AllowPublicEdit)
                this.resolutionMode = EResolutionMode.Read;

            this._viewModel = await ViewModel.ResolutionViewModel.CreateViewModel(resolution, navManager.BaseUri + "resasocket");
            if (this._viewModel != null)
            {
                this._viewModel.PublicModeChanged += OnPublicModeChanged;
                this._viewModel.ChangedFromExtern += delegate { InvokeAsync(StateHasChanged); };
                if (this.simulationService.CurrentResolution != null)
                {
                    this.simulationService.CurrentResolution.Dispose();
                }
                this.simulationService.CurrentResolution = this._viewModel;
            }
        }



        this.StateHasChanged();
    }

    private void OnPublicModeChanged(object sender, MUNity.Models.Resolution.EventArguments.PublicModeChangedEventArgs args)
    {
        if (this._info != null && this.SimViewModel.UserContext != null && this._info.ResolutionId == args.ResolutionId)
        {
            if (args.AllowPublicEdit == false && !SimViewModel.UserContext.IsChair && resolutionMode == EResolutionMode.Write)
            {
                resolutionMode = EResolutionMode.Read;
            }
        }

        if (this._info != null && this._info.ResolutionId == args.ResolutionId)
        {
            _info.AllowPublicEdit = args.AllowPublicEdit;
        }
        InvokeAsync(StateHasChanged);
    }

}
