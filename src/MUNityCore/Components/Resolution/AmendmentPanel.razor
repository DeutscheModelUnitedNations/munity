@using MUNity.Extensions.ResolutionExtensions
@using MUNityCore.Dtos.Resolutions;

@inject Services.SqlResolutionService resolutionService;

@if (Resolution != null)
{
    <div class="panel panel-inverse" data-sortable-id="ui-widget-1" style="">
        <div class="panel-heading ui-sortable-handle">
            <h4 class="panel-title">Änderungsanträge <span class="badge badge-primary">@Resolution.OperativeSection.AmendmentCount()</span></h4>
            @*<div class="panel-heading-btn">

                <a class="btn btn-xs btn-icon btn-circle btn-primary"><i class="fa fa-arrow-circle-right"></i></a>
            </div>*@
        </div>
        <div class="panel-body bg-white-darker">
            <button class="btn btn-block btn-success mb-2"
                    @onclick="() => createModal?.ShowModal()">
                Neuer Änderungsantrag
            </button>
            @foreach (var amendment in Resolution.OperativeSection.GetOrderedAmendments())
            {
                <div class="card border-0 text-truncate mb-3 bg-dark text-white">
                    <!-- begin card-body -->
                    <div class="card-body">
                        <!-- begin title -->
                        <div class="mb-3 text-grey">
                            <b class="mb-3">
                                @((amendment is MUNity.Models.Resolution.AddAmendment) ? "Hinzufügen eines Absatzes" : null)
                                @((amendment is MUNity.Models.Resolution.ChangeAmendment) ? "Textänderung" : null)
                                @((amendment is MUNity.Models.Resolution.DeleteAmendment) ? "Streichen eines Absatzes" : null)
                                @((amendment is MUNity.Models.Resolution.MoveAmendment) ? "Verschieben eines Absatzes" : null)

                                @if (amendment is MUNity.Models.Resolution.ChangeAmendment changeAmendment)
                                {
                                    var targetParagrapg = Resolution.OperativeSection.FindOperativeParagraph(changeAmendment.TargetSectionId);
                                    if (targetParagrapg != null)
                                    {
                                        <span>@MUNityCore.Util.Tools.StringComputation.LevenshteinDistance(targetParagrapg.Text, changeAmendment.NewText) Levenshtein-Distance</span>
                                        <span>@Math.Round(MUNityCore.Util.Tools.StringComputation.StringDiff(targetParagrapg.Text, changeAmendment.NewText)) % Ähnlichkeit</span>
                                    }
                                }

                            </b>
                        </div>
                        <!-- end title -->
                        <!-- begin conversion-rate -->
                        <div class="d-flex align-items-center mb-1">
                            @if (amendment is MUNity.Models.Resolution.AddAmendment)
                            {
                                <h2>Virtual</h2>
                            }
                            else
                            {
                                <h2 class="text-white mb-0">Absatz: @Resolution.OperativeSection.GetIndexNameOfOperativeParagraph(amendment.TargetSectionId)</h2>
                            }

                            <div class="ml-auto" style="position: relative;">
                                <h3><i class="fa fa-eye-slash"></i></h3>
                            </div>
                        </div>

                        @if (amendment is MUNity.Models.Resolution.ChangeAmendment ca)
                        {
                            <div class="mb-4 text-grey text-wrap">
                                Neuer Text: @ca.NewText
                            </div>
                        }

                        <div class="mb-4 text-grey">
                            <i class="fa fa-flag"></i> @amendment.SubmitterName (@amendment.SubmitTime.ToString("dd.MM HH:mm"))
                        </div>

                        <div class="d-flex mb-2">
                            <button class="btn btn-block btn-outline-success"
                                    @onclick="() => SubmitAmendment(amendment)">
                                Annehmen
                            </button>
                        </div>

                        <div class="d-flex mb-2">
                            <button class="btn btn-block btn-outline-danger"
                                    @onclick="() => DenyAmendment(amendment)">
                                Ablehnen
                            </button>
                        </div>
                    </div>
                    <!-- end card-body -->
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Lade Änderungsanträge</p>
}

<CreateAmendmentModal @ref="@createModal" Resolution="@Resolution" AmendmentCreated="OnAmendmentCreated" />


@code {
    [Parameter]
    public MUNity.Models.Resolution.Resolution Resolution { get; set; }

    [Parameter]
    public EventCallback<MUNity.Models.Resolution.AbstractAmendment> AmendmentSubmitted { get; set; }

    [Parameter]
    public EventCallback<MUNity.Models.Resolution.AbstractAmendment> AmendmentDenied { get; set; }

    [Parameter]
    public EventCallback AmendmentChanged { get; set; }

    private CreateAmendmentModal createModal;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OnAmendmentCreated()
    {
        this.AmendmentChanged.InvokeAsync();
    }

    private void SubmitAmendment(MUNity.Models.Resolution.AbstractAmendment amendment)
    {
        if (amendment is MUNity.Models.Resolution.AddAmendment addAmendment)
        {
            var success = this.resolutionService.SubmitAddAmendment(addAmendment.Id);
            if (success)
            {
                addAmendment.Apply(this.Resolution.OperativeSection);
                this.AmendmentSubmitted.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.ChangeAmendment changeAmendment)
        {
            var success = this.resolutionService.SubmitChangeAmendment(changeAmendment.Id);
            if (success)
            {
                changeAmendment.Apply(this.Resolution.OperativeSection);
                this.AmendmentSubmitted.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.DeleteAmendment deleteAmendment)
        {
            var success = this.resolutionService.SubmitDeleteAmendment(deleteAmendment.Id);
            if (success)
            {
                deleteAmendment.Apply(this.Resolution.OperativeSection);
                this.AmendmentSubmitted.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.MoveAmendment moveAmendment)
        {
            var success = this.resolutionService.SubmitMoveAmendment(moveAmendment.Id);
            if (success)
            {
                moveAmendment.Apply(this.Resolution.OperativeSection);
                this.AmendmentSubmitted.InvokeAsync(amendment);
            }
        }
    }

    private void DenyAmendment(MUNity.Models.Resolution.AbstractAmendment amendment)
    {
        if (amendment is MUNity.Models.Resolution.AddAmendment addAmendment)
        {
            var success = this.resolutionService.RemoveAddAmendment(addAmendment.Id);
            if (success)
            {
                addAmendment.Deny(this.Resolution.OperativeSection);
                this.AmendmentDenied.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.ChangeAmendment changeAmendment)
        {
            var success = this.resolutionService.RemoveChangeAmendment(changeAmendment.Id);
            if (success)
            {
                changeAmendment.Deny(this.Resolution.OperativeSection);
                this.AmendmentDenied.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.DeleteAmendment deleteAmendment)
        {
            var success = this.resolutionService.RemoveDeleteAmendment(deleteAmendment.Id);
            if (success)
            {
                deleteAmendment.Deny(this.Resolution.OperativeSection);
                this.AmendmentDenied.InvokeAsync(amendment);
            }
        }
        else if (amendment is MUNity.Models.Resolution.MoveAmendment moveAmendment)
        {
            var success = this.resolutionService.RemoveMoveAmendment(moveAmendment.Id);
            if (success)
            {
                moveAmendment.Deny(this.Resolution.OperativeSection);
                this.AmendmentDenied.InvokeAsync(amendment);
            }
        }
    }
}
