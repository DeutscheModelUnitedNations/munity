@inject Services.SqlResolutionService resolutionService;
@inject Services.FrontendSimulationService simulationService;
@using MUNityCore.Extensions.CastExtensions;
@using MUNity.Extensions.ResolutionExtensions;

@if (ViewModel != null)
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light" style="margin: -15px -15px 0px -15px">

        <div class="row">
            <button class="btn btn-success m-r-3" @onclick="() => CreatePreambleParagraph()"><i class="fa fa-plus"></i> Neuer Präambelabsatz</button>
            <button class="btn btn-success m-r-3" @onclick="() => CreateOperativeParagraph()"><i class="fa fa-plus"></i> Neuer Operativer Absatz</button>
                @if (SimViewModel?.UserContext != null && SimViewModel.UserContext.IsChair || IsSignedIn)
                {
                        @if (this.Info.AllowPublicEdit)
                        {
                            <button class="btn btn-success"
                                    @onclick="() => AllowOnlyChairsToWrite()">
                        <i class="fa fa-pen-fancy"></i> Jeder darf schreiben
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger"
                                    @onclick="() => AllowEveryoneToWrite()">
                        <i class="fa fa-pen-fancy"></i> Nur Vorsitz darf schreiben
                            </button>
                        }
                }

                @*<li class="nav-item m-l-5">
            <button class="btn btn-primary"><i class="fa fa-window-restore"></i> Alle ausklappen</button>
        </li>*@
        </div>
    </nav>

    <div class="form-group">
        <label>Titel</label>
        <input class="form-control" @bind-value="@resolutionTopic" />
    </div>

    <div class="form-group">
        <label>Einbringer</label>
        <input class="form-control" @bind-value="@resolutionSubmitter" />
    </div>

    <div class="form-group">
        <label>Unterstützer</label>
        <input class="form-control" @bind-value="@resolutionSupporters" />
    </div>
    
    <div class="form-group">
        <label>Gremium</label>
        <input class="form-control" @bind-value="@resolutionCommittee" />
    </div>

    <h3 class="m-t-5">Präambel (@ViewModel.Resolution.Preamble.Paragraphs.Count Absätze)</h3>

    @foreach (var preambleParagraph in ViewModel.Resolution.Preamble.Paragraphs)
    {
        <PreambleParagraphEditor Paragraph="preambleParagraph"
                                 Index="@ViewModel.Resolution.Preamble.Paragraphs.IndexOf(preambleParagraph)"
                                 OnRemove="RemovePreambleParagraph"
                                 ParagraphMoved="OnParagraphMoved"
                                 ViewModel="@ViewModel" />
    }

    <h3>Operativer Abschnitt (@ViewModel.Resolution.OperativeSection.Paragraphs.Count(n => n.IsVirtual == false) Absätze)</h3>
    @foreach (var operativeParagraph in ViewModel.Resolution.OperativeSection.Paragraphs)
    {
        <OperativeParagraphEditor Paragraph="operativeParagraph"
                                  ParagraphMoved="OnParagraphMoved"
                                  ViewModel="@ViewModel"
                                  />
    }
}



@code {
    [Parameter]
    public ViewModel.ResolutionViewModel ViewModel { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo Info { get; set; }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    [Parameter]
    public bool IsSignedIn { get; set; } = false;

    [Parameter]
    public EventCallback OperativeParagraphsChanged { get; set; }

    private string resolutionTopic
    {
        get => ViewModel?.Resolution?.Header?.Topic ?? "";
        set
        {
            if (ViewModel?.Resolution?.Header != null)
            {
                ViewModel.Resolution.Header.Topic = value;
                this.ViewModel.SetTopic(value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionSubmitter
    {
        get => ViewModel?.Resolution?.Header?.SubmitterName ?? "";
        set
        {
            if (ViewModel?.Resolution?.Header != null)
            {
                ViewModel.Resolution.Header.SubmitterName = value;
                ViewModel.SetSubmitterName(value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionSupporters
    {
        get => ViewModel?.Resolution?.Header?.SupporterNames ?? "";
        set
        {
            if (ViewModel?.Resolution?.Header != null)
            {
                ViewModel.Resolution.Header.SupporterNames = value;
                ViewModel.SetSupporterNames(value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionCommittee
    {
        get => ViewModel?.Resolution?.Header?.CommitteeName ?? "";
        set
        {
            if (ViewModel?.Resolution?.Header != null)
            {
                ViewModel.Resolution.Header.CommitteeName = value;
                ViewModel.SetCommitteeName(value).ConfigureAwait(false);
            }
        }
    }

    private async Task CreatePreambleParagraph()
    {
        await ViewModel.AddPreambleParagraph();
    }

    private async Task RemovePreambleParagraph(MUNity.Models.Resolution.PreambleParagraph paragraph)
    {
        await ViewModel.DeletePreambleParagraph(paragraph.PreambleParagraphId);
    }

    private void OnParagraphMoved()
    {
        this.StateHasChanged();
    }

    private async Task CreateOperativeParagraph()
    {
        await ViewModel.AddOperativeParagraph();
    }

    private async Task AllowEveryoneToWrite()
    {
        await this.ViewModel.SetPublicEditMode(true);
    }

    private async Task AllowOnlyChairsToWrite()
    {
        await this.ViewModel.SetPublicEditMode(false);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.ViewModel != null)
        {
            this.ViewModel.ChangedFromExtern += delegate { InvokeAsync(StateHasChanged); };
        }
    }
}