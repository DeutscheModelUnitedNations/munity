@inject Services.SqlResolutionService resolutionService;
@inject Services.FrontendSimulationService simulationService;
@using MUNityCore.Extensions.CastExtensions;
@using MUNity.Extensions.ResolutionExtensions;

@if (Resolution != null)
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light" style="margin: -15px -15px 0px -15px">

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <button class="btn btn-success" @onclick="() => CreatePreambleParagraph()"><i class="fa fa-plus"></i> Neuer Präambelabsatz</button>
                </li>
                <li class="nav-item m-l-5">
                    <button class="btn btn-success" @onclick="() => CreateOperativeParagraph()"><i class="fa fa-plus"></i> Neuer Operativer Absatz</button>
                </li>
                @if (SimViewModel?.UserContext != null && SimViewModel.UserContext.IsChair || IsSignedIn)
                {
                    <li class="nav-item m-l-5">
                        @if (this.Info.AllowPublicEdit)
                        {
                            <button class="btn btn-success"
                                    @onclick="() => AllowOnlyChairsToWrite()">
                        <i class="fa fa-pen-fancy"></i> Jeder darf schreiben
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger"
                                    @onclick="() => AllowEveryoneToWrite()">
                        <i class="fa fa-pen-fancy"></i> Nur Vorsitz darf schreiben
                            </button>
                        }

                    </li>
                }

                @*<li class="nav-item m-l-5">
            <button class="btn btn-primary"><i class="fa fa-window-restore"></i> Alle ausklappen</button>
        </li>*@
            </ul>
        </div>
    </nav>

    <div class="form-group">
        <label>Titel</label>
        <input class="form-control" @bind-value="@resolutionTopic" />
    </div>

    <div class="form-group">
        <label>Einbringer</label>
        <input class="form-control" @bind-value="@resolutionSubmitter" />
    </div>

    <div class="form-group">
        <label>Unterstützer</label>
        <input class="form-control" @bind-value="@resolutionSupporters" />
    </div>
    
    <div class="form-group">
        <label>Gremium</label>
        <input class="form-control" @bind-value="@resolutionCommittee" />
    </div>

    <h3 class="m-t-5">Präambel (@Resolution.Preamble.Paragraphs.Count Absätze)</h3>

    @foreach (var preambleParagraph in Resolution.Preamble.Paragraphs)
    {
        <PreambleParagraphEditor Paragraph="preambleParagraph"
                                 ResolutionId="@Resolution.ResolutionId"
                                 Index="@Resolution.Preamble.Paragraphs.IndexOf(preambleParagraph)"
                                 OnRemove="RemovePreambleParagraph" />
    }

    <h3>Operativer Abschnitt (@Resolution.OperativeSection.Paragraphs.Count(n => n.IsVirtual == false) Absätze)</h3>
    @foreach (var operativeParagraph in Resolution.OperativeSection.Paragraphs)
    {
        <OperativeParagraphEditor Paragraph="operativeParagraph"
                                  ResolutionId="@Resolution.ResolutionId"
                                  SectionReference="Resolution.OperativeSection"
                                  ParagraphRemoved="OnOperativeParagraphRemoved"/>
    }
}



@code {
    [Parameter]
    public MUNity.Models.Resolution.Resolution Resolution { get; set; }

    [Parameter]
    public MUNity.Schema.Simulation.Resolution.ResolutionSmallInfo Info { get; set; }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    [Parameter]
    public bool IsSignedIn { get; set; } = false;

    [Parameter]
    public EventCallback OperativeParagraphsChanged { get; set; }

    private string resolutionTopic
    {
        get => Resolution?.Header?.Topic ?? "";
        set
        {
            if (Resolution?.Header != null)
            {
                Resolution.Header.Topic = value;
                this.resolutionService.SetTopicAsync(Resolution.ResolutionId, value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionSubmitter
    {
        get => Resolution?.Header?.SubmitterName ?? "";
        set
        {
            if (Resolution?.Header != null)
            {
                Resolution.Header.SubmitterName = value;
                this.resolutionService.SetSubmitterNameAsync(Resolution.ResolutionId, value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionSupporters
    {
        get => Resolution?.Header?.SupporterNames ?? "";
        set
        {
            if (Resolution?.Header != null)
            {
                Resolution.Header.SupporterNames = value;
                this.resolutionService.SetSupportersAsync(Resolution.ResolutionId, value).ConfigureAwait(false);
            }
        }
    }

    private string resolutionCommittee
    {
        get => Resolution?.Header?.CommitteeName ?? "";
        set
        {
            if (Resolution?.Header != null)
            {
                Resolution.Header.CommitteeName = value;
                this.resolutionService.SetCommitteeNameAsync(Resolution.ResolutionId, value).ConfigureAwait(false);
            }
        }
    }

    private void CreatePreambleParagraph()
    {
        var newParagraph = resolutionService.CreatePreambleParagraph(Resolution.ResolutionId);
        if (newParagraph != null)
        {
            this.Resolution.Preamble.Paragraphs.Add(newParagraph.ToModel());
        }
    }

    private void RemovePreambleParagraph(MUNity.Models.Resolution.PreambleParagraph paragraph)
    {
        if (resolutionService.RemovePreambleParagraph(paragraph.PreambleParagraphId))
        {
            this.Resolution.Preamble.Paragraphs.Remove(paragraph);
        }
    }

    private void OnOperativeParagraphRemoved(MUNity.Models.Resolution.OperativeParagraph paragraph)
    {
        var success = this.resolutionService.RemoveOperativeParagraph(paragraph.OperativeParagraphId);
        if (success)
        {
            Resolution.OperativeSection.RemoveOperativeParagraph(paragraph);
            OperativeParagraphsChanged.InvokeAsync();
        }

    }

    private void CreateOperativeParagraph()
    {
        var newParagraph = resolutionService.CreateOperativeParagraph(Resolution.ResolutionId);
        if (newParagraph != null)
        {
            this.Resolution.OperativeSection.Paragraphs.Add(newParagraph.ToModel());
        }
    }

    private void AllowEveryoneToWrite()
    {
        this.resolutionService.EnablePublicEdit(this.Resolution.ResolutionId);
        this.Info.AllowPublicEdit = true;
    }

    private void AllowOnlyChairsToWrite()
    {
        this.resolutionService.DisablePublicEdit(this.Resolution.ResolutionId);
        this.Info.AllowPublicEdit = false;
    }
}