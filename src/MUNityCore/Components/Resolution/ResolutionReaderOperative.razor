@using MUNity.Extensions.ResolutionExtensions;
@using Markdig;

@if (Paragraph != null && ViewModel?.Resolution != null)
{
    @if (Paragraph.IsVirtual)
    {
        @if (addAmendment != null)
        {
            @if (addAmendment.Activated)
            {
                <div class="text-success" style="font-size: 18px">
                    <b>Neuer Absatz (Wird behandelt)</b> <br />
                    <MUNityCore.Components.General.MarkdownView Content="@displayText" /><br />
                    Eingereicht durch: @addAmendment.SubmitterName <br />
                </div>
            }
            else
            {
                <div class="text-success">
                    <b>Neuer Absatz</b> <br />
                    <MUNityCore.Components.General.MarkdownView Content="@displayText" /><br />
                    Eingereicht durch: @addAmendment.SubmitterName <br />
                </div>
            }

        }

        @if (moveAmendment != null)
        {
            @if (moveAmendment.Activated)
            {
                <h2>
                    <span class="badge badge-primary">Neue Position</span>
                </h2>
            }
        }


    }
    else
    {
        @if (deleteAmendmentCount > 0)
        {
            <span class="badge badge-danger" @onclick="() => amendmentsModal.Show()" style="cursor: pointer;">@deleteAmendmentCount Anträge auf streichen</span>
        }


        @if (changeAmendmentCount > 0)
        {
            <span class="badge badge-primary" @onclick="() => amendmentsModal.Show()" style="cursor: pointer;">@changeAmendmentCount Anträge auf Textänderung</span>
        }

        @if (moveAmendmentsCount > 0)
        {
            <span class="badge badge-secondary" @onclick="() => amendmentsModal.Show()" style="cursor: pointer;">@moveAmendmentsCount Anträge auf Verschieben</span>
        }

        @if (ViewModel.Resolution.OperativeSection.DeleteAmendments.Any(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId))
        {
            <div style="font-size: 18px; text-decoration: line-through" class="text-danger">
                <MUNityCore.Components.General.MarkdownView Content="@displayText" />
            </div>
            <h4>
                <span class="badge badge-secondary">Aktuell behandelter Änderungsantrag auf Streichen <br /> Eingereicht durch @ViewModel.Resolution.OperativeSection.DeleteAmendments.FirstOrDefault(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId).SubmitterName</span>
            </h4>
        }
        else if (ViewModel.Resolution.OperativeSection.ChangeAmendments.Any(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId))
        {
            <div style="font-size: 18px; text-decoration: line-through" class="text-danger">
                <MUNityCore.Components.General.MarkdownView Content="@displayText" />
            </div>
            <div style="font-size: 18px" class="text-green-darker">@ViewModel.Resolution.OperativeSection.ChangeAmendments.FirstOrDefault(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId)?.NewText</div>
            <h4>
                <span class="badge badge-secondary">Aktuell behandelter Änderungsantrag auf Streichen <br /> Eingereicht durch @ViewModel.Resolution.OperativeSection.ChangeAmendments.FirstOrDefault(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId)?.SubmitterName</span>
            </h4>
        }
        else if (ViewModel.Resolution.OperativeSection.MoveAmendments.Any(n => n.Activated && n.TargetSectionId == Paragraph.OperativeParagraphId))
        {
            <div style="font-size: 18px; text-decoration: line-through" class="text-danger">
                <MUNityCore.Components.General.MarkdownView Content="@displayText" />
            </div>
        }
        else
        {
            <div style="font-size: 16px;">
                <MUNityCore.Components.General.MarkdownView Content="@displayText" />
            </div>
        }

    }

    <Modal @ref="amendmentsModal">
        <ModalContent>
            <ModalHeader>
                <ModalTitle>Änderungsanträge für diesen Absatz</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Table>
                    <TableHeader>
                        <TableHeaderCell>Art</TableHeaderCell>
                        <TableHeaderCell>Eingereicht von</TableHeaderCell>
                        <TableHeaderCell>Zeitpunkt</TableHeaderCell>
                        <TableHeaderCell>Neuer Text</TableHeaderCell>
                    </TableHeader>
                    <TableBody>
                        @foreach (var deleteAmendment in ViewModel.Resolution.OperativeSection.DeleteAmendments.Where(n => n.TargetSectionId == Paragraph.OperativeParagraphId))
                        {
                            <TableRow>
                                <TableRowCell>Streichen</TableRowCell>
                                <TableRowCell>@deleteAmendment.SubmitterName</TableRowCell>
                                <TableRowCell>@deleteAmendment.SubmitTime.ToString("dd.MM.yyyy HH:mm")</TableRowCell>
                                <TableRowCell>-</TableRowCell>
                            </TableRow>
                        }

                        @foreach (var changeAmendment in ViewModel.Resolution.OperativeSection.ChangeAmendments.Where(n => n.TargetSectionId == Paragraph.OperativeParagraphId))
                        {
                            <TableRow>
                                <TableRowCell>Textänderung</TableRowCell>
                                <TableRowCell>@changeAmendment.SubmitterName</TableRowCell>
                                <TableRowCell>@changeAmendment.SubmitTime.ToString("dd.MM.yyyy HH:mm")</TableRowCell>
                                <TableRowCell>@changeAmendment.NewText</TableRowCell>
                            </TableRow>
                        }

                        @foreach (var moveAmendment in ViewModel.Resolution.OperativeSection.MoveAmendments.Where(n => n.TargetSectionId == Paragraph.OperativeParagraphId))
                        {
                            <TableRow>
                                <TableRowCell>Verschieben</TableRowCell>
                                <TableRowCell>@moveAmendment.SubmitterName</TableRowCell>
                                <TableRowCell>@moveAmendment.SubmitTime.ToString("dd.MM.yyyy HH:mm")</TableRowCell>
                                <TableRowCell>-</TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
                </Table>
            </ModalBody>
        </ModalContent>
    </Modal>
}



@code {
    [Parameter]
    public MUNity.Models.Resolution.OperativeParagraph Paragraph { get; set; }

    [Parameter]
    public ViewModel.ResolutionViewModel ViewModel { get; set; }

    private Blazorise.Modal amendmentsModal;

    private int deleteAmendmentCount = 0;

    private int changeAmendmentCount = 0;

    private int moveAmendmentsCount = 0;

    private MUNity.Models.Resolution.AddAmendment addAmendment;

    private MUNity.Models.Resolution.MoveAmendment moveAmendment;

    private string displayText
    {
        get
        {
            if (!this.Paragraph.IsVirtual || this.Paragraph.IsVirtual && addAmendment != null)
            {
                return ViewModel?.Resolution?.OperativeSection?.GetIndexNameOfOperativeParagraph(Paragraph) + " " + Paragraph?.Text;
            }
            else if (this.Paragraph.IsVirtual && moveAmendment != null)
            {
                if (moveAmendment != null)
                {
                    var sourceParagraph = this.ViewModel.Resolution.OperativeSection.FindOperativeParagraph(moveAmendment.TargetSectionId);
                    if (sourceParagraph != null)
                    {

                    }
                }
            }
            return "";
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Paragraph != null && ViewModel?.Resolution != null)
        {
            deleteAmendmentCount = ViewModel.Resolution.OperativeSection.DeleteAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
            changeAmendmentCount = ViewModel.Resolution.OperativeSection.ChangeAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
            moveAmendmentsCount = ViewModel.Resolution.OperativeSection.MoveAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
            if (Paragraph.IsVirtual)
            {
                addAmendment = ViewModel.Resolution.OperativeSection.AddAmendments.FirstOrDefault(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
                moveAmendment = ViewModel.Resolution.OperativeSection.MoveAmendments.FirstOrDefault(n => n.NewTargetSectionId == Paragraph.OperativeParagraphId);
            }
            ViewModel.ChangedFromExtern += delegate
            {
                deleteAmendmentCount = ViewModel.Resolution.OperativeSection.DeleteAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
                changeAmendmentCount = ViewModel.Resolution.OperativeSection.ChangeAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
                moveAmendmentsCount = ViewModel.Resolution.OperativeSection.MoveAmendments.Count(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
                if (Paragraph.IsVirtual)
                {
                    addAmendment = ViewModel.Resolution.OperativeSection.AddAmendments.FirstOrDefault(n => n.TargetSectionId == Paragraph.OperativeParagraphId);
                    moveAmendment = ViewModel.Resolution.OperativeSection.MoveAmendments.FirstOrDefault(n => n.NewTargetSectionId == Paragraph.OperativeParagraphId);
                }
                InvokeAsync(StateHasChanged);
            };
        }
        //
    }
}
