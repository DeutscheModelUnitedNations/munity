@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.SpeakerlistService speakerlistService;
@inject Services.SpeakerlistHubService speakerlistHubService;

<div class="card border-0 text-truncate mb-3 bg-dark text-white">
    <div class="card-body">
        <div class="mb-3 text-grey">
            <b>Redeliste</b>
            @if (this.frontendSimulationService.CurrentSimulation.IsChair)
            {
                <button class="btn btn-sm btn-circle @resumeSpeakerButtonClass"
                        @onclick="() => ToggleSpeaking()">
                    <i class="fa @((ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking) ? "fa-pause" : "fa-play") "></i>
                </button>
                <button class="btn btn-sm btn-circle btn-primary"
                        @onclick="() => NextSpeaker()">
                    <i class="fa fa-step-forward"></i>
                </button>
                @if (ViewModel.Speakerlist.CurrentSpeaker != null)
                {
                    <button class="btn btn-sm btn-circle btn-danger"
                            @onclick="() => ClearSpeaker()">
                        <i class="fa fa-times"></i>
                    </button>
                }
            }
        </div>
        <div class="d-flex align-items-center mb-1">
            <h2 class="text-white mb-0">@((ViewModel.Speakerlist.CurrentSpeaker != null) ? ViewModel.Speakerlist.CurrentSpeaker.Name : "Niemand")</h2>
            <div class="ml-auto" style="position: relative;">
                <a href="javascript:;" title="Auf die Redeliste setzen"
                   class="btn btn-icon btn-circle @((isOnSpeakerlist) ? "btn-default disabled" : "btn-success")"
                   @onclick="() => AddMeToSpeakerlist()">
                    <i class="fa fa-plus"></i>
                </a>
            </div>
        </div>

        <div class="stats-progress progress bg-secondary" style="height: 2px;">
            <div class="progress-bar" style="width: @(RemainingSpeakerTimePercentage)%;"></div>
        </div>


        <div class="mb-4 text-grey">
            <i class="fa fa-clock"></i>
            @if (ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds > 0)
            {
                <span>@ViewModel.Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss") verbleibend</span>
            }
            else
            {
                @if (frontendSimulationService.CurrentSimulation.IsChair)
                {
                    <span class="text-red">@ViewModel.Speakerlist.RemainingSpeakerTime.ToString(@"mm\:ss") überzogen</span>
                }
                else
                {
                    <span class="text-red">Bitte zum Ende kommen!</span>
                }

            }
        </div>
        @foreach (var waitingSpeaker in ViewModel.Speakerlist.Speakers)
        {
    <div class="d-flex mb-2">
        <div class="d-flex align-items-center">
            @waitingSpeaker.Name
        </div>
        @if (this.frontendSimulationService.CurrentSimulation.IsChair)
        {
            <div class="d-flex align-items-center ml-auto">
                <button class="btn btn-sm btn-circle btn-danger"
                        @onclick="() => RemoveSpeaker(waitingSpeaker)">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        }

    </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public ViewModel.SpeakerlistViewModel ViewModel { get; set; }

    private System.Timers.Timer refreshTimer;

    public double RemainingSpeakerTimePercentage
    {
        get
        {
            if (this.ViewModel.Speakerlist.SpeakerTime.TotalSeconds == 0) return 0;
            return Math.Round(this.ViewModel.Speakerlist.RemainingSpeakerTime.TotalSeconds * 100 / this.ViewModel.Speakerlist.SpeakerTime.TotalSeconds);
        }
    }

    private string resumeSpeakerButtonClass
    {
        get
        {
            if (ViewModel.Speakerlist.CurrentSpeaker == null) return "disabled btn-default";
            if (ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking ||
                ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer)
                return "btn-warning";

            return "btn-success";
        }
    }

    private bool isOnSpeakerlist => ViewModel.Speakerlist.Speakers.Any(n => n.Name == this.frontendSimulationService.CurrentSimulation.RoleName);

    private void ClearSpeaker()
    {
        this.ViewModel.ClearSpeaker();
    }

    private async Task AddMeToSpeakerlist()
    {
        await this.frontendSimulationService.CurrentSimulation.AddMeToSpeakerlist();
    }

    private void NextSpeaker()
    {
        this.ViewModel.NextSpeaker();
    }

    private void ToggleSpeaking()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking ||
        this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer)
        {
            this.ViewModel.Pause();
        }
        else
        {
            this.ViewModel.ResumeSpeaker();
        }
    }

    private async Task RemoveSpeaker(MUNity.Models.ListOfSpeakers.Speaker speaker)
    {
        await this.ViewModel.RemoveSpeaker(speaker.Id);
    }

    protected override void OnInitialized()
    {
        this.refreshTimer = new System.Timers.Timer(1000);
        this.refreshTimer.Elapsed += delegate { RefreshView(); };
        this.refreshTimer.Start();
        base.OnInitialized();
    }

    private void RefreshView()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Speaking ||
            this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Answer)
        {
            InvokeAsync(this.StateHasChanged);
        }
    }
}
