@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.SpeakerlistService speakerlistService;
@inject Services.SpeakerlistHubService speakerlistHubService;

<div class="card border-0 text-truncate mb-3 bg-dark text-white">
    <div class="card-body">
        <div class="mb-3 text-grey">
            <b class="mb-3">Fragen und Kurzbemerkungen</b>
            @if (frontendSimulationService.CurrentSimulation.IsChair)
            {
                <button class="btn btn-sm btn-circle @resumeQuestionButtonClass"
                        @onclick="() => ToggleQuestion()">
                    <i class="fa @((ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question) ? "fa-pause" : "fa-play") "></i>
                </button>
                <button class="btn btn-sm btn-circle btn-primary"
                        @onclick="() => NextQuestion()">
                    <i class="fa fa-step-forward"></i>
                </button>
                @if (ViewModel.Speakerlist.CurrentQuestion != null)
                {
                    <button class="btn btn-sm btn-circle btn-danger"
                            @onclick="() => ViewModel.ClearQuestion()">
                        <i class="fa fa-times"></i>
                    </button>
                }
            }
        </div>
        <div class="d-flex align-items-center mb-1">
            <h2 class="text-white mb-0">@((ViewModel.Speakerlist.CurrentQuestion != null) ? ViewModel.Speakerlist.CurrentQuestion.Name : "Niemand")</h2>
            <div class="ml-auto" style="position: relative;">
                <a href="javascript:;" title="Auf die Redeliste setzen"
                   class="btn btn-icon btn-circle  @((isOnQuestions) ? "btn-default disabled" : "btn-success")"
                   @onclick="() => AddMeToQuestions()">
                    <i class="fa fa-plus"></i>
                </a>
            </div>
        </div>

        <div class="stats-progress progress bg-secondary" style="height: 2px;">
            <div class="progress-bar" style="width: @(RemainingQuestionTimePercentage)%;"></div>
        </div>


        <div class="mb-4 text-grey">
            <i class="fa fa-clock"></i>
            @if (ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds > 0)
            {
                <span>@ViewModel.Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss") verbleibend</span>
            }
            else
            {
                @if (frontendSimulationService.CurrentSimulation.IsChair)
                {
                    <span class="text-red">@ViewModel.Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss") überzogen</span>
                }
                else
                {
                    <span class="text-red">Bitte zum Ende kommen!</span>
                }

            }
        </div>
        @foreach (var waitingQuestion in ViewModel.Speakerlist.Questions)
        {
    <div class="d-flex mb-2">
        <div class="d-flex align-items-center">
            @waitingQuestion.Name
        </div>
        @if (frontendSimulationService.CurrentSimulation.IsChair)
        {
            <div class="d-flex align-items-center ml-auto">
                <button class="btn btn-sm btn-circle btn-danger"
                        @onclick="() => RemoveQuestion(waitingQuestion)">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        }

    </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public ViewModel.SpeakerlistViewModel ViewModel { get; set; }

    private System.Timers.Timer refreshTimer;

    public double RemainingQuestionTimePercentage
    {
        get
        {
            if (this.ViewModel.Speakerlist.QuestionTime.TotalSeconds == 0) return 0;
            return Math.Round(this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds * 100 / this.ViewModel.Speakerlist.QuestionTime.TotalSeconds);
        }
    }

    private string resumeQuestionButtonClass
    {
        get
        {
            if (ViewModel.Speakerlist.CurrentQuestion == null) return "disabled btn-default";
            if (ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question) return "btn-warning";
            return "btn-success";
        }
    }

    private bool isOnQuestions => ViewModel.Speakerlist.Questions.Any(n => n.Name == this.frontendSimulationService.CurrentSimulation.RoleName);

    private async Task AddMeToQuestions()
    {
        await this.frontendSimulationService.CurrentSimulation.AddMeToQuestions();
    }

    private void ToggleQuestion()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            this.ViewModel.Pause();
        }
        else
        {
            this.ViewModel.ResumeQuestion();
        }
    }

    private void NextQuestion()
    {
        this.ViewModel.NextQuestion();
    }

    private void RemoveQuestion(MUNity.Models.ListOfSpeakers.Speaker speaker)
    {
        this.ViewModel.RemoveSpeaker(speaker.Id);
    }

    private void RefreshView()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            InvokeAsync(this.StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        this.refreshTimer = new System.Timers.Timer(1000);
        this.refreshTimer.Elapsed += delegate { RefreshView(); };
        this.refreshTimer.Start();
        base.OnInitialized();
    }
}
