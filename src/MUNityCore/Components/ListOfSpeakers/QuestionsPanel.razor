<div class="card border-0 text-truncate mb-3 bg-dark text-white">
    <div class="card-body">
        <div class="text-grey">
            <b class="mr-3">Fragen und Kurzbemerkungen</b>
            @if (SimViewModel.UserContext.IsChair)
            {
                <button class="btn btn-sm @resumeQuestionButtonClass"
                        @onclick="() => ToggleQuestion()">
                    <i class="fa @((ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question) ? "fa-pause" : "fa-play") "></i>
                    @((ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.QuestionPaused) ? "fortsetzen" : null)
                    @((ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question) ? "pausieren" : null)
                    @((ViewModel.Speakerlist.Status != MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question && ViewModel.Speakerlist.Status != MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.QuestionPaused) ? "Frage starten" : null)

                </button>
                <button class="btn btn-sm btn-primary"
                        @onclick="() => NextQuestion()">
                    <i class="fa fa-step-forward"></i>
                    nächste FuK
                </button>

            }
        </div>
        <div class="d-flex align-items-center mb-1">
            <h2 class="text-white mb-0">
                @if (ViewModel.Speakerlist.CurrentQuestion != null)
                {
                    @if (string.IsNullOrEmpty(ViewModel.Speakerlist.CurrentQuestion.Iso))
                    {
                        <img src="/img/flags/small/un.png" class="mr-2" />
                    }
                    else
                    {
                        <img src="/img/flags/small/@(ViewModel.Speakerlist.CurrentQuestion.Iso).png" class="mr-2" />
                    }
                    @ViewModel.Speakerlist.CurrentQuestion.Name

                    @if (SimViewModel.UserContext.IsChair)
                    {
                        <button class="btn btn-sm btn-danger ml-2"
                                @onclick="() => ViewModel.ClearQuestion()">
                            <i class="fa fa-times"></i>
                            Kopzeile leeren
                        </button>
                    }

                }
                else
                {
                    <span>-</span>
                }
            </h2>

            @if (this.SimViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo ||
              this.SimViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate)
            {
                <div class="ml-auto" style="position: relative;">
                    <button title="Auf die Fragen und Kurzbemerkungen Liste setzen"
                       class="btn btn-icon btn-circle  @((isOnQuestions || ViewModel.Speakerlist.QuestionsClosed) ? "btn-default disabled" : "btn-success")"
                       @onclick="() => AddMeToQuestions()">
                        <i class="fa @((ViewModel.Speakerlist.QuestionsClosed) ? "fa-lock" : "fa-plus")"></i>
                    </button>
                </div>
            }

        </div>

        <div class="stats-progress progress bg-secondary" style="height: 2px;">
            <div class="progress-bar" style="width: @(RemainingQuestionTimePercentage)%;"></div>
        </div>


        <div class="mb-4 text-grey">
            <i class="fa fa-clock"></i>
            @if (ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds > 0)
            {
                <span>@ViewModel.Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss") verbleibend</span>
            }
            else
            {
                @if (SimViewModel.UserContext.IsChair)
                {
                    <span class="text-red">@ViewModel.Speakerlist.RemainingQuestionTime.ToString(@"mm\:ss") überzogen</span>
                }
                else
                {
                    <span class="text-red">Bitte zum Ende kommen!</span>
                }

            }

            @if (SimViewModel.UserContext.IsChair && (ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question))
            {
                <a class="ml-1 alert-link text-success-lighter" style="cursor: pointer;" @onclick="() => AddTenSeconds()">+10 Sekunden</a>
                <a class="ml-1 alert-link text-danger" style="cursor: pointer;" @onclick="() => RemoveTenSeconds()">-10 Sekunden</a>
            }
        </div>


        @if (SimViewModel.UserContext.IsChair)
        {
            <div class="mb-4">
                @if (displayQuesitonTimeEditor)
                {
                    <div class="row">
                        <div class="input-group">
                            <input class="form-control" placeholder="mm:ss" @bind="@questionTimeInput" />
                            <button type="button" class="btn btn-primary"
                                    @onclick="SetQuestionTime">
                                <i class="fa fa-save"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <a class="btn-link" @onclick="() => displayQuesitonTimeEditor = true" style="cursor: pointer">FuK Zeit einstellen</a>
                }
            </div>
        }


        @foreach (var waitingQuestion in ViewModel.Speakerlist.Questions)
        {
            <div class="d-flex mb-2">
                <div class="d-flex align-items-center">
                    @if (string.IsNullOrEmpty(waitingQuestion.Iso))
                    {
                        <img src="/img/flags/small/un.png" class="mr-2" />
                    }
                    else
                    {
                        <img src="/img/flags/small/@(waitingQuestion.Iso).png" class="mr-2" />
                    }
                    @waitingQuestion.Name
                </div>
                @if (SimViewModel.UserContext.IsChair)
                {
                    <div class="d-flex align-items-center ml-auto">
                        <button class="btn btn-sm btn-circle btn-danger"
                                @onclick="() => RemoveQuestion(waitingQuestion)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                }

            </div>
        }

    </div>

    @if (SimViewModel.UserContext.IsChair)
    {
<div class="card-footer bg-dark-darker">
    <div class="row">
        <div class="input-group">
            <input class="form-control" placeholder="Jemanden auf die Redeliste setzen" @bind="@manualSpeakerName" />
            <button type="button" class="btn btn-primary"
                    @onclick="() => AddSpeakerManual()">
                <i class="fa fa-plus"></i>
            </button>
        </div>
    </div>
    
    <!-- Open Close List Button -->
    <div class="row">
        <button class="btn btn-block mt-2 @((ViewModel.Speakerlist.QuestionsClosed) ? "btn-outline-danger" : "btn-outline-success")"
                @onclick="ToggleListOpened">
            <i class="fa @((ViewModel.Speakerlist.QuestionsClosed) ? "fa-lock" : "fa-lock-open")"></i>
            @((ViewModel.Speakerlist.QuestionsClosed) ? "Liste ist geschlossen - Redeliste öffnen" : "Liste ist offen - Redeliste schließen")
        </button>
    </div>
</div>
    }
</div>

@code {
    [Parameter]
    public ViewModel.SpeakerlistViewModel ViewModel { get; set; }

    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    private System.Timers.Timer refreshTimer;

    private string manualSpeakerName;

    private bool displayQuesitonTimeEditor = false;

    private string questionTimeInput = "";

    private async Task ToggleListOpened()
    {
        if (this.ViewModel.Speakerlist.QuestionsClosed)
        {
            await this.ViewModel.OpenQuestions();
        }
        else
        {
            await this.ViewModel.CloseQuestions();
        }
    }

    private async Task SetQuestionTime()
    {
        TimeSpan newTime;
        if (TimeSpan.TryParseExact(questionTimeInput, @"mm\:ss", null, out newTime))
        {
            await this.ViewModel.SetQuestionTime(questionTimeInput);
            this.displayQuesitonTimeEditor = false;
        }
    }

    private async Task AddSpeakerManual()
    {
        if (!string.IsNullOrEmpty(manualSpeakerName))
        {
            await this.ViewModel.AddQuestion("un", manualSpeakerName);
            this.manualSpeakerName = "";
        }
    }

    public double RemainingQuestionTimePercentage
    {
        get
        {
            if (this.ViewModel.Speakerlist.QuestionTime.TotalSeconds == 0) return 0;
            return Math.Round(this.ViewModel.Speakerlist.RemainingQuestionTime.TotalSeconds * 100 / this.ViewModel.Speakerlist.QuestionTime.TotalSeconds);
        }
    }

    private string resumeQuestionButtonClass
    {
        get
        {
            if (ViewModel.Speakerlist.CurrentQuestion == null) return "disabled btn-default";
            if (ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question) return "btn-warning";
            return "btn-success";
        }
    }

    private bool isOnQuestions => ViewModel.Speakerlist.Questions.Any(n => n.Name == SimViewModel.UserContext.RoleName);

    private async Task AddMeToQuestions()
    {
        await SimViewModel.AddMeToQuestions();
    }

    private void ToggleQuestion()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            this.ViewModel.Pause();
        }
        else
        {
            this.ViewModel.ResumeQuestion();
        }
    }

    private void NextQuestion()
    {
        this.ViewModel.NextQuestion();
    }

    private void RemoveQuestion(MUNity.Models.ListOfSpeakers.Speaker speaker)
    {
        this.ViewModel.RemoveSpeaker(speaker.Id);
    }

    private void RefreshView()
    {
        if (this.ViewModel.Speakerlist.Status == MUNity.Models.ListOfSpeakers.ListOfSpeakers.EStatus.Question)
        {
            InvokeAsync(this.StateHasChanged);
        }
    }

    private async Task AddTenSeconds()
    {
        await this.ViewModel.AddQuestionSeconds(10);
    }

    private async Task RemoveTenSeconds()
    {
        await this.ViewModel.AddQuestionSeconds(-10);
    }

    protected override void OnInitialized()
    {
        this.refreshTimer = new System.Timers.Timer(1000);
        this.refreshTimer.Elapsed += delegate { RefreshView(); };
        this.refreshTimer.Start();
        base.OnInitialized();
    }
}
