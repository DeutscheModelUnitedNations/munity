// <auto-generated />
using System;
using MUNityAngular.DataHandlers.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MUNityAngular.Migrations
{
    [DbContext(typeof(MunityContext))]
    [Migration("20200325150036_RefactoringOne")]
    partial class RefactoringOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PowerRank")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.AuthKey", b =>
                {
                    b.Property<string>("AuthKeyValue")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GenerationDevice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GenerationIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuthKeyValue");

                    b.HasIndex("UserId");

                    b.ToTable("AuthKey");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Article")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResolutlyCommitteeCommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ResolutlyCommitteeCommitteeId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeDelegation", b =>
                {
                    b.Property<int>("CommitteeDelegationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.HasKey("CommitteeDelegationId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("DelegationId");

                    b.ToTable("CommitteeDelegations");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeLeader", b =>
                {
                    b.Property<int>("CommitteeLeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommitteeLeaderId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("UserId");

                    b.ToTable("CommitteeLeader");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeStatus", b =>
                {
                    b.Property<string>("CommitteeStatusId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("AgendaItem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CommitteeStatusId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeStatuses");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", b =>
                {
                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecretaryGeneralName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecretaryGeneralTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConferenceId");

                    b.HasIndex("CreationUserUserId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ConferenceUserAuth", b =>
                {
                    b.Property<int>("ConferenceUserAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanDeleteConference")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditGallerie")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditPublicRelations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditTeam")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanLinkResolutions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSendMails")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConferenceUserAuthId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("ConferenceUserAuths");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Delegation", b =>
                {
                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IconName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DelegationId");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.DelegationUser", b =>
                {
                    b.Property<int>("DelegationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DelegationUserId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("DelegationId");

                    b.HasIndex("UserId");

                    b.ToTable("DelegationUsers");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GalleryId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", b =>
                {
                    b.Property<string>("MediaImageId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("MediaImageId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("MediaImages");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaTag", b =>
                {
                    b.Property<int>("MediaTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MediaImageId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("TagName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MediaTagId");

                    b.HasIndex("MediaImageId");

                    b.ToTable("MediaTag");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", b =>
                {
                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OnlineCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PublicAmendment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PublicRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PublicWrite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResolutionId");

                    b.HasIndex("CreationUserUserId");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionConference", b =>
                {
                    b.Property<int>("ResolutionConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("ResolutionConferenceId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ResolutionId");

                    b.ToTable("ConferenceResolutions");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionUser", b =>
                {
                    b.Property<int>("ResolutionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("canRead")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResolutionUserId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("ResolutionUsers");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.TeamRole", b =>
                {
                    b.Property<int>("TeamRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentRoleTeamRoleId")
                        .HasColumnType("int");

                    b.HasKey("TeamRoleId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ParentRoleTeamRoleId");

                    b.ToTable("TeamRoles");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.TeamUser", b =>
                {
                    b.Property<int>("TeamUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("RoleTeamRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamUserId");

                    b.HasIndex("RoleTeamRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Forename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Housenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zipcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.UserAuths", b =>
                {
                    b.Property<int>("UserAuthsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateConference")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAuthsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAuths");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Admin", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.AuthKey", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", null)
                        .WithMany("Committees")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "ResolutlyCommittee")
                        .WithMany()
                        .HasForeignKey("ResolutlyCommitteeCommitteeId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeDelegation", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeLeader", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.CommitteeStatus", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserUserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ConferenceUserAuth", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.DelegationUser", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", null)
                        .WithMany("Images")
                        .HasForeignKey("GalleryId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaTag", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", null)
                        .WithMany("Tags")
                        .HasForeignKey("MediaImageId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserUserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionConference", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionUser", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.TeamRole", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.TeamRole", "ParentRole")
                        .WithMany()
                        .HasForeignKey("ParentRoleTeamRoleId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.TeamUser", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.TeamRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleTeamRoleId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.UserAuths", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
