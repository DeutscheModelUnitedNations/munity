// <auto-generated />
using System;
using MUNityAngular.DataHandlers.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MUNityAngular.Migrations
{
    [DbContext(typeof(MunityContext))]
    partial class MunityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.AuthKey", b =>
                {
                    b.Property<string>("AuthKeyValue")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GenerationDevice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GenerationIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuthKeyValue");

                    b.HasIndex("UserId");

                    b.ToTable("AuthKey");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GalleryId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", b =>
                {
                    b.Property<string>("MediaImageId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("int");

                    b.HasKey("MediaImageId");

                    b.HasIndex("GalleryId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("MediaImages");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaTag", b =>
                {
                    b.Property<int>("MediaTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MediaImageId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("TagName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MediaTagId");

                    b.HasIndex("MediaImageId");

                    b.ToTable("MediaTag");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", b =>
                {
                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OnlineCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PublicAmendment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PublicRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PublicWrite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResolutionId");

                    b.HasIndex("CreationUserUserId");

                    b.ToTable("Resolutions");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionConference", b =>
                {
                    b.Property<int>("ResolutionConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("ResolutionConferenceId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ResolutionId");

                    b.ToTable("ConferenceResolutions");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionUser", b =>
                {
                    b.Property<int>("ResolutionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("canRead")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResolutionUserId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("UserId");

                    b.ToTable("ResolutionUsers");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Article")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ResolutlyCommitteeCommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("ResolutlyCommitteeCommitteeId");

                    b.ToTable("Committee");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.CommitteeTopic", b =>
                {
                    b.Property<int>("CommitteeTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("TopicCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TopicDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TopicFullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TopicName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeTopicId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeTopic");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Conference", b =>
                {
                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceProjectProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConferenceId");

                    b.HasIndex("ConferenceProjectProjectId");

                    b.HasIndex("CreationUserUserId");

                    b.ToTable("Conference");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectAbbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectOrganisationOrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectOrganisationOrganisationId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("MUNityAngular.Models.Core.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Forename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Housenumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Mail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Zipcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MUNityAngular.Models.Organisation.Organisation", b =>
                {
                    b.Property<string>("OrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("OrganisationAbbreviation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("MUNityAngular.Models.Organisation.OrganisationMember", b =>
                {
                    b.Property<int>("OrganisationMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleOrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrganisationMemberId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RoleOrganisationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganisationMember");
                });

            modelBuilder.Entity("MUNityAngular.Models.Organisation.OrganisationRole", b =>
                {
                    b.Property<int>("OrganisationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateProject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OrganisationRoleId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationRole");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.AuthKey", b =>
                {
                    b.HasOne("MUNityAngular.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", b =>
                {
                    b.HasOne("MUNityAngular.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Gallery", null)
                        .WithMany("Images")
                        .HasForeignKey("GalleryId");

                    b.HasOne("MUNityAngular.Models.Core.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.MediaTag", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.MediaImage", null)
                        .WithMany("Tags")
                        .HasForeignKey("MediaImageId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", b =>
                {
                    b.HasOne("MUNityAngular.Models.Core.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserUserId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionConference", b =>
                {
                    b.HasOne("MUNityAngular.Models.Conference.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId");

                    b.HasOne("MUNityAngular.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");
                });

            modelBuilder.Entity("MUNityAngular.DataHandlers.EntityFramework.Models.ResolutionUser", b =>
                {
                    b.HasOne("MUNityAngular.DataHandlers.EntityFramework.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");

                    b.HasOne("MUNityAngular.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Committee", b =>
                {
                    b.HasOne("MUNityAngular.Models.Conference.Conference", "Conference")
                        .WithMany("Committees")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityAngular.Models.Conference.Committee", "ResolutlyCommittee")
                        .WithMany()
                        .HasForeignKey("ResolutlyCommitteeCommitteeId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.CommitteeTopic", b =>
                {
                    b.HasOne("MUNityAngular.Models.Conference.Committee", null)
                        .WithMany("Topics")
                        .HasForeignKey("CommitteeId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Conference", b =>
                {
                    b.HasOne("MUNityAngular.Models.Conference.Project", "ConferenceProject")
                        .WithMany("Conferences")
                        .HasForeignKey("ConferenceProjectProjectId");

                    b.HasOne("MUNityAngular.Models.Core.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserUserId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Conference.Project", b =>
                {
                    b.HasOne("MUNityAngular.Models.Organisation.Organisation", "ProjectOrganisation")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectOrganisationOrganisationId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Organisation.OrganisationMember", b =>
                {
                    b.HasOne("MUNityAngular.Models.Organisation.Organisation", "Organisation")
                        .WithMany("Member")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("MUNityAngular.Models.Organisation.OrganisationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleOrganisationRoleId");

                    b.HasOne("MUNityAngular.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityAngular.Models.Organisation.OrganisationRole", b =>
                {
                    b.HasOne("MUNityAngular.Models.Organisation.Organisation", "Organisation")
                        .WithMany("Roles")
                        .HasForeignKey("OrganisationId");
                });
#pragma warning restore 612, 618
        }
    }
}
