// <auto-generated />
using System;
using MUNityCore.DataHandlers.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MUNityCore.Migrations
{
    [DbContext(typeof(MunCoreContext))]
    partial class MunCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MUNityCore.Models.Conference.AbstractRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationState")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationValue")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("IconName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int?>("RoleAuthId")
                        .HasColumnType("int");

                    b.Property<string>("RoleFullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("RoleShort")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("RoleTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("RoleId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("RoleAuthId");

                    b.ToTable("AbstractRole");

                    b.HasDiscriminator<string>("RoleType").HasValue("AbstractRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Article")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CommitteeTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ConferenceId1")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("ResolutlyCommitteeCommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("CommitteeId");

                    b.HasIndex("ConferenceId1");

                    b.HasIndex("ResolutlyCommitteeCommitteeId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.CommitteeTopic", b =>
                {
                    b.Property<int>("CommitteeTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CommiteeTopicTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("TopicCode")
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4")
                        .HasMaxLength(18);

                    b.Property<string>("TopicDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TopicFullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("TopicName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("CommitteeTopicId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeTopic");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Conference", b =>
                {
                    b.Property<string>("ConferenceId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4")
                        .HasMaxLength(80);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4")
                        .HasMaxLength(18);

                    b.Property<string>("ConferenceProjectProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ConferenceTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("ConferenceId");

                    b.HasIndex("ConferenceProjectProjectId");

                    b.HasIndex("CreationUserUserId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Continent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CountryTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Iso")
                        .HasColumnType("varchar(3) CHARACTER SET utf8mb4")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Delegation", b =>
                {
                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("ConferenceId1")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("DelegationId");

                    b.HasIndex("ConferenceId1");

                    b.ToTable("Delegation");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupApplication", b =>
                {
                    b.Property<int>("GroupApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DelegationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("GroupApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("GroupApplicationId");

                    b.HasIndex("DelegationId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupedRoleApplication", b =>
                {
                    b.Property<int>("GroupedRoleApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GroupedRoleApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("GroupedRoleApplicationId");

                    b.ToTable("GroupedRoleApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Participation", b =>
                {
                    b.Property<int>("ParticipationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<bool>("IsMainRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Paid")
                        .HasColumnType("double");

                    b.Property<string>("ParticipationSecret")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ParticipationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ParticipationId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("ProjectAbbreviation")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("ProjectName")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("ProjectOrganisationOrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("ProjectTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectOrganisationOrganisationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleApplication", b =>
                {
                    b.Property<int>("RoleApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GroupedRoleApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RoleApplicationTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleApplicationId");

                    b.HasIndex("GroupedRoleApplicationId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.ToTable("RoleApplications");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleAuth", b =>
                {
                    b.Property<int>("RoleAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanEditConferenceSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditParticipations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSeeApplications")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConferenceId1")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int");

                    b.Property<string>("RoleAuthName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("RoleAuthTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("RoleAuthId");

                    b.HasIndex("ConferenceId1");

                    b.ToTable("RoleAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.TeamRoleGroup", b =>
                {
                    b.Property<int>("TeamRoleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int>("GroupLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("TeamRoleGroupTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("TeamRoleGroupId");

                    b.ToTable("TeamRoleGroups");
                });

            modelBuilder.Entity("MUNityCore.Models.Core.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AuthUserAuthId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<string>("Forename")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<int?>("GroupApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Housenumber")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lastname")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Salt")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Street")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("Zipcode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("AuthUserAuthId");

                    b.HasIndex("GroupApplicationId");

                    b.HasIndex("UserId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MUNityCore.Models.Core.UserAuth", b =>
                {
                    b.Property<int>("UserAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthLevel")
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateOrganisation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserAuthName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("UserAuthId");

                    b.ToTable("UserAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.Organisation.Organisation", b =>
                {
                    b.Property<string>("OrganisationId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("OrganisationAbbreviation")
                        .HasColumnType("varchar(18) CHARACTER SET utf8mb4")
                        .HasMaxLength(18);

                    b.Property<string>("OrganisationName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("MUNityCore.Models.Organisation.OrganisationMember", b =>
                {
                    b.Property<int>("OrganisationMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrganisationId1")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleOrganisationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrganisationMemberId");

                    b.HasIndex("OrganisationId1");

                    b.HasIndex("RoleOrganisationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganisationMember");
                });

            modelBuilder.Entity("MUNityCore.Models.Organisation.OrganisationRole", b =>
                {
                    b.Property<int>("OrganisationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateProject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrganisationId1")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.HasKey("OrganisationRoleId");

                    b.HasIndex("OrganisationId1");

                    b.ToTable("OrganisationRoles");
                });

            modelBuilder.Entity("MUNityCore.Models.User.UserPrivacySettings", b =>
                {
                    b.Property<int>("UserPrivacySettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceHistory")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("Friendslist")
                        .HasColumnType("int");

                    b.Property<int>("InternalNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("Pinboard")
                        .HasColumnType("int");

                    b.Property<int>("PublicNameDisplayMode")
                        .HasColumnType("int");

                    b.Property<int>("UserRef")
                        .HasColumnType("int");

                    b.HasKey("UserPrivacySettingsId");

                    b.HasIndex("UserRef")
                        .IsUnique();

                    b.ToTable("UserPrivacySettings");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.DelegateRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("CommitteeId1")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int?>("DelegateStateCountryId")
                        .HasColumnType("int");

                    b.Property<string>("DelegationId1")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDelegationLeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasIndex("CommitteeId1");

                    b.HasIndex("DelegateStateCountryId");

                    b.HasIndex("DelegationId1");

                    b.HasDiscriminator().HasValue("DelegateRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.NgoRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("Leader")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NgoName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasDiscriminator().HasValue("NgoRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.PressRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int>("PressCategory")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PressRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.SecretaryGeneralRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("Title")
                        .HasColumnName("SecretaryGeneralRole_Title")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasDiscriminator().HasValue("SecretaryGeneralRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.TeamRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<int?>("ParentTeamRoleRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamRoleGroupId1")
                        .HasColumnType("int");

                    b.Property<int>("TeamRoleLevel")
                        .HasColumnType("int");

                    b.HasIndex("ParentTeamRoleRoleId");

                    b.HasIndex("TeamRoleGroupId1");

                    b.HasDiscriminator().HasValue("TeamRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.VisitorRole", b =>
                {
                    b.HasBaseType("MUNityCore.Models.Conference.AbstractRole");

                    b.Property<string>("Organisation")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasDiscriminator().HasValue("VisitorRole");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.AbstractRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany("Roles")
                        .HasForeignKey("ConferenceId");

                    b.HasOne("MUNityCore.Models.Conference.RoleAuth", "RoleAuth")
                        .WithMany()
                        .HasForeignKey("RoleAuthId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Committee", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany("Committees")
                        .HasForeignKey("ConferenceId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MUNityCore.Models.Conference.Committee", "ResolutlyCommittee")
                        .WithMany()
                        .HasForeignKey("ResolutlyCommitteeCommitteeId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.CommitteeTopic", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany("Topics")
                        .HasForeignKey("CommitteeId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Conference", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Project", "ConferenceProject")
                        .WithMany("Conferences")
                        .HasForeignKey("ConferenceProjectProjectId");

                    b.HasOne("MUNityCore.Models.Core.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserUserId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Delegation", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId1");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.GroupApplication", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId");

                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Participation", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("MUNityCore.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Project", b =>
                {
                    b.HasOne("MUNityCore.Models.Organisation.Organisation", "ProjectOrganisation")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectOrganisationOrganisationId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleApplication", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.GroupedRoleApplication", null)
                        .WithMany("Applications")
                        .HasForeignKey("GroupedRoleApplicationId");

                    b.HasOne("MUNityCore.Models.Conference.AbstractRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("MUNityCore.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.RoleAuth", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Conference", "Conference")
                        .WithMany()
                        .HasForeignKey("ConferenceId1");
                });

            modelBuilder.Entity("MUNityCore.Models.Core.User", b =>
                {
                    b.HasOne("MUNityCore.Models.Core.UserAuth", "Auth")
                        .WithMany("Users")
                        .HasForeignKey("AuthUserAuthId");

                    b.HasOne("MUNityCore.Models.Conference.GroupApplication", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupApplicationId");

                    b.HasOne("MUNityCore.Models.Core.User", null)
                        .WithMany("Friends")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("MUNityCore.Models.Organisation.OrganisationMember", b =>
                {
                    b.HasOne("MUNityCore.Models.Organisation.Organisation", "Organisation")
                        .WithMany("Member")
                        .HasForeignKey("OrganisationId1");

                    b.HasOne("MUNityCore.Models.Organisation.OrganisationRole", "Role")
                        .WithMany("MembersWithRole")
                        .HasForeignKey("RoleOrganisationRoleId");

                    b.HasOne("MUNityCore.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MUNityCore.Models.Organisation.OrganisationRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Organisation.Organisation", "Organisation")
                        .WithMany("Roles")
                        .HasForeignKey("OrganisationId1");
                });

            modelBuilder.Entity("MUNityCore.Models.User.UserPrivacySettings", b =>
                {
                    b.HasOne("MUNityCore.Models.Core.User", "User")
                        .WithOne("PrivacySettings")
                        .HasForeignKey("MUNityCore.Models.User.UserPrivacySettings", "UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.DelegateRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId1");

                    b.HasOne("MUNityCore.Models.Conference.Country", "DelegateState")
                        .WithMany()
                        .HasForeignKey("DelegateStateCountryId");

                    b.HasOne("MUNityCore.Models.Conference.Delegation", "Delegation")
                        .WithMany()
                        .HasForeignKey("DelegationId1");
                });

            modelBuilder.Entity("MUNityCore.Models.Conference.Roles.TeamRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Conference.Roles.TeamRole", "ParentTeamRole")
                        .WithMany()
                        .HasForeignKey("ParentTeamRoleRoleId");

                    b.HasOne("MUNityCore.Models.Conference.TeamRoleGroup", "TeamRoleGroup")
                        .WithMany("TeamRoles")
                        .HasForeignKey("TeamRoleGroupId1");
                });
#pragma warning restore 612, 618
        }
    }
}
