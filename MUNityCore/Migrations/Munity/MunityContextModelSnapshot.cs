// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MUNityCore.DataHandlers.EntityFramework;

namespace MUNityCore.Migrations.Munity
{
    [DbContext(typeof(MunityContext))]
    partial class MunityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MUNityAngular.Models.Resolution.V2.ResolutionAuth", b =>
                {
                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("AllowCommitteeRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowConferenceRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicShortKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ResolutionId");

                    b.ToTable("ResolutionAuths");
                });

            modelBuilder.Entity("MUNityAngular.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.Property<int>("ResolutionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("CanAddUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CoreUserId")
                        .HasColumnType("int");

                    b.Property<string>("ForeName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("ResolutionUserId");

                    b.HasIndex("AuthResolutionId");

                    b.ToTable("ResolutionUsers");
                });

            modelBuilder.Entity("MUNityAngular.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.HasOne("MUNityAngular.Models.Resolution.V2.ResolutionAuth", "Auth")
                        .WithMany("Users")
                        .HasForeignKey("AuthResolutionId");
                });
#pragma warning restore 612, 618
        }
    }
}
