// <auto-generated />
using System;
using MUNityCore.DataHandlers.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MUNityCore.Migrations.Munity
{
    [DbContext(typeof(MunityContext))]
    [Migration("20201114155040_InitBase")]
    partial class InitBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionAuth", b =>
                {
                    b.Property<string>("ResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("AllowCommitteeRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowConferenceRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPublicRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicShortKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ResolutionId");

                    b.ToTable("ResolutionAuths");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.Property<int>("ResolutionUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthResolutionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("CanAddUsers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CoreUserId")
                        .HasColumnType("int");

                    b.Property<string>("ForeName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("Username")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("ResolutionUserId");

                    b.HasIndex("AuthResolutionId");

                    b.ToTable("ResolutionUsers");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.AllChatMessage", b =>
                {
                    b.Property<string>("AllChatMessageId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AllChatMessageId");

                    b.HasIndex("SimulationId");

                    b.ToTable("AllChatMessage");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimSimRequestModel", b =>
                {
                    b.Property<int>("SimSimRequestModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.Property<string>("UserToken")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SimSimRequestModelId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimSimRequestModel");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Simulation", b =>
                {
                    b.Property<int>("SimulationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanJoin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ListOfSpeakersId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<int>("LobbyMode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SimulationId");

                    b.HasIndex("ListOfSpeakersId");

                    b.ToTable("Simulations");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationRole", b =>
                {
                    b.Property<int>("SimulationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Iso")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("RoleKey")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<int>("RoleMaxSlots")
                        .HasColumnType("int");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.HasKey("SimulationRoleId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimulationRoles");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationUser", b =>
                {
                    b.Property<int>("SimulationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanCreateRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditListOfSpeakers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanEditResolution")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSelectRole")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleSimulationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SimulationId")
                        .HasColumnType("int");

                    b.HasKey("SimulationUserId");

                    b.HasIndex("RoleSimulationRoleId");

                    b.HasIndex("SimulationId");

                    b.ToTable("SimulationUser");
                });

            modelBuilder.Entity("MUNityCore.Models.SpeakerlistModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConferenceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CurrentQuestionId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("CurrentSpeakerId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<bool>("ListClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("LowTimeMark")
                        .HasColumnType("time(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PublicId")
                        .HasColumnType("int");

                    b.Property<bool>("QuestionLowTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("QuestionTimeout")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("QuestionsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("Questiontime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("RemainingQuestionTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("RemainingSpeakerTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("SpeakerLowTime")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SpeakerTimeout")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("Speakertime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("StartQuestionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartSpeakerTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentQuestionId");

                    b.HasIndex("CurrentSpeakerId");

                    b.ToTable("SpeakerlistModel");
                });

            modelBuilder.Entity("MUNityCore.Models.SpeakerlistModel+Speaker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("Iso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SpeakerlistModelId")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.Property<string>("SpeakerlistModelId1")
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerlistModelId");

                    b.HasIndex("SpeakerlistModelId1");

                    b.ToTable("Speaker");
                });

            modelBuilder.Entity("MUNityCore.Models.Resolution.V2.ResolutionUser", b =>
                {
                    b.HasOne("MUNityCore.Models.Resolution.V2.ResolutionAuth", "Auth")
                        .WithMany("Users")
                        .HasForeignKey("AuthResolutionId");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.AllChatMessage", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.Simulation", null)
                        .WithMany("AllChat")
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimSimRequestModel", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.Simulation", null)
                        .WithMany("Requests")
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.Simulation", b =>
                {
                    b.HasOne("MUNityCore.Models.SpeakerlistModel", "ListOfSpeakers")
                        .WithMany()
                        .HasForeignKey("ListOfSpeakersId");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationRole", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("Roles")
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("MUNityCore.Models.Simulation.SimulationUser", b =>
                {
                    b.HasOne("MUNityCore.Models.Simulation.SimulationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleSimulationRoleId");

                    b.HasOne("MUNityCore.Models.Simulation.Simulation", "Simulation")
                        .WithMany("Users")
                        .HasForeignKey("SimulationId");
                });

            modelBuilder.Entity("MUNityCore.Models.SpeakerlistModel", b =>
                {
                    b.HasOne("MUNityCore.Models.SpeakerlistModel+Speaker", "CurrentQuestion")
                        .WithMany()
                        .HasForeignKey("CurrentQuestionId");

                    b.HasOne("MUNityCore.Models.SpeakerlistModel+Speaker", "CurrentSpeaker")
                        .WithMany()
                        .HasForeignKey("CurrentSpeakerId");
                });

            modelBuilder.Entity("MUNityCore.Models.SpeakerlistModel+Speaker", b =>
                {
                    b.HasOne("MUNityCore.Models.SpeakerlistModel", null)
                        .WithMany("Questions")
                        .HasForeignKey("SpeakerlistModelId");

                    b.HasOne("MUNityCore.Models.SpeakerlistModel", null)
                        .WithMany("Speakers")
                        .HasForeignKey("SpeakerlistModelId1");
                });
#pragma warning restore 612, 618
        }
    }
}
