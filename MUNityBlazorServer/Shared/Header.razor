@using Services;
@inject MUNityCore.Services.FrontendSimulationService frontendSimulationService;
@inject NavigationManager navManager;
@inject Services.MainViewService mainViewService;

<div id="header" class="header navbar-default">
	<!-- begin navbar-header -->
    <div class="navbar-header">
        <!-- Menu-Button for large views -->
        <button type="button" class="navbar-toggle collapsed navbar-toggle-left" @onclick="() => mainViewService.ShowSidebarLargeView = !mainViewService.ShowSidebarLargeView">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>

        <a href="/" class="navbar-brand">
            MUNity
        </a>



        <button type="button" class="navbar-toggle" @onclick="() => mainViewService.ShowSidebar = !mainViewService.ShowSidebar">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
        </button>


    </div>

	@if (menuHeader == MenuHeaders.Simulation)
	{
		<MUNityCore.Shared.HeaderPartial.HeaderSimulation />
	}
	

	<!-- end navbar-header --><!-- begin header-nav -->
	<ul class="navbar-nav navbar-right">
@*				<li>
			<a href="#" data-toggle="navbar-search" class="icon">
				<i class="oi oi-document"></i>
			</a>
		</li>*@


		<AuthorizeView>
			<Authorized>
				@*<HeaderNotifications />*@
				<HeaderUserBox />
			</Authorized>
			<NotAuthorized>
				<li>
					<a href="/Identity/Account/Login" data-toggle="navbar-search" class="icon">
						Login
					</a>
				</li>
			</NotAuthorized>
		</AuthorizeView>
	</ul>
	<!-- end header navigation right -->
</div>

@code 
{
    private enum MenuHeaders
    {
        None,
        Simulation
    }

    private MenuHeaders menuHeader;

    protected override void OnInitialized()
    {
        navManager.LocationChanged += OnLocationChanged;
        RefreshHeaderNavigation(navManager.Uri);
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        RefreshHeaderNavigation(args.Location);
    }

    private void RefreshHeaderNavigation(string fullUri)
    {
        var path = fullUri.Substring(navManager.BaseUri.Length);
        if (path == "simulation" || path.StartsWith("simulation/"))
        {
            menuHeader = MenuHeaders.Simulation;
        }
        else
        {
            menuHeader = MenuHeaders.None;
        }
		this.StateHasChanged();
    }
}
