@inject Services.FrontendSimulationService frontendSimulationService;
@inject Services.PresentsService presentsService;


<div class="panel panel-inverse" data-sortable-id="ui-widget-1">
    <div class="panel-heading">
        <h4 class="panel-title">
            Anwesenheit
            <button class="btn btn-outline-primary" @onclick="ReloadCurrentPresents">Aktualisieren</button>
        </h4>
    </div>
    <div class="panel-body">
        @if (SimViewModel != null && SimViewModel.UserContext != null)
        {
            @if (presents != null)
                {
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <h4>Gestartet: @presents.CreatedTime.ToString("dd.MM.yyyy HH:mm:ss")</h4>
                <h4>Status: @((presents.MarkedFinished) ? "Abgeschlossen" : "Im Gange")</h4>
                <h4>Anwesend: @presentUsers/@presents.CheckedUsers.Count</h4>
                <h4>Für einfache Mehrheit benötigte Stimmen: @(Math.Ceiling((double)presentUsers * 0.5))</h4>
                <h4>Für zweidrittel Mehrheit benötigte Stimmen: @(Math.Ceiling((double)presentUsers * 0.66))</h4>
            </Column>
            
        </Row>
                }

            @if (SimViewModel.UserContext.IsChair)
            {
                <button class="btn btn-block btn-primary" @onclick="CreateNewPresentsCheck">Neue Anwesenheitsfeststellung</button>
                @if (presents != null)
                {
                    <CheckPresentsTable Presents="@presents" PresentStateChanged="OnPresentChanged" />
                }
            }
            else if (SimViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate ||
                SimViewModel.UserContext.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo)
            {

                <Row>

                    @if (myPresentsState.State == Models.Simulation.PresentsState.PresentsStates.Present)
                    {
                        <Column ColumnSize="ColumnSize.Is12">
                            <Heading Size="HeadingSize.Is1">
                                <Badge Color="Color.Success"><Icon Name="IconName.Check" /> Sie sind als anwesend gemeldet</Badge>
                            </Heading>
                        </Column>

                    }
                    else if (myPresentsState.State == Models.Simulation.PresentsState.PresentsStates.Absent)
                    {
                        <Column ColumnSize="ColumnSize.Is12">
                            <Heading Size="HeadingSize.Is1">
                                <Badge Color="Color.Danger"><Icon Name="IconName.Times" /> Sie sind als abwesend gemeldet</Badge>
                            </Heading>
                        </Column>
                    }
                    else if (myPresentsState.State == Models.Simulation.PresentsState.PresentsStates.NotChecked)
                    {
                        <Column ColumnSize="ColumnSize.Is12">
                            <Heading Size="HeadingSize.Is1">
                                <Badge Color="Color.Primary"><Icon Name="IconName.QuestionCircle" /> Sie sind noch nicht erfasst</Badge>
                            </Heading>
                        </Column>
                    }
                    else if (myPresentsState.State == Models.Simulation.PresentsState.PresentsStates.Late)
                    {
                        <Column ColumnSize="ColumnSize.Is12">
                            <Alert Color="Color.Warning">Sie wurden nachträglich mit aufgenommen</Alert>
                        </Column>
                    }
                </Row>

            }
            else
            {
                <Paragraph>Zugriff verweigert!</Paragraph>
            }
        }
        else
        {
            <Paragraph>Wird geladen!</Paragraph>
        }
    </div>
</div>



@code {
    [Parameter]
    public ViewModel.SimulationViewModel SimViewModel { get; set; }

    private MUNityCore.Models.Simulation.SimulationPresents presents;

    // Optimizable by not calling Count every time but storing the value in a variable.
    private int _presentUsers;
    public int presentUsers
    {
        get
        {
            if (presents == null) return 0;
            return presents.CheckedUsers.Count(n => n.State == Models.Simulation.PresentsState.PresentsStates.Present);
        }
    }

    private MUNityCore.Models.Simulation.PresentsState myPresentsState
    {
        get
        {
            return presents?.CheckedUsers?.FirstOrDefault(n => n.SimulationUser.SimulationUserId == SimViewModel.UserContext.UserId);
        }
    }

    private void CreateNewPresentsCheck()
    {
        this.presents = presentsService?.CreatePresentsCheck(SimViewModel.SimulationId);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        ReloadCurrentPresents();
    }

    private void ReloadCurrentPresents()
    {
        if (SimViewModel != null)
        {
            this.presents = presentsService.GetLastPresentCheckOfSimulation(SimViewModel.SimulationId);
            this.StateHasChanged();
        }
    }

    private void OnPresentChanged()
    {
        this.InvokeAsync(StateHasChanged);
    }
}
