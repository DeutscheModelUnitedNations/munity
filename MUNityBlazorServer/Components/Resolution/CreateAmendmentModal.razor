@using MUNityCore.Dtos.Resolutions;
@using MUNity.Extensions.ResolutionExtensions
@using MUNityCore.Extensions.CastExtensions;


@inject Services.SqlResolutionService resolutionService;
@inject Services.FrontendSimulationService frontendSimulationService;

@if (ViewModel?.Resolution != null)
{
    <Modal @ref="modalRef">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Änderungsantrag erstellen</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>

                <EditForm Model="pattern">
                    <Field>
                        <FieldLabel>Antragsart</FieldLabel>
                        <Select TValue="EAmendmentTypes" @bind-SelectedValue="pattern.AmendmentType">
                            <SelectItem Value="EAmendmentTypes.Add">Antrag auf Hinzufügen</SelectItem>
                            @if (Resolution.OperativeSection.Paragraphs.Any(n => n.IsVirtual == false))
                            {
                                <SelectItem Value="EAmendmentTypes.Change">Antrag auf Textänderung</SelectItem>
                                <SelectItem Value="EAmendmentTypes.Delete">Antrag auf Streichung</SelectItem>

                            }

                            @if (Resolution.OperativeSection.Paragraphs.Count(n => n.IsVirtual == false) > 1)
                            {
                                <SelectItem Value="EAmendmentTypes.Move">Antrag auf Verschiebung</SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Einbringer</FieldLabel>
                        <input type="text" @bind-value="@pattern.SubmitterName" 
                               class="form-control @((editSubmitterAllowed) ? "" : "disabled")" disabled="@((editSubmitterAllowed)? null : "disabled")"  />
                    </Field>
                    @if (pattern.AmendmentType == EAmendmentTypes.Change ||
             pattern.AmendmentType == EAmendmentTypes.Delete ||
             pattern.AmendmentType == EAmendmentTypes.Move)
                    {
                        <Field>
                            <FieldLabel>Paragraphen</FieldLabel>
                            <Select TValue="string" @bind-SelectedValue="@pattern.ParagraphId">
                                <SelectItem Value="string.Empty" Disabled="true">Paragraphen auswählen</SelectItem>
                                @foreach (var paragraph in Resolution.OperativeSection.GetAllParagraphs())
                                {
                                    <SelectItem Value="paragraph.OperativeParagraphId">@Resolution.OperativeSection.GetIndexNameOfOperativeParagraph(paragraph) @paragraph.Text</SelectItem>
                                }

                            </Select>
                        </Field>
                    }

                    @if (pattern.AmendmentType == EAmendmentTypes.Add ||
               pattern.AmendmentType == EAmendmentTypes.Move)
                    {
                        <Field>
                            <FieldLabel>Neue Position</FieldLabel>
                            <Select TValue="int" @bind-SelectedValue="@pattern.NewIndex">
                                <SelectItem Value="0">erste Stelle</SelectItem>
                                @if (Resolution.OperativeSection.Paragraphs.Any(n => n.IsVirtual == false))
                                {
                                    @foreach (var paragraph in Resolution.OperativeSection.Paragraphs.Where(n => n.IsVirtual == false))
                                    {
                                        <SelectItem Value="@(Resolution.OperativeSection.GetIndexOfParagraph(paragraph) +1)">hinter Paragraph @Resolution.OperativeSection.GetIndexNameOfOperativeParagraph(paragraph) @((paragraph.Text.Length > 20) ? paragraph.Text.Substring(0, 20) : paragraph.Text)</SelectItem>
                                    }
                                }
                            </Select>
                        </Field>
                    }

                    @if (pattern.AmendmentType == EAmendmentTypes.Change ||
              pattern.AmendmentType == EAmendmentTypes.Add)
                    {
                        <Field>
                            <FieldLabel>Neuer Text</FieldLabel>
                            <InputTextArea class="form-control" @bind-Value="@pattern.NewValue" />
                        </Field>
                    }
                </EditForm>

                @if (errored)
                {
                    <div class="alert alert-danger">Fehler beim Erstellen des Änderungsantrags!</div>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Abbruch</Button>
                <Button Color="Color.Primary" Clicked="@SubmitCreateAmendment">Änderungsantrag erstellen</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {

    [Parameter]
    public ViewModel.ResolutionViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback AmendmentCreated { get; set; }

    [Parameter]
    public bool IsSekContext { get; set; }

    private MUNity.Models.Resolution.Resolution Resolution => this.ViewModel.Resolution;

    private bool editSubmitterAllowed
    {
        get
        {
            if (IsSekContext)
                return true;

            if (this.frontendSimulationService?.CurrentSimulation?.UserContext != null)
            {
                if (this.frontendSimulationService.CurrentSimulation.UserContext.RoleType != MUNity.Schema.Simulation.RoleTypes.Chairman &&
                this.frontendSimulationService.CurrentSimulation.UserContext.RoleType != MUNity.Schema.Simulation.RoleTypes.None)
                {
                    return false;
                }
            }
            return true;
        }
    }

    private CreateAmendmentPattern pattern = new CreateAmendmentPattern();

    private Blazorise.Modal modalRef;

    private bool errored = false;

    public void ShowModal()
    {
        modalRef?.Show();
    }

    private async Task SubmitCreateAmendment()
    {
        pattern.ResolutionId = Resolution.ResolutionId;

        if (pattern.AmendmentType == EAmendmentTypes.Add)
        {
            await this.ViewModel.CreateAddAmendment(pattern.SubmitterName, pattern.NewIndex, pattern.NewValue);
        }
        else if (pattern.AmendmentType == EAmendmentTypes.Change)
        {
            await this.ViewModel.CreateChangeAmendment(pattern.SubmitterName, pattern.ParagraphId, pattern.NewValue);
        }
        else if (pattern.AmendmentType == EAmendmentTypes.Delete)
        {
            await this.ViewModel.CreateDeleteAmendment(pattern.SubmitterName, pattern.ParagraphId);
        }
        else if (pattern.AmendmentType == EAmendmentTypes.Move)
        {
            await this.ViewModel.CreateMoveAmendment(pattern.SubmitterName, pattern.ParagraphId, pattern.NewIndex);
        }
        modalRef.Hide();
    }

    private void HideModal()
    {
        this.modalRef.Hide();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(pattern.SubmitterName))
        {
            if (this.frontendSimulationService?.CurrentSimulation?.UserContext != null && !IsSekContext)
            {

                if (this.frontendSimulationService.CurrentSimulation.UserContext.RoleType != MUNity.Schema.Simulation.RoleTypes.Chairman &&
                this.frontendSimulationService.CurrentSimulation.UserContext.RoleType != MUNity.Schema.Simulation.RoleTypes.None)
                {
                    pattern.SubmitterName = this.frontendSimulationService.CurrentSimulation.UserContext.RoleName;
                }
            }
        }
    }
}
