@using MUNity.Models.Resolution;
@using MUNity.Extensions.ResolutionExtensions;
@using MUNity.Extensions.ObservableCollectionExtensions; 
@using MUNity.Models.Resolution.EventArguments;
@inject MUNityClient.Services.ResolutionService resolutionService;


@if (ResolutionViewModel.Resolution.OperativeSection.Paragraphs.Contains(this.Paragraph))
{

    @* TODO: IsVirtual Check:
        Wenn ein Absatz als IsVirtual gekennzeichnet ist (und Visible ist) darf mit diesem nicht weiter interargiert werden!
        Das beduetet, er darf nicht verschoben werden, nicht gelöscht, der Text nicht verändert, keine Kommentare etc. er ist 
        tatsächlich nur als reiner Platzhalter vorhanden für zum Beispiel einen noch kommenden Absatz oder aber gibt die Position an
        an welche ein anderer Absatz ggf. geschoben werden soll! *@

    <div class="row col-12 p-0 m-0">
        <div class="row col m-0 p-0 d-flex justify-content-center border @(Paragraph.Corrected ? "border-success" : "")">
            <div class="row p-0 d-flex justify-content-center col-12">
                @* Up/Down Buttons *@
                <div class="col-3 col-sm-2 p-0">
                    <button disabled="@(Index == 0)" class="col-12 p-0 text-center p-3 custom-button h-50"
                         title="Nach oben verschieben" alt="put higher"><i
                            class="fas fa-lg fa-caret-up"></i></button>
                    <button disabled="@(ResolutionViewModel != null && Index == ResolutionViewModel.Resolution.OperativeSection.Paragraphs.Count - 1)"
                        class="col-12 p-0 text-center p-3 custom-button h-50"
                         title="Nach unten verschieben" alt="put lower"><i
                            class="fas fa-lg fa-caret-down"></i></button>
                </div>
                @* Input Field *@
                <div class="col p-0 my-2">
                    <EditForm Model="Paragraph" class="h-100">
                        <textarea @bind="@Paragraph.Text" @bind:event="oninput" disabled="@this.Paragraph.IsLocked"
                            placeholder="Text..." class="form-control h-100 custom-input-field px-0 p-2"></textarea>
                    </EditForm>

                </div>
                @* Option Buttons *@
                <div class="col-3 col-sm-2 px-0">
                    <div role="button" type="button" @onclick="@(() => this.Paragraph.IsLocked = !this.Paragraph.IsLocked)"
                        title="Bearbeitung sperren" class="col-12 p-0 text-center px-2 py-3 custom-button text-primary"
                        alt="lock">
                        @if (this.Paragraph.IsLocked)
                        {
                            <i class="fas fa-lg fa-lock"></i>
                        }
                        else
                        {
                            <i class="fas fa-lg fa-lock-open"></i>
                        }
                    </div>
                    <div role="button" type="button" @onclick="@(() => Paragraph.Corrected = !Paragraph.Corrected)"
                        class="col-12 p-0 text-center px-2 py-3 custom-button" alt="mark as checked"
                        title="Als überprüft markieren">
                        @if (Paragraph.Corrected)
                        {
                            <i class="text-success fa-lg fas fa-check"></i>
                        }
                        else
                        {
                            <i class="text-primary fa-lg fas fa-times"></i>
                        }
                    </div>
                    <div role="button" type="button" class="col-12 p-0 text-center px-2 py-3 custom-button text-danger"
                        alt="delete" title="Löschen">
                        <i class="fas fa-lg fa-trash"></i></div>
                </div>
            </div>
            @* Status Footer *@
            <div class="row m-0 card-footer row col-12 d-flex justify-content-between">
                <div class="col p-0">
                    @if (!this.Paragraph.HasValidOperator())
                    {
                        <div class="text-warning">
                            <i class="fas fa-info-circle mr-2"></i>Der Paragraph enthält
                            keinen
                            gültigen
                            Operator.
                        </div>
                    }
                    Aktuelle Bearbeiter:
                    @if (this.Paragraph.Corrected)
                    {
                        <span>Status:</span>
                        <div class="badge badge-success">Vom Sek kontrolliert</div>
                    }
                </div>
                <div class="col-1 d-flex align-items-center justify-content-end">
                    <div type="button" role="button" @onclick="@(() => commentsExpanded = !commentsExpanded)">
                        <i class="fas fa-comment fa-lg @(string.IsNullOrEmpty(this.Paragraph.Comment) ? "text-primary" : "text-warning") text-primary"></i>
                    </div>
                </div>
            </div>
            <div class="row m-0 py-0 pr-0 pl-2">
                @foreach (var child in Paragraph.Children)
                {
                    @child
                }
            </div>
        </div>
        @* Comment Panel *@
        <div class="m-0 col comments @(commentsExpanded ? "comments-expanded" : "comments-collapsed") p-0">
                <textarea placeholder="Kommentare..." @bind="this.Paragraph.Comment" @bind:event="oninput"
                          class="form-control h-100 custom-input-field px-0 p-2 no-scrollbar"></textarea>
        </div>
    </div>
}

@code {
    [Parameter]
    public OperativeParagraph Paragraph { get; set; }

    [Parameter]
    public ViewModel.ResolutionViewModel ResolutionViewModel { get; set; }

    public int Index => this.ResolutionViewModel?.Resolution.OperativeSection?.Paragraphs?.IndexOf(this.Paragraph) ?? -1;

    public Boolean commentsExpanded = false;


    protected override void OnInitialized()
    {
        if (Paragraph != null && ResolutionViewModel != null)
        {
            ResolutionViewModel.OperativeParagraphChangedFromExtern += OperativeParagraphChangedFromExtern;
            //ResolutionViewModel.OperativeParagraphChanged += OperativeParagraphChanged;
        }
        base.OnInitialized();
    }

    private void OperativeParagraphChangedFromExtern(object sender, OperativeParagraphChangedEventArgs args)
    {
        if (args.Paragraph.OperativeParagraphId == this.Paragraph.OperativeParagraphId)
        {
            this.StateHasChanged();
        }
    }

}


<style>
    .card {
        transition: max-width .3s ease-in-out;
    }

    .comments {
        transition: .3s ease-in-out;
    }

    .comments-expanded {
        max-width: 30%;
        overflow: auto;
    }

    .comments-collapsed {
        max-width: 0%;
        overflow: hidden;
    }

    .custom-button {
        border-width: 0px;
        background-color: #00000000;
        transition: .3s;
    }

    .custom-button:hover {
        background-color: #88888826;
    }

    .custom-input-field {
        border: 0px;
        resize: none;
    }

    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
</style>