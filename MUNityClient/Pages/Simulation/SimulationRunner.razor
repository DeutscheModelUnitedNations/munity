@page "/sim/run/{id}"
@using System.ComponentModel

@inject MUNityClient.Services.SimulationService simulationService;
@inject MUNityClient.Services.ListOfSpeakerService listOfSpeakerService;
@inject NavigationManager navigationManager;

@layout MUNityClient.Shared.EmptyLayout;
@*
    Der SimulationsRunner ist die "Schirmkomponente" über den Einzelnen Simulations Komponenten.
    An dieser Stelle wird eine Verbindung zum Server initialisiert und alle zum Start erforderlichen Daten
    werden einmal geladen.

    Zudem wird der Socket initialisiert und an die Sub-Komponenten welche diesen ggf. brauchen weiter gereicht.

    Diese Komponente soll auch das Basis Layout für das Simulationsfenster stellen.
*@

<MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationTopNavbar ViewModel="@SimulationViewModelInstance" LayoutWrapper="@_layoutWrapper" />

@if (SimulationViewModelInstance?.Simulation != null && SimulationViewModelInstance.MyAuth != null && _layoutWrapper != null)
{
<div class="row m-0 p-0">

    @* Ansicht für die Redeliste sollte ausgeblendet werden, wenn der Editor eingeblendet wird *@
    @if (_layoutWrapper.MainContent != Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor)
    {
        @* Hauptinhalt *@
        <div class="col-lg-8 col-md-12 col-sm-12">
            @if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Agenda)
            {
                <MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationAgenda ViewModel="@this.SimulationViewModelInstance"></MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationAgenda>
            }
            else if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Home)
            {
                <div class="col-12">
                    <MUNityClient.Shared.VirtualCommittee.UserList.SimulationLiveUserList SimulationContext="@SimulationViewModelInstance" />
                </div>
            }
            else if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Resolution)
            {
                @if (this.SimulationViewModelInstance.CurrentResolutionId == null)
                {
                    <MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationResolutionList SimulationViewModel="this.SimulationViewModelInstance" />
                }
                else
                {
                    <div class="row">
                        <button class="btn btn-block btn-primary" @onclick="() => this.SimulationViewModelInstance.CurrentResolutionId = null">Zurück zur Übersicht</button>
                    </div>
                    if (this._layoutWrapper.ResolutionMode == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.ResolutionModes.Read)
                    {
                        @if (this.SimulationViewModelInstance.IsChair)
                        {
                            <div class="row">
                                <button class="btn btn-block btn-secondary" @onclick="() => this._layoutWrapper.ResolutionMode = Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.ResolutionModes.Write">Zur Schreibansicht wechseln</button>
                            </div>
                        }
                        <MUNityClient.Pages.Resa.ResolutionPresentation Id="@this.SimulationViewModelInstance.CurrentResolutionId" />
                    }
                    else
                    {
                        <div class="row">
                            <button class="btn btn-block btn-secondary" @onclick="() => this._layoutWrapper.ResolutionMode = Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.ResolutionModes.Read">Zur Leseansicht wechseln</button>
                        </div>
                        <MUNityClient.Pages.Resa.ResolutionEditor Id="@this.SimulationViewModelInstance.CurrentResolutionId" />
                    }
                }

            }
            else if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Options)
            {
                <MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationLiveOptions ViewModel="@SimulationViewModelInstance" />
            }
            else if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Presents)
            {
                <p>TODO Anwesenheit</p>
            }
            else if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.Voting)
            {
                <MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationVotePage ViewModel="@this.SimulationViewModelInstance" />
            }
        </div>

        <div class="col-md-12 col-lg-4 col-sm-12">
            <div class="row">
                @if (_listOfSpeakerId == "_loading_")
                {
                    <p>Redeliste wird abgerufen...</p>
                }
                else if (string.IsNullOrEmpty(_listOfSpeakerId))
                {
                    if (SimulationViewModelInstance.MyAuth.CanCreateRole || SimulationViewModelInstance.MyRole.RoleType == MUNity.Schema.Simulation.RoleTypes.Chairman)
                    {
                        <button class="btn btn-sm btn-success btn-block" @onclick="() => InitListOfSpeakers()">Redeliste anlegen</button>
                    }
                    else
                    {
                        <p>Keine Redeliste vorhanden.</p>
                    }
                }
                else
                {
                    @if (this.SimulationViewModelInstance.MyRole != null &&
                       (this.SimulationViewModelInstance.MyRole.RoleType == MUNity.Schema.Simulation.RoleTypes.Delegate ||
                       this.SimulationViewModelInstance.MyRole.RoleType == MUNity.Schema.Simulation.RoleTypes.Ngo))
                    {
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-success" @onclick="() => AddMeToListOfSpeakers()" disabled="@ListOfSpeakersInstance.SourceList.ListClosed">Auf die Redeliste setzen</button>
                            <button class="btn btn-outline-success" @onclick="() => AddMeToListOfQuestions()" disabled="@ListOfSpeakersInstance.SourceList.QuestionsClosed">Auf Fragen und Kurzbemerkungen setzen</button>
                        </div>
                    }
                    <MUNityClient.Shared.Los.LoSReaderComponent ListOfSpeakersId="@_listOfSpeakerId" IsOnline="true"></MUNityClient.Shared.Los.LoSReaderComponent>
                }
            </div>
        </div>
    }

    @if (_layoutWrapper.MainContent == Shared.VirtualCommittee.ActiveRoom.ActiveRoomLayoutWrapper.MainContents.ListOfSpeakerEditor)
    {
        <MUNityClient.Pages.LoS.ListOfSpeakerEditor Id="@ListOfSpeakersInstance.SourceList.ListOfSpeakersId" Socket="@ListOfSpeakersInstance" IsOnline="@true"></MUNityClient.Pages.LoS.ListOfSpeakerEditor>
    }
</div>


    @*<MUNityClient.Shared.VirtualCommittee.ActiveRoom.SimulationNotifications />*@
}

<style>
    .header-item {
        transition: .3s;
    }

        .header-item:not(.selected-tab):hover {
            background-color: #dedede;
        }

    .selected-tab {
        background-color: #1266F1;
        color: white;
    }
</style>