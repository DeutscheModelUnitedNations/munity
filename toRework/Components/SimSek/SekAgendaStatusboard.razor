@inject Services.SimulationService simulationService; 

<div class="card border-0 mb-3 bg-dark text-white">
    <div class="card-body">
        <div class="mb-3 text-grey"><b>Allgemein</b></div>
        <div class="row">
            @if (AgendaItems != null)
            {
                foreach (var agendaItem in AgendaItems)
                {
                    <div class="col-4 alert-link"
                         @onclick="() => selectedAgendaItem = agendaItem">
                        <div class="card border-0 @((selectedAgendaItem == agendaItem) ? "bg-primary-darker" : "selectable-card") ">
                            <div class="card-body">
                                <h4 class="card-title m-t-0">@agendaItem.Name</h4>
                                <h6 class="card-subtitle m-b-10 text-muted">@agendaItem.PetitionCount Anträge</h6>
                                <p class="card-text">@agendaItem.Description</p>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
    </div>
    <div class="p-10">
        <div class="widget-list widget-list-rounded inverse-mode m-t-5">
            @if (selectedAgendaItem != null && petitionsOfAgendaItem != null && petitionsOfAgendaItem.Count > 0)
            {
                @foreach (var petition in petitionsOfAgendaItem)
                {
                    <div class="@((petition.Status == MUNity.Models.Simulation.EPetitionStates.Active) ? "bg-success-transparent-2 p-t-2 p-b-1 m-b-2" : null) ">
                        <MUNityCore.Components.Simulation.PetitionListItem Petition="@petition" />
                    </div>
                    
                }

            }
            else
            {
                <Paragraph>Es befindet sich kein Antrag in der Warteschlange.</Paragraph>
            }

        </div>
    </div>
</div>

<style>
    .selectable-card {
        cursor: pointer;
        background: black;

    }

    .selectable-card:hover {
        background: #121212;
    }
</style>

@code {
    [Parameter]
    public ViewModel.SimulationViewModel ViewModel { get; set; }

    private List<MUNityCore.Dtos.Simulations.AgendaItemInfo> AgendaItems { get; set; }

    private List<MUNity.Schema.Simulation.PetitionInfoDto> petitionsOfAgendaItem { get; set; }

    private MUNityCore.Dtos.Simulations.AgendaItemInfo _selectedAgendaItem;
    private MUNityCore.Dtos.Simulations.AgendaItemInfo selectedAgendaItem
    {
        get => _selectedAgendaItem;
        set
        {
            _selectedAgendaItem = value;
            if (value != null)
                this.petitionsOfAgendaItem = simulationService.GetPetitionsOfAgendaItem(_selectedAgendaItem.AgendaItemId);
            else
                this.petitionsOfAgendaItem = null;
        }
    }

    public void ReloadAgendaItems()
    {
        if (this.ViewModel == null)
            return;

        this.AgendaItems = simulationService.GetAgendaItemInfosForSim(this.ViewModel.SimulationId);
        if (this.AgendaItems.Count > 0)
        {
            this.selectedAgendaItem = this.AgendaItems.First();
        }
        InvokeAsync(StateHasChanged);
    }

    private void OnAgendaItemRemoved(object sender, int agendaItemId)
    {
        if (this.selectedAgendaItem != null && this.selectedAgendaItem.AgendaItemId == agendaItemId)
        {
            this.selectedAgendaItem = null;
        }

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == agendaItemId);
        if (agendaItem != null)
        {
            this.AgendaItems.Remove(agendaItem);
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnPetitionRemoved(object sender, MUNity.Schema.Simulation.PetitionInteractedDto item)
    {
        bool changesMade = false;

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == item.AgendaItemId);
        if (agendaItem != null)
        {
            agendaItem.PetitionCount--;
            changesMade = true;
        }

        var petitionElement = this.petitionsOfAgendaItem.FirstOrDefault(n => n.PetitionId == item.PetitionId);
        if (petitionElement != null)
        {
            this.petitionsOfAgendaItem.Remove(petitionElement);
            changesMade = true;
        }

        if (changesMade)
            InvokeAsync(StateHasChanged);

    }

    private void OnAgendaItemCreated(object sender, MUNity.Schema.Simulation.AgendaItemDto item)
    {
        if (this.AgendaItems.All(n => n.AgendaItemId != item.AgendaItemId))
        {
            var newAgendaItem = new Dtos.Simulations.AgendaItemInfo()
            {
                AgendaItemId = item.AgendaItemId,
                Description = item.Description,
                Name = item.Name,
                PetitionCount = item.Petitions?.Count ?? 0
            };
            this.AgendaItems.Add(newAgendaItem);
            if (this.selectedAgendaItem == null)
            {
                this.selectedAgendaItem = newAgendaItem;
            }
            InvokeAsync(StateHasChanged);
        }

    }

    private void OnPetitionAdded(object sender, MUNity.Schema.Simulation.PetitionInfoDto petition)
    {

        var agendaItem = this.AgendaItems.FirstOrDefault(n => n.AgendaItemId == petition.AgendaItemId);
        if (agendaItem != null)
            agendaItem.PetitionCount++;

        if (this.selectedAgendaItem != null && this.selectedAgendaItem.AgendaItemId == petition.AgendaItemId &&
            this.petitionsOfAgendaItem != null)
        {
            if (this.petitionsOfAgendaItem.All(n => n.PetitionId != petition.PetitionId))
            {
                this.petitionsOfAgendaItem.Add(petition);
                this.petitionsOfAgendaItem = this.petitionsOfAgendaItem.OrderBy(n => n.OrderIndex).ThenBy(n => n.SubmitTime).ToList();
            }
        }
        this.InvokeAsync(this.StateHasChanged);
    }

    private void OnPetitionActivated(object sender, string petitionId)
    {
        if (this.selectedAgendaItem != null)
        {
            var petitionItem = this.petitionsOfAgendaItem.FirstOrDefault(n => n.PetitionId == petitionId);
            if (petitionItem != null)
            {
                petitionItem.Status = MUNity.Models.Simulation.EPetitionStates.Active;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override void OnInitialized()
    {

        base.OnInitialized();

        if (this.ViewModel != null)
        {
            ReloadAgendaItems();
            ViewModel.AgendaItemCreated += OnAgendaItemCreated;
            ViewModel.AgendaItemRemoved += OnAgendaItemRemoved;
            ViewModel.PetitionAdded += OnPetitionAdded;
            ViewModel.PetitionActivated += OnPetitionActivated;
            ViewModel.PetitionRemoved += OnPetitionRemoved;
        }
    }
}
